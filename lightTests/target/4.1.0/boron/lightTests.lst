
/Users/kdneeley/Documents/IoT/NMParkBenchTests/lightTests/target/4.1.0/boron/lightTests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001264  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5280  000b5280  00005280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b52a4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e624  000b52a8  0001e624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000160  2003e690  2003e690  0002e690  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b5314  000b5314  00025314  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b533c  000b533c  0002533c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000d52b9  00000000  00000000  00025340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000d91b  00000000  00000000  000fa5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0002f2f4  00000000  00000000  00107f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021d0  00000000  00000000  00137208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00008a90  00000000  00000000  001393d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003112a  00000000  00000000  00141e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002faaf  00000000  00000000  00172f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012d563  00000000  00000000  001a2a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005f1c  00000000  00000000  002cffa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f000 ff75 	bl	b4f1c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f000 ff7d 	bl	b4f38 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e624 	.word	0x2003e624
   b4048:	000b52a8 	.word	0x000b52a8
   b404c:	2003e690 	.word	0x2003e690
   b4050:	2003e690 	.word	0x2003e690
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 fee3 	bl	b4e28 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b5258 	.word	0x000b5258
   b407c:	000b527c 	.word	0x000b527c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b814 	b.w	b40ac <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f81d 	bl	b40c4 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 be83 	b.w	b4d98 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 ba91 	b.w	b45b8 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f000 ba97 	b.w	b45c8 <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr
	...

000b40ac <setup>:
int CLKPIN = 14; //Clock In Pin
int DPIN = 15; //Data In Pin

lpd8806 lights = lpd8806(14, 0);

void setup() {
   b40ac:	b508      	push	{r3, lr}
    lights.begin();
   b40ae:	4804      	ldr	r0, [pc, #16]	; (b40c0 <setup+0x14>)
   b40b0:	f000 f8d2 	bl	b4258 <_ZN7lpd88065beginEv>
    lights.show();
}
   b40b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lights.show();
   b40b8:	4801      	ldr	r0, [pc, #4]	; (b40c0 <setup+0x14>)
   b40ba:	f000 b8f2 	b.w	b42a2 <_ZN7lpd88064showEv>
   b40be:	bf00      	nop
   b40c0:	2003e690 	.word	0x2003e690

000b40c4 <loop>:

void loop() {
   b40c4:	b507      	push	{r0, r1, r2, lr}
    lights.setPixelColor(0, 0, 255, 0);
   b40c6:	2200      	movs	r2, #0
   b40c8:	4805      	ldr	r0, [pc, #20]	; (b40e0 <loop+0x1c>)
   b40ca:	9200      	str	r2, [sp, #0]
   b40cc:	23ff      	movs	r3, #255	; 0xff
   b40ce:	4611      	mov	r1, r2
   b40d0:	f000 f83b 	bl	b414a <_ZN7lpd880613setPixelColorEthhh>
    lights.show();
   b40d4:	4802      	ldr	r0, [pc, #8]	; (b40e0 <loop+0x1c>)
}
   b40d6:	b003      	add	sp, #12
   b40d8:	f85d eb04 	ldr.w	lr, [sp], #4
    lights.show();
   b40dc:	f000 b8e1 	b.w	b42a2 <_ZN7lpd88064showEv>
   b40e0:	2003e690 	.word	0x2003e690

000b40e4 <_GLOBAL__sub_I_CLKPIN>:
lpd8806 lights = lpd8806(14, 0);
   b40e4:	4802      	ldr	r0, [pc, #8]	; (b40f0 <_GLOBAL__sub_I_CLKPIN+0xc>)
   b40e6:	2200      	movs	r2, #0
   b40e8:	210e      	movs	r1, #14
   b40ea:	f000 b8cc 	b.w	b4286 <_ZN7lpd8806C1Eth>
   b40ee:	bf00      	nop
   b40f0:	2003e690 	.word	0x2003e690

000b40f4 <_ZN7lpd880612updateLengthEt>:
      SPI.transfer(0);
  }
}

// Change strip length (see notes with empty constructor, above):
void lpd8806::updateLength(uint16_t n) {
   b40f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t  latchBytes;
  uint16_t dataBytes, totalBytes;

  numLEDs = numBytes = 0;
   b40f8:	2300      	movs	r3, #0
void lpd8806::updateLength(uint16_t n) {
   b40fa:	4604      	mov	r4, r0
  numLEDs = numBytes = 0;
   b40fc:	6003      	str	r3, [r0, #0]
  if(pixels) free(pixels); // Free existing data (if any)
   b40fe:	6840      	ldr	r0, [r0, #4]
void lpd8806::updateLength(uint16_t n) {
   b4100:	460e      	mov	r6, r1
  if(pixels) free(pixels); // Free existing data (if any)
   b4102:	b108      	cbz	r0, b4108 <_ZN7lpd880612updateLengthEt+0x14>
   b4104:	f000 fa60 	bl	b45c8 <free>

  dataBytes  = n * 3;
  latchBytes = (n + 31) / 32;
   b4108:	f106 081f 	add.w	r8, r6, #31
  dataBytes  = n * 3;
   b410c:	eb06 0546 	add.w	r5, r6, r6, lsl #1
  totalBytes = dataBytes + latchBytes;
   b4110:	f3c8 1847 	ubfx	r8, r8, #5, #8
  dataBytes  = n * 3;
   b4114:	fa1f f985 	uxth.w	r9, r5
  totalBytes = dataBytes + latchBytes;
   b4118:	fa18 f585 	uxtah	r5, r8, r5
   b411c:	b2ad      	uxth	r5, r5
  if((pixels = (uint8_t *)malloc(totalBytes))) { // Alloc new data
   b411e:	4628      	mov	r0, r5
   b4120:	f000 fa4a 	bl	b45b8 <malloc>
   b4124:	4607      	mov	r7, r0
   b4126:	6060      	str	r0, [r4, #4]
   b4128:	b168      	cbz	r0, b4146 <_ZN7lpd880612updateLengthEt+0x52>
    numLEDs  = n;
    numBytes = totalBytes;
    memset( pixels           , 0x80, dataBytes);  // Init to RGB 'off' state
   b412a:	464a      	mov	r2, r9
    numLEDs  = n;
   b412c:	8026      	strh	r6, [r4, #0]
    numBytes = totalBytes;
   b412e:	8065      	strh	r5, [r4, #2]
    memset( pixels           , 0x80, dataBytes);  // Init to RGB 'off' state
   b4130:	2180      	movs	r1, #128	; 0x80
   b4132:	f000 ff01 	bl	b4f38 <memset>
    memset(&pixels[dataBytes], 0   , latchBytes); // Clear latch bytes
   b4136:	4642      	mov	r2, r8
   b4138:	eb07 0009 	add.w	r0, r7, r9
   b413c:	2100      	movs	r1, #0
  }
  // 'begun' state does not change -- pins retain prior modes
}
   b413e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    memset(&pixels[dataBytes], 0   , latchBytes); // Clear latch bytes
   b4142:	f000 bef9 	b.w	b4f38 <memset>
}
   b4146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b414a <_ZN7lpd880613setPixelColorEthhh>:
         ((uint32_t)(r | 0x80) <<  8) |
                     b | 0x80 ;
}

// Set pixel color from separate 7-bit R, G, B components:
void lpd8806::setPixelColor(uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   b414a:	b510      	push	{r4, lr}
  if(n < numLEDs) { // Arrays are 0-indexed, thus NOT '<='
   b414c:	8804      	ldrh	r4, [r0, #0]
   b414e:	428c      	cmp	r4, r1
   b4150:	d90e      	bls.n	b4170 <_ZN7lpd880613setPixelColorEthhh+0x26>
    uint8_t *p = &pixels[n * 3];
   b4152:	6844      	ldr	r4, [r0, #4]
   b4154:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    *p++ = g | 0x80; // Strip color order is GRB,
   b4158:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b415c:	5463      	strb	r3, [r4, r1]
    *p++ = r | 0x80; // not the more common RGB,
    *p++ = b | 0x80; // so the order here is intentional; don't "fix"
   b415e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    uint8_t *p = &pixels[n * 3];
   b4162:	1860      	adds	r0, r4, r1
    *p++ = r | 0x80; // not the more common RGB,
   b4164:	f062 027f 	orn	r2, r2, #127	; 0x7f
    *p++ = b | 0x80; // so the order here is intentional; don't "fix"
   b4168:	f063 037f 	orn	r3, r3, #127	; 0x7f
    *p++ = r | 0x80; // not the more common RGB,
   b416c:	7042      	strb	r2, [r0, #1]
    *p++ = b | 0x80; // so the order here is intentional; don't "fix"
   b416e:	7083      	strb	r3, [r0, #2]
  }
}
   b4170:	bd10      	pop	{r4, pc}
	...

000b4174 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4174:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
   b4176:	4c09      	ldr	r4, [pc, #36]	; (b419c <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x28>)
   b4178:	7823      	ldrb	r3, [r4, #0]
   b417a:	f3bf 8f5b 	dmb	ish
   b417e:	07db      	lsls	r3, r3, #31
   b4180:	d40a      	bmi.n	b4198 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x24>
   b4182:	4620      	mov	r0, r4
   b4184:	f7ff ff89 	bl	b409a <__cxa_guard_acquire>
   b4188:	b130      	cbz	r0, b4198 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x24>
   b418a:	4805      	ldr	r0, [pc, #20]	; (b41a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x2c>)
   b418c:	2101      	movs	r1, #1
   b418e:	f000 fc4d 	bl	b4a2c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4192:	4620      	mov	r0, r4
   b4194:	f7ff ff86 	bl	b40a4 <__cxa_guard_release>
        return instance;
    }
   b4198:	4801      	ldr	r0, [pc, #4]	; (b41a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x2c>)
   b419a:	bd10      	pop	{r4, pc}
   b419c:	2003e6a8 	.word	0x2003e6a8
   b41a0:	2003e6ac 	.word	0x2003e6ac

000b41a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b41a4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b41a6:	4c0b      	ldr	r4, [pc, #44]	; (b41d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b41a8:	7821      	ldrb	r1, [r4, #0]
   b41aa:	f3bf 8f5b 	dmb	ish
   b41ae:	f011 0101 	ands.w	r1, r1, #1
   b41b2:	d10b      	bne.n	b41cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b41b4:	4620      	mov	r0, r4
   b41b6:	9101      	str	r1, [sp, #4]
   b41b8:	f7ff ff6f 	bl	b409a <__cxa_guard_acquire>
   b41bc:	9901      	ldr	r1, [sp, #4]
   b41be:	b128      	cbz	r0, b41cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b41c0:	4805      	ldr	r0, [pc, #20]	; (b41d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b41c2:	f000 fc33 	bl	b4a2c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b41c6:	4620      	mov	r0, r4
   b41c8:	f7ff ff6c 	bl	b40a4 <__cxa_guard_release>
    }
   b41cc:	4802      	ldr	r0, [pc, #8]	; (b41d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b41ce:	b002      	add	sp, #8
   b41d0:	bd10      	pop	{r4, pc}
   b41d2:	bf00      	nop
   b41d4:	2003e69c 	.word	0x2003e69c
   b41d8:	2003e6a0 	.word	0x2003e6a0

000b41dc <_ZN7lpd88068startSPIEv>:
void lpd8806::startSPI(void) {
   b41dc:	b570      	push	{r4, r5, r6, lr}
  if (spi_port) {
   b41de:	7a04      	ldrb	r4, [r0, #8]
void lpd8806::startSPI(void) {
   b41e0:	4605      	mov	r5, r0
  if (spi_port) {
   b41e2:	b30c      	cbz	r4, b4228 <_ZN7lpd88068startSPIEv+0x4c>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b41e4:	f7ff ffc6 	bl	b4174 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
   b41e8:	f000 fc2a 	bl	b4a40 <_ZN8SPIClass5beginEv>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   b41ec:	f7ff ffc2 	bl	b4174 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
   b41f0:	2101      	movs	r1, #1
   b41f2:	f000 fc4b 	bl	b4a8c <_ZN8SPIClass11setBitOrderEh>
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   b41f6:	f7ff ffbd 	bl	b4174 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
   b41fa:	2100      	movs	r1, #0
   b41fc:	f000 fc5a 	bl	b4ab4 <_ZN8SPIClass11setDataModeEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b4200:	f7ff ffb8 	bl	b4174 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
   b4204:	4a13      	ldr	r2, [pc, #76]	; (b4254 <_ZN7lpd88068startSPIEv+0x78>)
   b4206:	2102      	movs	r1, #2
   b4208:	f000 fc7e 	bl	b4b08 <_ZN8SPIClass13setClockSpeedEjj>
  for(uint16_t i=((numLEDs+31)/32); i>0; i--) {
   b420c:	882c      	ldrh	r4, [r5, #0]
   b420e:	341f      	adds	r4, #31
   b4210:	0964      	lsrs	r4, r4, #5
   b4212:	b1f4      	cbz	r4, b4252 <_ZN7lpd88068startSPIEv+0x76>
    if (spi_port)
   b4214:	7a2e      	ldrb	r6, [r5, #8]
   b4216:	b1c6      	cbz	r6, b424a <_ZN7lpd88068startSPIEv+0x6e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4218:	f7ff ffac 	bl	b4174 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
   b421c:	2100      	movs	r1, #0
  for(uint16_t i=((numLEDs+31)/32); i>0; i--) {
   b421e:	3c01      	subs	r4, #1
   b4220:	f000 fca4 	bl	b4b6c <_ZN8SPIClass8transferEh>
   b4224:	b2a4      	uxth	r4, r4
   b4226:	e7f4      	b.n	b4212 <_ZN7lpd88068startSPIEv+0x36>
        instance().begin();
   b4228:	f7ff ffbc 	bl	b41a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b422c:	f000 fc08 	bl	b4a40 <_ZN8SPIClass5beginEv>
        instance().setBitOrder(order);
   b4230:	f7ff ffb8 	bl	b41a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4234:	2101      	movs	r1, #1
   b4236:	f000 fc29 	bl	b4a8c <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
   b423a:	f7ff ffb3 	bl	b41a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b423e:	4621      	mov	r1, r4
   b4240:	f000 fc38 	bl	b4ab4 <_ZN8SPIClass11setDataModeEh>
        return instance().setClockSpeed(value, scale);
   b4244:	f7ff ffae 	bl	b41a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4248:	e7dc      	b.n	b4204 <_ZN7lpd88068startSPIEv+0x28>
        return instance().transfer(data);
   b424a:	f7ff ffab 	bl	b41a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b424e:	4631      	mov	r1, r6
   b4250:	e7e5      	b.n	b421e <_ZN7lpd88068startSPIEv+0x42>
}
   b4252:	bd70      	pop	{r4, r5, r6, pc}
   b4254:	000f4240 	.word	0x000f4240

000b4258 <_ZN7lpd88065beginEv>:
void lpd8806::begin(void) {
   b4258:	b510      	push	{r4, lr}
   b425a:	4604      	mov	r4, r0
  startSPI();
   b425c:	f7ff ffbe 	bl	b41dc <_ZN7lpd88068startSPIEv>
  begun = true;
   b4260:	2301      	movs	r3, #1
   b4262:	7263      	strb	r3, [r4, #9]
}
   b4264:	bd10      	pop	{r4, pc}

000b4266 <_ZN7lpd880610updatePinsEh>:
void lpd8806::updatePins(uint8_t spi_num) {
   b4266:	b538      	push	{r3, r4, r5, lr}
  if(begun) { // If begin() was previously invoked...
   b4268:	7a43      	ldrb	r3, [r0, #9]
void lpd8806::updatePins(uint8_t spi_num) {
   b426a:	4604      	mov	r4, r0
   b426c:	460d      	mov	r5, r1
  if(begun) { // If begin() was previously invoked...
   b426e:	b12b      	cbz	r3, b427c <_ZN7lpd880610updatePinsEh+0x16>
    if(spi_port)
   b4270:	7a03      	ldrb	r3, [r0, #8]
   b4272:	b12b      	cbz	r3, b4280 <_ZN7lpd880610updatePinsEh+0x1a>
        instance().end();
   b4274:	f7ff ff7e 	bl	b4174 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
   b4278:	f000 fbf6 	bl	b4a68 <_ZN8SPIClass3endEv>
  spi_port = spi_num;
   b427c:	7225      	strb	r5, [r4, #8]
}
   b427e:	bd38      	pop	{r3, r4, r5, pc}
   b4280:	f7ff ff90 	bl	b41a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4284:	e7f8      	b.n	b4278 <_ZN7lpd880610updatePinsEh+0x12>

000b4286 <_ZN7lpd8806C1Eth>:
lpd8806::lpd8806(uint16_t n, uint8_t spi_num) {
   b4286:	b538      	push	{r3, r4, r5, lr}
  pixels = NULL;
   b4288:	2300      	movs	r3, #0
lpd8806::lpd8806(uint16_t n, uint8_t spi_num) {
   b428a:	4604      	mov	r4, r0
   b428c:	4615      	mov	r5, r2
  pixels = NULL;
   b428e:	6043      	str	r3, [r0, #4]
  begun  = false;
   b4290:	7243      	strb	r3, [r0, #9]
  updateLength(n);
   b4292:	f7ff ff2f 	bl	b40f4 <_ZN7lpd880612updateLengthEt>
  updatePins(spi_num);
   b4296:	4620      	mov	r0, r4
   b4298:	4629      	mov	r1, r5
   b429a:	f7ff ffe4 	bl	b4266 <_ZN7lpd880610updatePinsEh>
}
   b429e:	4620      	mov	r0, r4
   b42a0:	bd38      	pop	{r3, r4, r5, pc}

000b42a2 <_ZN7lpd88064showEv>:
void lpd8806::show(void) {
   b42a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t  *ptr = pixels;
   b42a4:	6844      	ldr	r4, [r0, #4]
  uint16_t i    = numBytes;
   b42a6:	8845      	ldrh	r5, [r0, #2]
  if (spi_port) {
   b42a8:	7a03      	ldrb	r3, [r0, #8]
   b42aa:	4425      	add	r5, r4
   b42ac:	b153      	cbz	r3, b42c4 <_ZN7lpd88064showEv+0x22>
      while(i--) SPI1.transfer(*ptr++);
   b42ae:	42ac      	cmp	r4, r5
   b42b0:	d013      	beq.n	b42da <_ZN7lpd88064showEv+0x38>
   b42b2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b42b6:	9101      	str	r1, [sp, #4]
        return instance().transfer(data);
   b42b8:	f7ff ff5c 	bl	b4174 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
   b42bc:	9901      	ldr	r1, [sp, #4]
   b42be:	f000 fc55 	bl	b4b6c <_ZN8SPIClass8transferEh>
   b42c2:	e7f4      	b.n	b42ae <_ZN7lpd88064showEv+0xc>
      while(i--) SPI.transfer(*ptr++);
   b42c4:	42ac      	cmp	r4, r5
   b42c6:	d008      	beq.n	b42da <_ZN7lpd88064showEv+0x38>
   b42c8:	f814 1b01 	ldrb.w	r1, [r4], #1
   b42cc:	9101      	str	r1, [sp, #4]
   b42ce:	f7ff ff69 	bl	b41a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b42d2:	9901      	ldr	r1, [sp, #4]
   b42d4:	f000 fc4a 	bl	b4b6c <_ZN8SPIClass8transferEh>
   b42d8:	e7f4      	b.n	b42c4 <_ZN7lpd88064showEv+0x22>
}
   b42da:	b003      	add	sp, #12
   b42dc:	bd30      	pop	{r4, r5, pc}
	...

000b42e0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b42e0:	b508      	push	{r3, lr}
   b42e2:	4b02      	ldr	r3, [pc, #8]	; (b42ec <os_mutex_recursive_create+0xc>)
   b42e4:	681b      	ldr	r3, [r3, #0]
   b42e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b42e8:	9301      	str	r3, [sp, #4]
   b42ea:	bd08      	pop	{r3, pc}
   b42ec:	00030248 	.word	0x00030248

000b42f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b42f0:	b508      	push	{r3, lr}
   b42f2:	4b02      	ldr	r3, [pc, #8]	; (b42fc <HAL_RNG_GetRandomNumber+0xc>)
   b42f4:	681b      	ldr	r3, [r3, #0]
   b42f6:	685b      	ldr	r3, [r3, #4]
   b42f8:	9301      	str	r3, [sp, #4]
   b42fa:	bd08      	pop	{r3, pc}
   b42fc:	00030218 	.word	0x00030218

000b4300 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4300:	b508      	push	{r3, lr}
   b4302:	4b02      	ldr	r3, [pc, #8]	; (b430c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4304:	681b      	ldr	r3, [r3, #0]
   b4306:	695b      	ldr	r3, [r3, #20]
   b4308:	9301      	str	r3, [sp, #4]
   b430a:	bd08      	pop	{r3, pc}
   b430c:	00030218 	.word	0x00030218

000b4310 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4310:	b508      	push	{r3, lr}
   b4312:	4b02      	ldr	r3, [pc, #8]	; (b431c <inet_inet_ntop+0xc>)
   b4314:	681b      	ldr	r3, [r3, #0]
   b4316:	695b      	ldr	r3, [r3, #20]
   b4318:	9301      	str	r3, [sp, #4]
   b431a:	bd08      	pop	{r3, pc}
   b431c:	00030264 	.word	0x00030264

000b4320 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4320:	b508      	push	{r3, lr}
   b4322:	4b02      	ldr	r3, [pc, #8]	; (b432c <netdb_freeaddrinfo+0xc>)
   b4324:	681b      	ldr	r3, [r3, #0]
   b4326:	689b      	ldr	r3, [r3, #8]
   b4328:	9301      	str	r3, [sp, #4]
   b432a:	bd08      	pop	{r3, pc}
   b432c:	00030268 	.word	0x00030268

000b4330 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4330:	b508      	push	{r3, lr}
   b4332:	4b02      	ldr	r3, [pc, #8]	; (b433c <netdb_getaddrinfo+0xc>)
   b4334:	681b      	ldr	r3, [r3, #0]
   b4336:	68db      	ldr	r3, [r3, #12]
   b4338:	9301      	str	r3, [sp, #4]
   b433a:	bd08      	pop	{r3, pc}
   b433c:	00030268 	.word	0x00030268

000b4340 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b4340:	b508      	push	{r3, lr}
   b4342:	4b02      	ldr	r3, [pc, #8]	; (b434c <hal_spi_begin+0xc>)
   b4344:	681b      	ldr	r3, [r3, #0]
   b4346:	681b      	ldr	r3, [r3, #0]
   b4348:	9301      	str	r3, [sp, #4]
   b434a:	bd08      	pop	{r3, pc}
   b434c:	00030230 	.word	0x00030230

000b4350 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   b4350:	b508      	push	{r3, lr}
   b4352:	4b02      	ldr	r3, [pc, #8]	; (b435c <hal_spi_end+0xc>)
   b4354:	681b      	ldr	r3, [r3, #0]
   b4356:	685b      	ldr	r3, [r3, #4]
   b4358:	9301      	str	r3, [sp, #4]
   b435a:	bd08      	pop	{r3, pc}
   b435c:	00030230 	.word	0x00030230

000b4360 <hal_spi_set_bit_order>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b4360:	b508      	push	{r3, lr}
   b4362:	4b02      	ldr	r3, [pc, #8]	; (b436c <hal_spi_set_bit_order+0xc>)
   b4364:	681b      	ldr	r3, [r3, #0]
   b4366:	689b      	ldr	r3, [r3, #8]
   b4368:	9301      	str	r3, [sp, #4]
   b436a:	bd08      	pop	{r3, pc}
   b436c:	00030230 	.word	0x00030230

000b4370 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b4370:	b508      	push	{r3, lr}
   b4372:	4b02      	ldr	r3, [pc, #8]	; (b437c <hal_spi_set_data_mode+0xc>)
   b4374:	681b      	ldr	r3, [r3, #0]
   b4376:	68db      	ldr	r3, [r3, #12]
   b4378:	9301      	str	r3, [sp, #4]
   b437a:	bd08      	pop	{r3, pc}
   b437c:	00030230 	.word	0x00030230

000b4380 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b4380:	b508      	push	{r3, lr}
   b4382:	4b02      	ldr	r3, [pc, #8]	; (b438c <hal_spi_set_clock_divider+0xc>)
   b4384:	681b      	ldr	r3, [r3, #0]
   b4386:	691b      	ldr	r3, [r3, #16]
   b4388:	9301      	str	r3, [sp, #4]
   b438a:	bd08      	pop	{r3, pc}
   b438c:	00030230 	.word	0x00030230

000b4390 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b4390:	b508      	push	{r3, lr}
   b4392:	4b02      	ldr	r3, [pc, #8]	; (b439c <hal_spi_transfer+0xc>)
   b4394:	681b      	ldr	r3, [r3, #0]
   b4396:	695b      	ldr	r3, [r3, #20]
   b4398:	9301      	str	r3, [sp, #4]
   b439a:	bd08      	pop	{r3, pc}
   b439c:	00030230 	.word	0x00030230

000b43a0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b43a0:	b508      	push	{r3, lr}
   b43a2:	4b02      	ldr	r3, [pc, #8]	; (b43ac <hal_spi_init+0xc>)
   b43a4:	681b      	ldr	r3, [r3, #0]
   b43a6:	69db      	ldr	r3, [r3, #28]
   b43a8:	9301      	str	r3, [sp, #4]
   b43aa:	bd08      	pop	{r3, pc}
   b43ac:	00030230 	.word	0x00030230

000b43b0 <hal_spi_info>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b43b0:	b508      	push	{r3, lr}
   b43b2:	4b02      	ldr	r3, [pc, #8]	; (b43bc <hal_spi_info+0xc>)
   b43b4:	681b      	ldr	r3, [r3, #0]
   b43b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b43b8:	9301      	str	r3, [sp, #4]
   b43ba:	bd08      	pop	{r3, pc}
   b43bc:	00030230 	.word	0x00030230

000b43c0 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b43c0:	b508      	push	{r3, lr}
   b43c2:	4b02      	ldr	r3, [pc, #8]	; (b43cc <hal_spi_acquire+0xc>)
   b43c4:	681b      	ldr	r3, [r3, #0]
   b43c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b43c8:	9301      	str	r3, [sp, #4]
   b43ca:	bd08      	pop	{r3, pc}
   b43cc:	00030230 	.word	0x00030230

000b43d0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b43d0:	b508      	push	{r3, lr}
   b43d2:	4b02      	ldr	r3, [pc, #8]	; (b43dc <hal_spi_release+0xc>)
   b43d4:	681b      	ldr	r3, [r3, #0]
   b43d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b43d8:	9301      	str	r3, [sp, #4]
   b43da:	bd08      	pop	{r3, pc}
   b43dc:	00030230 	.word	0x00030230

000b43e0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b43e0:	b508      	push	{r3, lr}
   b43e2:	4b02      	ldr	r3, [pc, #8]	; (b43ec <hal_usart_write+0xc>)
   b43e4:	681b      	ldr	r3, [r3, #0]
   b43e6:	68db      	ldr	r3, [r3, #12]
   b43e8:	9301      	str	r3, [sp, #4]
   b43ea:	bd08      	pop	{r3, pc}
   b43ec:	0003023c 	.word	0x0003023c

000b43f0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b43f0:	b508      	push	{r3, lr}
   b43f2:	4b02      	ldr	r3, [pc, #8]	; (b43fc <hal_usart_available+0xc>)
   b43f4:	681b      	ldr	r3, [r3, #0]
   b43f6:	691b      	ldr	r3, [r3, #16]
   b43f8:	9301      	str	r3, [sp, #4]
   b43fa:	bd08      	pop	{r3, pc}
   b43fc:	0003023c 	.word	0x0003023c

000b4400 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4400:	b508      	push	{r3, lr}
   b4402:	4b02      	ldr	r3, [pc, #8]	; (b440c <hal_usart_read+0xc>)
   b4404:	681b      	ldr	r3, [r3, #0]
   b4406:	695b      	ldr	r3, [r3, #20]
   b4408:	9301      	str	r3, [sp, #4]
   b440a:	bd08      	pop	{r3, pc}
   b440c:	0003023c 	.word	0x0003023c

000b4410 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4410:	b508      	push	{r3, lr}
   b4412:	4b02      	ldr	r3, [pc, #8]	; (b441c <hal_usart_peek+0xc>)
   b4414:	681b      	ldr	r3, [r3, #0]
   b4416:	699b      	ldr	r3, [r3, #24]
   b4418:	9301      	str	r3, [sp, #4]
   b441a:	bd08      	pop	{r3, pc}
   b441c:	0003023c 	.word	0x0003023c

000b4420 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4420:	b508      	push	{r3, lr}
   b4422:	4b02      	ldr	r3, [pc, #8]	; (b442c <hal_usart_flush+0xc>)
   b4424:	681b      	ldr	r3, [r3, #0]
   b4426:	69db      	ldr	r3, [r3, #28]
   b4428:	9301      	str	r3, [sp, #4]
   b442a:	bd08      	pop	{r3, pc}
   b442c:	0003023c 	.word	0x0003023c

000b4430 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4430:	b508      	push	{r3, lr}
   b4432:	4b02      	ldr	r3, [pc, #8]	; (b443c <hal_usart_available_data_for_write+0xc>)
   b4434:	681b      	ldr	r3, [r3, #0]
   b4436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4438:	9301      	str	r3, [sp, #4]
   b443a:	bd08      	pop	{r3, pc}
   b443c:	0003023c 	.word	0x0003023c

000b4440 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4440:	b508      	push	{r3, lr}
   b4442:	4b02      	ldr	r3, [pc, #8]	; (b444c <hal_usart_init_ex+0xc>)
   b4444:	681b      	ldr	r3, [r3, #0]
   b4446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4448:	9301      	str	r3, [sp, #4]
   b444a:	bd08      	pop	{r3, pc}
   b444c:	0003023c 	.word	0x0003023c

000b4450 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4450:	b508      	push	{r3, lr}
   b4452:	4b02      	ldr	r3, [pc, #8]	; (b445c <HAL_USB_USART_Init+0xc>)
   b4454:	681b      	ldr	r3, [r3, #0]
   b4456:	681b      	ldr	r3, [r3, #0]
   b4458:	9301      	str	r3, [sp, #4]
   b445a:	bd08      	pop	{r3, pc}
   b445c:	0003024c 	.word	0x0003024c

000b4460 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4460:	b508      	push	{r3, lr}
   b4462:	4b02      	ldr	r3, [pc, #8]	; (b446c <HAL_USB_USART_Available_Data+0xc>)
   b4464:	681b      	ldr	r3, [r3, #0]
   b4466:	691b      	ldr	r3, [r3, #16]
   b4468:	9301      	str	r3, [sp, #4]
   b446a:	bd08      	pop	{r3, pc}
   b446c:	0003024c 	.word	0x0003024c

000b4470 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4470:	b508      	push	{r3, lr}
   b4472:	4b02      	ldr	r3, [pc, #8]	; (b447c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4474:	681b      	ldr	r3, [r3, #0]
   b4476:	695b      	ldr	r3, [r3, #20]
   b4478:	9301      	str	r3, [sp, #4]
   b447a:	bd08      	pop	{r3, pc}
   b447c:	0003024c 	.word	0x0003024c

000b4480 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4480:	b508      	push	{r3, lr}
   b4482:	4b02      	ldr	r3, [pc, #8]	; (b448c <HAL_USB_USART_Receive_Data+0xc>)
   b4484:	681b      	ldr	r3, [r3, #0]
   b4486:	699b      	ldr	r3, [r3, #24]
   b4488:	9301      	str	r3, [sp, #4]
   b448a:	bd08      	pop	{r3, pc}
   b448c:	0003024c 	.word	0x0003024c

000b4490 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4490:	b508      	push	{r3, lr}
   b4492:	4b02      	ldr	r3, [pc, #8]	; (b449c <HAL_USB_USART_Send_Data+0xc>)
   b4494:	681b      	ldr	r3, [r3, #0]
   b4496:	69db      	ldr	r3, [r3, #28]
   b4498:	9301      	str	r3, [sp, #4]
   b449a:	bd08      	pop	{r3, pc}
   b449c:	0003024c 	.word	0x0003024c

000b44a0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b44a0:	b508      	push	{r3, lr}
   b44a2:	4b02      	ldr	r3, [pc, #8]	; (b44ac <HAL_USB_USART_Flush_Data+0xc>)
   b44a4:	681b      	ldr	r3, [r3, #0]
   b44a6:	6a1b      	ldr	r3, [r3, #32]
   b44a8:	9301      	str	r3, [sp, #4]
   b44aa:	bd08      	pop	{r3, pc}
   b44ac:	0003024c 	.word	0x0003024c

000b44b0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b44b0:	b508      	push	{r3, lr}
   b44b2:	4b02      	ldr	r3, [pc, #8]	; (b44bc <set_system_mode+0xc>)
   b44b4:	681b      	ldr	r3, [r3, #0]
   b44b6:	685b      	ldr	r3, [r3, #4]
   b44b8:	9301      	str	r3, [sp, #4]
   b44ba:	bd08      	pop	{r3, pc}
   b44bc:	00030220 	.word	0x00030220

000b44c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b44c0:	b508      	push	{r3, lr}
   b44c2:	4b03      	ldr	r3, [pc, #12]	; (b44d0 <system_ctrl_set_app_request_handler+0x10>)
   b44c4:	681b      	ldr	r3, [r3, #0]
   b44c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b44ca:	9301      	str	r3, [sp, #4]
   b44cc:	bd08      	pop	{r3, pc}
   b44ce:	0000      	.short	0x0000
   b44d0:	00030220 	.word	0x00030220

000b44d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b44d4:	b508      	push	{r3, lr}
   b44d6:	4b03      	ldr	r3, [pc, #12]	; (b44e4 <system_ctrl_set_result+0x10>)
   b44d8:	681b      	ldr	r3, [r3, #0]
   b44da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b44de:	9301      	str	r3, [sp, #4]
   b44e0:	bd08      	pop	{r3, pc}
   b44e2:	0000      	.short	0x0000
   b44e4:	00030220 	.word	0x00030220

000b44e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b44e8:	b508      	push	{r3, lr}
   b44ea:	4b02      	ldr	r3, [pc, #8]	; (b44f4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b44ec:	681b      	ldr	r3, [r3, #0]
   b44ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b44f0:	9301      	str	r3, [sp, #4]
   b44f2:	bd08      	pop	{r3, pc}
   b44f4:	00030244 	.word	0x00030244

000b44f8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b44f8:	b508      	push	{r3, lr}
   b44fa:	4b02      	ldr	r3, [pc, #8]	; (b4504 <network_connect+0xc>)
   b44fc:	681b      	ldr	r3, [r3, #0]
   b44fe:	685b      	ldr	r3, [r3, #4]
   b4500:	9301      	str	r3, [sp, #4]
   b4502:	bd08      	pop	{r3, pc}
   b4504:	00030240 	.word	0x00030240

000b4508 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4508:	b508      	push	{r3, lr}
   b450a:	4b02      	ldr	r3, [pc, #8]	; (b4514 <network_connecting+0xc>)
   b450c:	681b      	ldr	r3, [r3, #0]
   b450e:	689b      	ldr	r3, [r3, #8]
   b4510:	9301      	str	r3, [sp, #4]
   b4512:	bd08      	pop	{r3, pc}
   b4514:	00030240 	.word	0x00030240

000b4518 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4518:	b508      	push	{r3, lr}
   b451a:	4b02      	ldr	r3, [pc, #8]	; (b4524 <network_disconnect+0xc>)
   b451c:	681b      	ldr	r3, [r3, #0]
   b451e:	68db      	ldr	r3, [r3, #12]
   b4520:	9301      	str	r3, [sp, #4]
   b4522:	bd08      	pop	{r3, pc}
   b4524:	00030240 	.word	0x00030240

000b4528 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4528:	b508      	push	{r3, lr}
   b452a:	4b02      	ldr	r3, [pc, #8]	; (b4534 <network_ready+0xc>)
   b452c:	681b      	ldr	r3, [r3, #0]
   b452e:	691b      	ldr	r3, [r3, #16]
   b4530:	9301      	str	r3, [sp, #4]
   b4532:	bd08      	pop	{r3, pc}
   b4534:	00030240 	.word	0x00030240

000b4538 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4538:	b508      	push	{r3, lr}
   b453a:	4b02      	ldr	r3, [pc, #8]	; (b4544 <network_on+0xc>)
   b453c:	681b      	ldr	r3, [r3, #0]
   b453e:	695b      	ldr	r3, [r3, #20]
   b4540:	9301      	str	r3, [sp, #4]
   b4542:	bd08      	pop	{r3, pc}
   b4544:	00030240 	.word	0x00030240

000b4548 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4548:	b508      	push	{r3, lr}
   b454a:	4b02      	ldr	r3, [pc, #8]	; (b4554 <network_off+0xc>)
   b454c:	681b      	ldr	r3, [r3, #0]
   b454e:	699b      	ldr	r3, [r3, #24]
   b4550:	9301      	str	r3, [sp, #4]
   b4552:	bd08      	pop	{r3, pc}
   b4554:	00030240 	.word	0x00030240

000b4558 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4558:	b508      	push	{r3, lr}
   b455a:	4b02      	ldr	r3, [pc, #8]	; (b4564 <network_listen+0xc>)
   b455c:	681b      	ldr	r3, [r3, #0]
   b455e:	69db      	ldr	r3, [r3, #28]
   b4560:	9301      	str	r3, [sp, #4]
   b4562:	bd08      	pop	{r3, pc}
   b4564:	00030240 	.word	0x00030240

000b4568 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4568:	b508      	push	{r3, lr}
   b456a:	4b02      	ldr	r3, [pc, #8]	; (b4574 <network_listening+0xc>)
   b456c:	681b      	ldr	r3, [r3, #0]
   b456e:	6a1b      	ldr	r3, [r3, #32]
   b4570:	9301      	str	r3, [sp, #4]
   b4572:	bd08      	pop	{r3, pc}
   b4574:	00030240 	.word	0x00030240

000b4578 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4578:	b508      	push	{r3, lr}
   b457a:	4b02      	ldr	r3, [pc, #8]	; (b4584 <network_set_listen_timeout+0xc>)
   b457c:	681b      	ldr	r3, [r3, #0]
   b457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4580:	9301      	str	r3, [sp, #4]
   b4582:	bd08      	pop	{r3, pc}
   b4584:	00030240 	.word	0x00030240

000b4588 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4588:	b508      	push	{r3, lr}
   b458a:	4b02      	ldr	r3, [pc, #8]	; (b4594 <network_get_listen_timeout+0xc>)
   b458c:	681b      	ldr	r3, [r3, #0]
   b458e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4590:	9301      	str	r3, [sp, #4]
   b4592:	bd08      	pop	{r3, pc}
   b4594:	00030240 	.word	0x00030240

000b4598 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4598:	b508      	push	{r3, lr}
   b459a:	4b02      	ldr	r3, [pc, #8]	; (b45a4 <network_is_on+0xc>)
   b459c:	681b      	ldr	r3, [r3, #0]
   b459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b45a0:	9301      	str	r3, [sp, #4]
   b45a2:	bd08      	pop	{r3, pc}
   b45a4:	00030240 	.word	0x00030240

000b45a8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b45a8:	b508      	push	{r3, lr}
   b45aa:	4b02      	ldr	r3, [pc, #8]	; (b45b4 <network_is_off+0xc>)
   b45ac:	681b      	ldr	r3, [r3, #0]
   b45ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45b0:	9301      	str	r3, [sp, #4]
   b45b2:	bd08      	pop	{r3, pc}
   b45b4:	00030240 	.word	0x00030240

000b45b8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b45b8:	b508      	push	{r3, lr}
   b45ba:	4b02      	ldr	r3, [pc, #8]	; (b45c4 <malloc+0xc>)
   b45bc:	681b      	ldr	r3, [r3, #0]
   b45be:	681b      	ldr	r3, [r3, #0]
   b45c0:	9301      	str	r3, [sp, #4]
   b45c2:	bd08      	pop	{r3, pc}
   b45c4:	0003021c 	.word	0x0003021c

000b45c8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b45c8:	b508      	push	{r3, lr}
   b45ca:	4b02      	ldr	r3, [pc, #8]	; (b45d4 <free+0xc>)
   b45cc:	681b      	ldr	r3, [r3, #0]
   b45ce:	685b      	ldr	r3, [r3, #4]
   b45d0:	9301      	str	r3, [sp, #4]
   b45d2:	bd08      	pop	{r3, pc}
   b45d4:	0003021c 	.word	0x0003021c

000b45d8 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b45d8:	b508      	push	{r3, lr}
   b45da:	4b02      	ldr	r3, [pc, #8]	; (b45e4 <__assert_func+0xc>)
   b45dc:	681b      	ldr	r3, [r3, #0]
   b45de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b45e0:	9301      	str	r3, [sp, #4]
   b45e2:	bd08      	pop	{r3, pc}
   b45e4:	0003021c 	.word	0x0003021c

000b45e8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b45e8:	b508      	push	{r3, lr}
   b45ea:	4b02      	ldr	r3, [pc, #8]	; (b45f4 <newlib_impure_ptr_callback+0xc>)
   b45ec:	681b      	ldr	r3, [r3, #0]
   b45ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45f0:	9301      	str	r3, [sp, #4]
   b45f2:	bd08      	pop	{r3, pc}
   b45f4:	0003021c 	.word	0x0003021c

000b45f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b45f8:	4802      	ldr	r0, [pc, #8]	; (b4604 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b45fa:	2300      	movs	r3, #0
   b45fc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b45fe:	f7ff be6f 	b.w	b42e0 <os_mutex_recursive_create>
   b4602:	bf00      	nop
   b4604:	2003e6b4 	.word	0x2003e6b4

000b4608 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4608:	2200      	movs	r2, #0
   b460a:	6840      	ldr	r0, [r0, #4]
   b460c:	4611      	mov	r1, r2
   b460e:	f7ff bf8b 	b.w	b4528 <network_ready>

000b4612 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b4612:	2200      	movs	r2, #0
   b4614:	6840      	ldr	r0, [r0, #4]
   b4616:	4611      	mov	r1, r2
   b4618:	f7ff bfa6 	b.w	b4568 <network_listening>

000b461c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b461c:	2200      	movs	r2, #0
   b461e:	6840      	ldr	r0, [r0, #4]
   b4620:	4611      	mov	r1, r2
   b4622:	f7ff bfb1 	b.w	b4588 <network_get_listen_timeout>

000b4626 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4626:	6840      	ldr	r0, [r0, #4]
   b4628:	2200      	movs	r2, #0
   b462a:	f7ff bfa5 	b.w	b4578 <network_set_listen_timeout>

000b462e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b462e:	6840      	ldr	r0, [r0, #4]
   b4630:	2200      	movs	r2, #0
   b4632:	f081 0101 	eor.w	r1, r1, #1
   b4636:	f7ff bf8f 	b.w	b4558 <network_listen>

000b463a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b463a:	2300      	movs	r3, #0
   b463c:	6840      	ldr	r0, [r0, #4]
   b463e:	461a      	mov	r2, r3
   b4640:	4619      	mov	r1, r3
   b4642:	f7ff bf81 	b.w	b4548 <network_off>

000b4646 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4646:	2300      	movs	r3, #0
   b4648:	6840      	ldr	r0, [r0, #4]
   b464a:	461a      	mov	r2, r3
   b464c:	4619      	mov	r1, r3
   b464e:	f7ff bf73 	b.w	b4538 <network_on>

000b4652 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4652:	2200      	movs	r2, #0
   b4654:	6840      	ldr	r0, [r0, #4]
   b4656:	4611      	mov	r1, r2
   b4658:	f7ff bf56 	b.w	b4508 <network_connecting>

000b465c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b465c:	6840      	ldr	r0, [r0, #4]
   b465e:	2200      	movs	r2, #0
   b4660:	2102      	movs	r1, #2
   b4662:	f7ff bf59 	b.w	b4518 <network_disconnect>

000b4666 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4666:	2300      	movs	r3, #0
   b4668:	6840      	ldr	r0, [r0, #4]
   b466a:	461a      	mov	r2, r3
   b466c:	f7ff bf44 	b.w	b44f8 <network_connect>

000b4670 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b4670:	4b08      	ldr	r3, [pc, #32]	; (b4694 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b4672:	b510      	push	{r4, lr}
   b4674:	2428      	movs	r4, #40	; 0x28
   b4676:	4622      	mov	r2, r4
   b4678:	4618      	mov	r0, r3
   b467a:	2100      	movs	r1, #0
   b467c:	f000 fc5c 	bl	b4f38 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4680:	4b05      	ldr	r3, [pc, #20]	; (b4698 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b4682:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b4684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4688:	6042      	str	r2, [r0, #4]
   b468a:	2204      	movs	r2, #4
   b468c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b468e:	4a03      	ldr	r2, [pc, #12]	; (b469c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b4690:	601a      	str	r2, [r3, #0]
   b4692:	bd10      	pop	{r4, pc}
   b4694:	2003e6c0 	.word	0x2003e6c0
   b4698:	2003e6b8 	.word	0x2003e6b8
   b469c:	000b509c 	.word	0x000b509c

000b46a0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b46a0:	2200      	movs	r2, #0
   b46a2:	6840      	ldr	r0, [r0, #4]
   b46a4:	4611      	mov	r1, r2
   b46a6:	f7ff bf5f 	b.w	b4568 <network_listening>

000b46aa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b46aa:	2200      	movs	r2, #0
   b46ac:	6840      	ldr	r0, [r0, #4]
   b46ae:	4611      	mov	r1, r2
   b46b0:	f7ff bf6a 	b.w	b4588 <network_get_listen_timeout>

000b46b4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b46b4:	6840      	ldr	r0, [r0, #4]
   b46b6:	2200      	movs	r2, #0
   b46b8:	f7ff bf5e 	b.w	b4578 <network_set_listen_timeout>

000b46bc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b46bc:	6840      	ldr	r0, [r0, #4]
   b46be:	2200      	movs	r2, #0
   b46c0:	f081 0101 	eor.w	r1, r1, #1
   b46c4:	f7ff bf48 	b.w	b4558 <network_listen>

000b46c8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b46c8:	2300      	movs	r3, #0
   b46ca:	6840      	ldr	r0, [r0, #4]
   b46cc:	461a      	mov	r2, r3
   b46ce:	4619      	mov	r1, r3
   b46d0:	f7ff bf3a 	b.w	b4548 <network_off>

000b46d4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b46d4:	2300      	movs	r3, #0
   b46d6:	6840      	ldr	r0, [r0, #4]
   b46d8:	461a      	mov	r2, r3
   b46da:	4619      	mov	r1, r3
   b46dc:	f7ff bf2c 	b.w	b4538 <network_on>

000b46e0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b46e0:	2200      	movs	r2, #0
   b46e2:	6840      	ldr	r0, [r0, #4]
   b46e4:	4611      	mov	r1, r2
   b46e6:	f7ff bf1f 	b.w	b4528 <network_ready>

000b46ea <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b46ea:	2200      	movs	r2, #0
   b46ec:	6840      	ldr	r0, [r0, #4]
   b46ee:	4611      	mov	r1, r2
   b46f0:	f7ff bf0a 	b.w	b4508 <network_connecting>

000b46f4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b46f4:	6840      	ldr	r0, [r0, #4]
   b46f6:	2200      	movs	r2, #0
   b46f8:	2102      	movs	r1, #2
   b46fa:	f7ff bf0d 	b.w	b4518 <network_disconnect>

000b46fe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b46fe:	2300      	movs	r3, #0
   b4700:	6840      	ldr	r0, [r0, #4]
   b4702:	461a      	mov	r2, r3
   b4704:	f7ff bef8 	b.w	b44f8 <network_connect>

000b4708 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b4708:	4b02      	ldr	r3, [pc, #8]	; (b4714 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b470a:	2203      	movs	r2, #3
   b470c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b470e:	4a02      	ldr	r2, [pc, #8]	; (b4718 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4710:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4712:	4770      	bx	lr
   b4714:	2003e6e8 	.word	0x2003e6e8
   b4718:	000b50d8 	.word	0x000b50d8

000b471c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b471c:	4770      	bx	lr

000b471e <_ZN9IPAddressD0Ev>:
   b471e:	b510      	push	{r4, lr}
   b4720:	2118      	movs	r1, #24
   b4722:	4604      	mov	r4, r0
   b4724:	f7ff fcb7 	bl	b4096 <_ZdlPvj>
   b4728:	4620      	mov	r0, r4
   b472a:	bd10      	pop	{r4, pc}

000b472c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b472c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b472e:	7d03      	ldrb	r3, [r0, #20]
   b4730:	2b06      	cmp	r3, #6
{
   b4732:	b08d      	sub	sp, #52	; 0x34
   b4734:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4736:	f100 0704 	add.w	r7, r0, #4
   b473a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b473e:	d012      	beq.n	b4766 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4740:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4744:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4748:	220a      	movs	r2, #10
   b474a:	4630      	mov	r0, r6
   b474c:	f000 f943 	bl	b49d6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4750:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4752:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4754:	d019      	beq.n	b478a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4756:	2c00      	cmp	r4, #0
   b4758:	d0f4      	beq.n	b4744 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b475a:	212e      	movs	r1, #46	; 0x2e
   b475c:	4630      	mov	r0, r6
   b475e:	f000 f937 	bl	b49d0 <_ZN5Print5printEc>
   b4762:	4404      	add	r4, r0
   b4764:	e7ee      	b.n	b4744 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4766:	232f      	movs	r3, #47	; 0x2f
   b4768:	466a      	mov	r2, sp
   b476a:	4639      	mov	r1, r7
   b476c:	200a      	movs	r0, #10
		buf[0] = 0;
   b476e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4772:	f7ff fdcd 	bl	b4310 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4776:	4668      	mov	r0, sp
   b4778:	f000 fc14 	bl	b4fa4 <strlen>
   b477c:	6833      	ldr	r3, [r6, #0]
   b477e:	4602      	mov	r2, r0
   b4780:	68db      	ldr	r3, [r3, #12]
   b4782:	4669      	mov	r1, sp
   b4784:	4630      	mov	r0, r6
   b4786:	4798      	blx	r3
   b4788:	4604      	mov	r4, r0
    }
    return n;
}
   b478a:	4620      	mov	r0, r4
   b478c:	b00d      	add	sp, #52	; 0x34
   b478e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4790 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4790:	b510      	push	{r4, lr}
   b4792:	4b05      	ldr	r3, [pc, #20]	; (b47a8 <_ZN9IPAddressC1Ev+0x18>)
   b4794:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4796:	2211      	movs	r2, #17
   b4798:	f840 3b04 	str.w	r3, [r0], #4
   b479c:	2100      	movs	r1, #0
   b479e:	f000 fbcb 	bl	b4f38 <memset>
}
   b47a2:	4620      	mov	r0, r4
   b47a4:	bd10      	pop	{r4, pc}
   b47a6:	bf00      	nop
   b47a8:	000b5114 	.word	0x000b5114

000b47ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b47ac:	4603      	mov	r3, r0
   b47ae:	4a07      	ldr	r2, [pc, #28]	; (b47cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b47b0:	b510      	push	{r4, lr}
   b47b2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b47b6:	f101 0210 	add.w	r2, r1, #16
   b47ba:	f851 4b04 	ldr.w	r4, [r1], #4
   b47be:	f843 4b04 	str.w	r4, [r3], #4
   b47c2:	4291      	cmp	r1, r2
   b47c4:	d1f9      	bne.n	b47ba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b47c6:	780a      	ldrb	r2, [r1, #0]
   b47c8:	701a      	strb	r2, [r3, #0]
}
   b47ca:	bd10      	pop	{r4, pc}
   b47cc:	000b5114 	.word	0x000b5114

000b47d0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b47d0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b47d2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b47d6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b47da:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b47de:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b47e2:	2304      	movs	r3, #4
   b47e4:	6041      	str	r1, [r0, #4]
   b47e6:	7503      	strb	r3, [r0, #20]
}
   b47e8:	bd10      	pop	{r4, pc}
	...

000b47ec <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b47ec:	b507      	push	{r0, r1, r2, lr}
   b47ee:	4b06      	ldr	r3, [pc, #24]	; (b4808 <_ZN9IPAddressC1EPKh+0x1c>)
   b47f0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b47f2:	78cb      	ldrb	r3, [r1, #3]
   b47f4:	9300      	str	r3, [sp, #0]
   b47f6:	788b      	ldrb	r3, [r1, #2]
   b47f8:	784a      	ldrb	r2, [r1, #1]
   b47fa:	7809      	ldrb	r1, [r1, #0]
   b47fc:	f7ff ffe8 	bl	b47d0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4800:	b003      	add	sp, #12
   b4802:	f85d fb04 	ldr.w	pc, [sp], #4
   b4806:	bf00      	nop
   b4808:	000b5114 	.word	0x000b5114

000b480c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b480c:	4b01      	ldr	r3, [pc, #4]	; (b4814 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b480e:	4a02      	ldr	r2, [pc, #8]	; (b4818 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4810:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4812:	4770      	bx	lr
   b4814:	2003e6f0 	.word	0x2003e6f0
   b4818:	000b5120 	.word	0x000b5120

000b481c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b481c:	2300      	movs	r3, #0
   b481e:	6840      	ldr	r0, [r0, #4]
   b4820:	461a      	mov	r2, r3
   b4822:	f7ff be69 	b.w	b44f8 <network_connect>

000b4826 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4826:	6840      	ldr	r0, [r0, #4]
   b4828:	2200      	movs	r2, #0
   b482a:	2102      	movs	r1, #2
   b482c:	f7ff be74 	b.w	b4518 <network_disconnect>

000b4830 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4830:	2200      	movs	r2, #0
   b4832:	6840      	ldr	r0, [r0, #4]
   b4834:	4611      	mov	r1, r2
   b4836:	f7ff be67 	b.w	b4508 <network_connecting>

000b483a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b483a:	2200      	movs	r2, #0
   b483c:	6840      	ldr	r0, [r0, #4]
   b483e:	4611      	mov	r1, r2
   b4840:	f7ff be72 	b.w	b4528 <network_ready>

000b4844 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4844:	2300      	movs	r3, #0
   b4846:	6840      	ldr	r0, [r0, #4]
   b4848:	461a      	mov	r2, r3
   b484a:	4619      	mov	r1, r3
   b484c:	f7ff be74 	b.w	b4538 <network_on>

000b4850 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4850:	2300      	movs	r3, #0
   b4852:	6840      	ldr	r0, [r0, #4]
   b4854:	461a      	mov	r2, r3
   b4856:	4619      	mov	r1, r3
   b4858:	f7ff be76 	b.w	b4548 <network_off>

000b485c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b485c:	6840      	ldr	r0, [r0, #4]
   b485e:	2100      	movs	r1, #0
   b4860:	f7ff be9a 	b.w	b4598 <network_is_on>

000b4864 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4864:	6840      	ldr	r0, [r0, #4]
   b4866:	2100      	movs	r1, #0
   b4868:	f7ff be9e 	b.w	b45a8 <network_is_off>

000b486c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b486c:	6840      	ldr	r0, [r0, #4]
   b486e:	2200      	movs	r2, #0
   b4870:	f081 0101 	eor.w	r1, r1, #1
   b4874:	f7ff be70 	b.w	b4558 <network_listen>

000b4878 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4878:	6840      	ldr	r0, [r0, #4]
   b487a:	2200      	movs	r2, #0
   b487c:	f7ff be7c 	b.w	b4578 <network_set_listen_timeout>

000b4880 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4880:	2200      	movs	r2, #0
   b4882:	6840      	ldr	r0, [r0, #4]
   b4884:	4611      	mov	r1, r2
   b4886:	f7ff be7f 	b.w	b4588 <network_get_listen_timeout>

000b488a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b488a:	2200      	movs	r2, #0
   b488c:	6840      	ldr	r0, [r0, #4]
   b488e:	4611      	mov	r1, r2
   b4890:	f7ff be6a 	b.w	b4568 <network_listening>

000b4894 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4898:	b095      	sub	sp, #84	; 0x54
   b489a:	4614      	mov	r4, r2
   b489c:	460d      	mov	r5, r1
   b489e:	4607      	mov	r7, r0
    IPAddress addr;
   b48a0:	f7ff ff76 	bl	b4790 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b48a4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b48a6:	221c      	movs	r2, #28
   b48a8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b48aa:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b48ac:	f000 fb44 	bl	b4f38 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b48b0:	2340      	movs	r3, #64	; 0x40
   b48b2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b48b4:	4620      	mov	r0, r4
   b48b6:	466b      	mov	r3, sp
   b48b8:	aa0c      	add	r2, sp, #48	; 0x30
   b48ba:	2100      	movs	r1, #0
   b48bc:	f7ff fd38 	bl	b4330 <netdb_getaddrinfo>
    if (!r) {
   b48c0:	4604      	mov	r4, r0
   b48c2:	2800      	cmp	r0, #0
   b48c4:	d14b      	bne.n	b495e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b48c6:	4602      	mov	r2, r0
   b48c8:	2101      	movs	r1, #1
   b48ca:	6868      	ldr	r0, [r5, #4]
   b48cc:	f7ff fe2c 	bl	b4528 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b48d0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b48d2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b48d4:	4622      	mov	r2, r4
   b48d6:	6868      	ldr	r0, [r5, #4]
   b48d8:	f7ff fe26 	bl	b4528 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b48dc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b48de:	4681      	mov	r9, r0
        bool ok = false;
   b48e0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b48e2:	2e00      	cmp	r6, #0
   b48e4:	d03b      	beq.n	b495e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b48e6:	2900      	cmp	r1, #0
   b48e8:	d139      	bne.n	b495e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b48ea:	6873      	ldr	r3, [r6, #4]
   b48ec:	2b02      	cmp	r3, #2
   b48ee:	d003      	beq.n	b48f8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b48f0:	2b0a      	cmp	r3, #10
   b48f2:	d011      	beq.n	b4918 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b48f4:	69f6      	ldr	r6, [r6, #28]
   b48f6:	e7f4      	b.n	b48e2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b48f8:	f1b8 0f00 	cmp.w	r8, #0
   b48fc:	d0fa      	beq.n	b48f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b48fe:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4900:	a806      	add	r0, sp, #24
   b4902:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4904:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4906:	f7ff ff71 	bl	b47ec <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b490a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b490c:	1d3c      	adds	r4, r7, #4
   b490e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4910:	682b      	ldr	r3, [r5, #0]
   b4912:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4914:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4916:	e7ed      	b.n	b48f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4918:	f1b9 0f00 	cmp.w	r9, #0
   b491c:	d0ea      	beq.n	b48f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b491e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4920:	2210      	movs	r2, #16
   b4922:	a801      	add	r0, sp, #4
   b4924:	f000 fb08 	bl	b4f38 <memset>
                    a.v = 6;
   b4928:	2306      	movs	r3, #6
   b492a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b492e:	ad01      	add	r5, sp, #4
   b4930:	f104 0308 	add.w	r3, r4, #8
   b4934:	3418      	adds	r4, #24
   b4936:	6818      	ldr	r0, [r3, #0]
   b4938:	6859      	ldr	r1, [r3, #4]
   b493a:	462a      	mov	r2, r5
   b493c:	c203      	stmia	r2!, {r0, r1}
   b493e:	3308      	adds	r3, #8
   b4940:	42a3      	cmp	r3, r4
   b4942:	4615      	mov	r5, r2
   b4944:	d1f7      	bne.n	b4936 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4946:	a901      	add	r1, sp, #4
   b4948:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b494a:	ad07      	add	r5, sp, #28
   b494c:	f7ff ff2e 	bl	b47ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4952:	1d3c      	adds	r4, r7, #4
   b4954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4956:	682b      	ldr	r3, [r5, #0]
   b4958:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b495a:	4649      	mov	r1, r9
   b495c:	e7ca      	b.n	b48f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b495e:	9800      	ldr	r0, [sp, #0]
   b4960:	f7ff fcde 	bl	b4320 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4964:	4638      	mov	r0, r7
   b4966:	b015      	add	sp, #84	; 0x54
   b4968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b496c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b496c:	4b02      	ldr	r3, [pc, #8]	; (b4978 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b496e:	4a03      	ldr	r2, [pc, #12]	; (b497c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4970:	601a      	str	r2, [r3, #0]
   b4972:	2200      	movs	r2, #0
   b4974:	605a      	str	r2, [r3, #4]

} // spark
   b4976:	4770      	bx	lr
   b4978:	2003e6f4 	.word	0x2003e6f4
   b497c:	000b512c 	.word	0x000b512c

000b4980 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4982:	4606      	mov	r6, r0
   b4984:	460d      	mov	r5, r1
  size_t n = 0;
   b4986:	188f      	adds	r7, r1, r2
   b4988:	2400      	movs	r4, #0
  while (size--) {
   b498a:	42bd      	cmp	r5, r7
   b498c:	d00c      	beq.n	b49a8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b498e:	6833      	ldr	r3, [r6, #0]
   b4990:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4994:	689b      	ldr	r3, [r3, #8]
   b4996:	4630      	mov	r0, r6
   b4998:	4798      	blx	r3
     if (chunk>=0)
   b499a:	1e03      	subs	r3, r0, #0
   b499c:	db01      	blt.n	b49a2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b499e:	441c      	add	r4, r3
  while (size--) {
   b49a0:	e7f3      	b.n	b498a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b49a2:	2c00      	cmp	r4, #0
   b49a4:	bf08      	it	eq
   b49a6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b49a8:	4620      	mov	r0, r4
   b49aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b49ac <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b49ac:	b513      	push	{r0, r1, r4, lr}
   b49ae:	4604      	mov	r4, r0
    }
   b49b0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b49b2:	b159      	cbz	r1, b49cc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b49b4:	9101      	str	r1, [sp, #4]
   b49b6:	f000 faf5 	bl	b4fa4 <strlen>
   b49ba:	6823      	ldr	r3, [r4, #0]
   b49bc:	9901      	ldr	r1, [sp, #4]
   b49be:	68db      	ldr	r3, [r3, #12]
   b49c0:	4602      	mov	r2, r0
   b49c2:	4620      	mov	r0, r4
    }
   b49c4:	b002      	add	sp, #8
   b49c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b49ca:	4718      	bx	r3
    }
   b49cc:	b002      	add	sp, #8
   b49ce:	bd10      	pop	{r4, pc}

000b49d0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b49d0:	6803      	ldr	r3, [r0, #0]
   b49d2:	689b      	ldr	r3, [r3, #8]
   b49d4:	4718      	bx	r3

000b49d6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b49d6:	b530      	push	{r4, r5, lr}
   b49d8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b49da:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b49dc:	2a01      	cmp	r2, #1
  *str = '\0';
   b49de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b49e2:	bf98      	it	ls
   b49e4:	220a      	movls	r2, #10
   b49e6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b49e8:	460d      	mov	r5, r1
   b49ea:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b49ee:	fb01 5312 	mls	r3, r1, r2, r5
   b49f2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b49f6:	2b09      	cmp	r3, #9
   b49f8:	bf94      	ite	ls
   b49fa:	3330      	addls	r3, #48	; 0x30
   b49fc:	3337      	addhi	r3, #55	; 0x37
   b49fe:	b2db      	uxtb	r3, r3
  } while(n);
   b4a00:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4a02:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4a06:	d9ef      	bls.n	b49e8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4a08:	4621      	mov	r1, r4
   b4a0a:	f7ff ffcf 	bl	b49ac <_ZN5Print5writeEPKc>
}
   b4a0e:	b00b      	add	sp, #44	; 0x2c
   b4a10:	bd30      	pop	{r4, r5, pc}
	...

000b4a14 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4a14:	4b01      	ldr	r3, [pc, #4]	; (b4a1c <_GLOBAL__sub_I_RGB+0x8>)
   b4a16:	2200      	movs	r2, #0
   b4a18:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4a1a:	4770      	bx	lr
   b4a1c:	2003e6fc 	.word	0x2003e6fc

000b4a20 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b4a20:	2100      	movs	r1, #0
   b4a22:	f7ff bcd5 	b.w	b43d0 <hal_spi_release>

000b4a26 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b4a26:	2100      	movs	r1, #0
   b4a28:	f7ff bcca 	b.w	b43c0 <hal_spi_acquire>

000b4a2c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4a2c:	b510      	push	{r4, lr}
   b4a2e:	4604      	mov	r4, r0
   b4a30:	4608      	mov	r0, r1
{
    _spi = spi;
   b4a32:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4a34:	f7ff fcb4 	bl	b43a0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4a38:	2300      	movs	r3, #0
   b4a3a:	6063      	str	r3, [r4, #4]
}
   b4a3c:	4620      	mov	r0, r4
   b4a3e:	bd10      	pop	{r4, pc}

000b4a40 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b4a40:	b513      	push	{r0, r1, r4, lr}
   b4a42:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b4a44:	7800      	ldrb	r0, [r0, #0]
   b4a46:	f7ff ffee 	bl	b4a26 <_ZN8SPIClass4lockEv.isra.0>
   b4a4a:	b958      	cbnz	r0, b4a64 <_ZN8SPIClass5beginEv+0x24>
   b4a4c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b4a4e:	9001      	str	r0, [sp, #4]
   b4a50:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b4a54:	f7ff fc74 	bl	b4340 <hal_spi_begin>
        unlock();
   b4a58:	9801      	ldr	r0, [sp, #4]
    }
}
   b4a5a:	b002      	add	sp, #8
   b4a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4a60:	f7ff bfde 	b.w	b4a20 <_ZN8SPIClass6unlockEv.isra.0>
   b4a64:	b002      	add	sp, #8
   b4a66:	bd10      	pop	{r4, pc}

000b4a68 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   b4a68:	b513      	push	{r0, r1, r4, lr}
   b4a6a:	4604      	mov	r4, r0
    if (!lock())
   b4a6c:	7800      	ldrb	r0, [r0, #0]
   b4a6e:	f7ff ffda 	bl	b4a26 <_ZN8SPIClass4lockEv.isra.0>
   b4a72:	b948      	cbnz	r0, b4a88 <_ZN8SPIClass3endEv+0x20>
   b4a74:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   b4a76:	9001      	str	r0, [sp, #4]
   b4a78:	f7ff fc6a 	bl	b4350 <hal_spi_end>
        unlock();
   b4a7c:	9801      	ldr	r0, [sp, #4]
    }
}
   b4a7e:	b002      	add	sp, #8
   b4a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4a84:	f7ff bfcc 	b.w	b4a20 <_ZN8SPIClass6unlockEv.isra.0>
   b4a88:	b002      	add	sp, #8
   b4a8a:	bd10      	pop	{r4, pc}

000b4a8c <_ZN8SPIClass11setBitOrderEh>:

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b4a8c:	b513      	push	{r0, r1, r4, lr}
   b4a8e:	4604      	mov	r4, r0
    if (!lock())
   b4a90:	7800      	ldrb	r0, [r0, #0]
{
   b4a92:	9101      	str	r1, [sp, #4]
    if (!lock())
   b4a94:	f7ff ffc7 	bl	b4a26 <_ZN8SPIClass4lockEv.isra.0>
   b4a98:	9901      	ldr	r1, [sp, #4]
   b4a9a:	b948      	cbnz	r0, b4ab0 <_ZN8SPIClass11setBitOrderEh+0x24>
   b4a9c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b4a9e:	9001      	str	r0, [sp, #4]
   b4aa0:	f7ff fc5e 	bl	b4360 <hal_spi_set_bit_order>
        unlock();
   b4aa4:	9801      	ldr	r0, [sp, #4]
    }
}
   b4aa6:	b002      	add	sp, #8
   b4aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4aac:	f7ff bfb8 	b.w	b4a20 <_ZN8SPIClass6unlockEv.isra.0>
   b4ab0:	b002      	add	sp, #8
   b4ab2:	bd10      	pop	{r4, pc}

000b4ab4 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b4ab4:	b513      	push	{r0, r1, r4, lr}
   b4ab6:	4604      	mov	r4, r0
    if (!lock())
   b4ab8:	7800      	ldrb	r0, [r0, #0]
{
   b4aba:	9101      	str	r1, [sp, #4]
    if (!lock())
   b4abc:	f7ff ffb3 	bl	b4a26 <_ZN8SPIClass4lockEv.isra.0>
   b4ac0:	9901      	ldr	r1, [sp, #4]
   b4ac2:	b948      	cbnz	r0, b4ad8 <_ZN8SPIClass11setDataModeEh+0x24>
   b4ac4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b4ac6:	9001      	str	r0, [sp, #4]
   b4ac8:	f7ff fc52 	bl	b4370 <hal_spi_set_data_mode>
        unlock();
   b4acc:	9801      	ldr	r0, [sp, #4]
    }
}
   b4ace:	b002      	add	sp, #8
   b4ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4ad4:	f7ff bfa4 	b.w	b4a20 <_ZN8SPIClass6unlockEv.isra.0>
   b4ad8:	b002      	add	sp, #8
   b4ada:	bd10      	pop	{r4, pc}

000b4adc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b4adc:	0840      	lsrs	r0, r0, #1
{
   b4ade:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b4ae0:	6018      	str	r0, [r3, #0]
   b4ae2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b4ae4:	6818      	ldr	r0, [r3, #0]
   b4ae6:	4288      	cmp	r0, r1
   b4ae8:	b2e5      	uxtb	r5, r4
   b4aea:	d906      	bls.n	b4afa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b4aec:	3401      	adds	r4, #1
   b4aee:	2c08      	cmp	r4, #8
   b4af0:	d002      	beq.n	b4af8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b4af2:	0840      	lsrs	r0, r0, #1
   b4af4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b4af6:	e7f5      	b.n	b4ae4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b4af8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b4afa:	4b02      	ldr	r3, [pc, #8]	; (b4b04 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b4afc:	5d5b      	ldrb	r3, [r3, r5]
   b4afe:	7013      	strb	r3, [r2, #0]
}
   b4b00:	bd30      	pop	{r4, r5, pc}
   b4b02:	bf00      	nop
   b4b04:	000b5160 	.word	0x000b5160

000b4b08 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b4b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4b0c:	b088      	sub	sp, #32
    unsigned clock = 0;
   b4b0e:	2300      	movs	r3, #0
{
   b4b10:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b4b12:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b4b14:	9302      	str	r3, [sp, #8]
{
   b4b16:	460e      	mov	r6, r1
   b4b18:	4617      	mov	r7, r2
    if (!lock())
   b4b1a:	f7ff ff84 	bl	b4a26 <_ZN8SPIClass4lockEv.isra.0>
   b4b1e:	4605      	mov	r5, r0
   b4b20:	bb00      	cbnz	r0, b4b64 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b4b22:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b4b26:	4601      	mov	r1, r0
   b4b28:	2214      	movs	r2, #20
   b4b2a:	a803      	add	r0, sp, #12
   b4b2c:	f000 fa04 	bl	b4f38 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b4b30:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b4b32:	462a      	mov	r2, r5
   b4b34:	a903      	add	r1, sp, #12
   b4b36:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b4b38:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b4b3c:	f7ff fc38 	bl	b43b0 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b4b40:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b4b42:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b4b46:	ab02      	add	r3, sp, #8
   b4b48:	f10d 0207 	add.w	r2, sp, #7
   b4b4c:	fb07 f106 	mul.w	r1, r7, r6
   b4b50:	f7ff ffc4 	bl	b4adc <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b4b54:	7820      	ldrb	r0, [r4, #0]
   b4b56:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b4b5a:	f7ff fc11 	bl	b4380 <hal_spi_set_clock_divider>
        unlock();
   b4b5e:	7820      	ldrb	r0, [r4, #0]
   b4b60:	f7ff ff5e 	bl	b4a20 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b4b64:	9802      	ldr	r0, [sp, #8]
   b4b66:	b008      	add	sp, #32
   b4b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4b6c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b4b6c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b4b6e:	7800      	ldrb	r0, [r0, #0]
   b4b70:	f7ff fc0e 	bl	b4390 <hal_spi_transfer>
}
   b4b74:	b2c0      	uxtb	r0, r0
   b4b76:	bd08      	pop	{r3, pc}

000b4b78 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4b78:	4b05      	ldr	r3, [pc, #20]	; (b4b90 <_GLOBAL__sub_I_System+0x18>)
   b4b7a:	2202      	movs	r2, #2
   b4b7c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4b7e:	4b05      	ldr	r3, [pc, #20]	; (b4b94 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4b80:	4a05      	ldr	r2, [pc, #20]	; (b4b98 <_GLOBAL__sub_I_System+0x20>)
   b4b82:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4b84:	2000      	movs	r0, #0
   b4b86:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4b8a:	f7ff bc91 	b.w	b44b0 <set_system_mode>
   b4b8e:	bf00      	nop
   b4b90:	2003e718 	.word	0x2003e718
   b4b94:	2003e70c 	.word	0x2003e70c
   b4b98:	ffff0000 	.word	0xffff0000

000b4b9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4b9c:	4b02      	ldr	r3, [pc, #8]	; (b4ba8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4b9e:	681a      	ldr	r2, [r3, #0]
   b4ba0:	4b02      	ldr	r3, [pc, #8]	; (b4bac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4ba2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4ba4:	4770      	bx	lr
   b4ba6:	bf00      	nop
   b4ba8:	2003e624 	.word	0x2003e624
   b4bac:	2003e71c 	.word	0x2003e71c

000b4bb0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4bb0:	4770      	bx	lr

000b4bb2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4bb2:	7441      	strb	r1, [r0, #17]
}
   b4bb4:	4770      	bx	lr

000b4bb6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4bb6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4bb8:	7c00      	ldrb	r0, [r0, #16]
   b4bba:	f7ff fc39 	bl	b4430 <hal_usart_available_data_for_write>
}
   b4bbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4bc2:	bd08      	pop	{r3, pc}

000b4bc4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4bc4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4bc6:	7c00      	ldrb	r0, [r0, #16]
   b4bc8:	f7ff fc12 	bl	b43f0 <hal_usart_available>
}
   b4bcc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4bd0:	bd08      	pop	{r3, pc}

000b4bd2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4bd2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4bd4:	7c00      	ldrb	r0, [r0, #16]
   b4bd6:	f7ff fc1b 	bl	b4410 <hal_usart_peek>
}
   b4bda:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4bde:	bd08      	pop	{r3, pc}

000b4be0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4be0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4be2:	7c00      	ldrb	r0, [r0, #16]
   b4be4:	f7ff fc0c 	bl	b4400 <hal_usart_read>
}
   b4be8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4bec:	bd08      	pop	{r3, pc}

000b4bee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4bee:	7c00      	ldrb	r0, [r0, #16]
   b4bf0:	f7ff bc16 	b.w	b4420 <hal_usart_flush>

000b4bf4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4bf6:	7c45      	ldrb	r5, [r0, #17]
{
   b4bf8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4bfa:	b12d      	cbz	r5, b4c08 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4bfc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4bfe:	b003      	add	sp, #12
   b4c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4c04:	f7ff bbec 	b.w	b43e0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c08:	7c00      	ldrb	r0, [r0, #16]
   b4c0a:	9101      	str	r1, [sp, #4]
   b4c0c:	f7ff fc10 	bl	b4430 <hal_usart_available_data_for_write>
   b4c10:	2800      	cmp	r0, #0
   b4c12:	9901      	ldr	r1, [sp, #4]
   b4c14:	dcf2      	bgt.n	b4bfc <_ZN11USARTSerial5writeEh+0x8>
}
   b4c16:	4628      	mov	r0, r5
   b4c18:	b003      	add	sp, #12
   b4c1a:	bd30      	pop	{r4, r5, pc}

000b4c1c <_ZN11USARTSerialD0Ev>:
   b4c1c:	b510      	push	{r4, lr}
   b4c1e:	2114      	movs	r1, #20
   b4c20:	4604      	mov	r4, r0
   b4c22:	f7ff fa38 	bl	b4096 <_ZdlPvj>
   b4c26:	4620      	mov	r0, r4
   b4c28:	bd10      	pop	{r4, pc}
	...

000b4c2c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4c2c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4c32:	4604      	mov	r4, r0
   b4c34:	4608      	mov	r0, r1
   b4c36:	4611      	mov	r1, r2
   b4c38:	2200      	movs	r2, #0
   b4c3a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4c3e:	4b04      	ldr	r3, [pc, #16]	; (b4c50 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4c40:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4c42:	2301      	movs	r3, #1
  _serial = serial;
   b4c44:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4c46:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4c48:	f7ff fbfa 	bl	b4440 <hal_usart_init_ex>
}
   b4c4c:	4620      	mov	r0, r4
   b4c4e:	bd10      	pop	{r4, pc}
   b4c50:	000b518c 	.word	0x000b518c

000b4c54 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4c54:	7441      	strb	r1, [r0, #17]
}
   b4c56:	4770      	bx	lr

000b4c58 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4c58:	4770      	bx	lr

000b4c5a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4c5a:	4770      	bx	lr

000b4c5c <_ZN9USBSerial4readEv>:
{
   b4c5c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4c5e:	2100      	movs	r1, #0
   b4c60:	7c00      	ldrb	r0, [r0, #16]
   b4c62:	f7ff fc0d 	bl	b4480 <HAL_USB_USART_Receive_Data>
}
   b4c66:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c6a:	bd08      	pop	{r3, pc}

000b4c6c <_ZN9USBSerial4peekEv>:
{
   b4c6c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4c6e:	2101      	movs	r1, #1
   b4c70:	7c00      	ldrb	r0, [r0, #16]
   b4c72:	f7ff fc05 	bl	b4480 <HAL_USB_USART_Receive_Data>
}
   b4c76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c7a:	bd08      	pop	{r3, pc}

000b4c7c <_ZN9USBSerial17availableForWriteEv>:
{
   b4c7c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4c7e:	7c00      	ldrb	r0, [r0, #16]
   b4c80:	f7ff fbf6 	bl	b4470 <HAL_USB_USART_Available_Data_For_Write>
}
   b4c84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4c88:	bd08      	pop	{r3, pc}

000b4c8a <_ZN9USBSerial9availableEv>:
{
   b4c8a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4c8c:	7c00      	ldrb	r0, [r0, #16]
   b4c8e:	f7ff fbe7 	bl	b4460 <HAL_USB_USART_Available_Data>
}
   b4c92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4c96:	bd08      	pop	{r3, pc}

000b4c98 <_ZN9USBSerial5writeEh>:
{
   b4c98:	b513      	push	{r0, r1, r4, lr}
   b4c9a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4c9c:	7c00      	ldrb	r0, [r0, #16]
{
   b4c9e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4ca0:	f7ff fbe6 	bl	b4470 <HAL_USB_USART_Available_Data_For_Write>
   b4ca4:	2800      	cmp	r0, #0
   b4ca6:	9901      	ldr	r1, [sp, #4]
   b4ca8:	dc01      	bgt.n	b4cae <_ZN9USBSerial5writeEh+0x16>
   b4caa:	7c60      	ldrb	r0, [r4, #17]
   b4cac:	b120      	cbz	r0, b4cb8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4cae:	7c20      	ldrb	r0, [r4, #16]
   b4cb0:	f7ff fbee 	bl	b4490 <HAL_USB_USART_Send_Data>
   b4cb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4cb8:	b002      	add	sp, #8
   b4cba:	bd10      	pop	{r4, pc}

000b4cbc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4cbc:	7c00      	ldrb	r0, [r0, #16]
   b4cbe:	f7ff bbef 	b.w	b44a0 <HAL_USB_USART_Flush_Data>

000b4cc2 <_ZN9USBSerialD0Ev>:
   b4cc2:	b510      	push	{r4, lr}
   b4cc4:	2114      	movs	r1, #20
   b4cc6:	4604      	mov	r4, r0
   b4cc8:	f7ff f9e5 	bl	b4096 <_ZdlPvj>
   b4ccc:	4620      	mov	r0, r4
   b4cce:	bd10      	pop	{r4, pc}

000b4cd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4cd0:	b510      	push	{r4, lr}
   b4cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4cd6:	4604      	mov	r4, r0
   b4cd8:	4608      	mov	r0, r1
   b4cda:	2100      	movs	r1, #0
   b4cdc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4ce0:	4b04      	ldr	r3, [pc, #16]	; (b4cf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4ce2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4ce4:	2301      	movs	r3, #1
  _serial = serial;
   b4ce6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4ce8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4cea:	4611      	mov	r1, r2
   b4cec:	f7ff fbb0 	bl	b4450 <HAL_USB_USART_Init>
}
   b4cf0:	4620      	mov	r0, r4
   b4cf2:	bd10      	pop	{r4, pc}
   b4cf4:	000b51bc 	.word	0x000b51bc

000b4cf8 <_Z19acquireSerialBufferv>:
{
   b4cf8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4cfa:	2214      	movs	r2, #20
{
   b4cfc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4cfe:	2100      	movs	r1, #0
   b4d00:	f000 f91a 	bl	b4f38 <memset>
}
   b4d04:	4620      	mov	r0, r4
   b4d06:	bd10      	pop	{r4, pc}

000b4d08 <_Z16_fetch_usbserialv>:
{
   b4d08:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4d0a:	4c0f      	ldr	r4, [pc, #60]	; (b4d48 <_Z16_fetch_usbserialv+0x40>)
{
   b4d0c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4d0e:	a803      	add	r0, sp, #12
   b4d10:	f7ff fff2 	bl	b4cf8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4d14:	7821      	ldrb	r1, [r4, #0]
   b4d16:	f3bf 8f5b 	dmb	ish
   b4d1a:	f011 0101 	ands.w	r1, r1, #1
   b4d1e:	d10f      	bne.n	b4d40 <_Z16_fetch_usbserialv+0x38>
   b4d20:	4620      	mov	r0, r4
   b4d22:	9101      	str	r1, [sp, #4]
   b4d24:	f7ff f9b9 	bl	b409a <__cxa_guard_acquire>
   b4d28:	9901      	ldr	r1, [sp, #4]
   b4d2a:	b148      	cbz	r0, b4d40 <_Z16_fetch_usbserialv+0x38>
   b4d2c:	aa03      	add	r2, sp, #12
   b4d2e:	4807      	ldr	r0, [pc, #28]	; (b4d4c <_Z16_fetch_usbserialv+0x44>)
   b4d30:	f7ff ffce 	bl	b4cd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4d34:	4620      	mov	r0, r4
   b4d36:	f7ff f9b5 	bl	b40a4 <__cxa_guard_release>
   b4d3a:	4805      	ldr	r0, [pc, #20]	; (b4d50 <_Z16_fetch_usbserialv+0x48>)
   b4d3c:	f000 f8e8 	bl	b4f10 <atexit>
	return _usbserial;
}
   b4d40:	4802      	ldr	r0, [pc, #8]	; (b4d4c <_Z16_fetch_usbserialv+0x44>)
   b4d42:	b008      	add	sp, #32
   b4d44:	bd10      	pop	{r4, pc}
   b4d46:	bf00      	nop
   b4d48:	2003e720 	.word	0x2003e720
   b4d4c:	2003e724 	.word	0x2003e724
   b4d50:	000b4c59 	.word	0x000b4c59

000b4d54 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4d54:	4b01      	ldr	r3, [pc, #4]	; (b4d5c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4d56:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4d58:	4770      	bx	lr
   b4d5a:	bf00      	nop
   b4d5c:	2003e628 	.word	0x2003e628

000b4d60 <serialEventRun>:
{
   b4d60:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4d62:	4b0b      	ldr	r3, [pc, #44]	; (b4d90 <serialEventRun+0x30>)
   b4d64:	b143      	cbz	r3, b4d78 <serialEventRun+0x18>
   b4d66:	f7ff ffcf 	bl	b4d08 <_Z16_fetch_usbserialv>
   b4d6a:	6803      	ldr	r3, [r0, #0]
   b4d6c:	691b      	ldr	r3, [r3, #16]
   b4d6e:	4798      	blx	r3
   b4d70:	2800      	cmp	r0, #0
   b4d72:	dd01      	ble.n	b4d78 <serialEventRun+0x18>
        serialEvent();
   b4d74:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4d78:	4b06      	ldr	r3, [pc, #24]	; (b4d94 <serialEventRun+0x34>)
   b4d7a:	b143      	cbz	r3, b4d8e <serialEventRun+0x2e>
   b4d7c:	f000 f8a2 	bl	b4ec4 <_Z22__fetch_global_Serial1v>
   b4d80:	6803      	ldr	r3, [r0, #0]
   b4d82:	691b      	ldr	r3, [r3, #16]
   b4d84:	4798      	blx	r3
   b4d86:	2800      	cmp	r0, #0
   b4d88:	dd01      	ble.n	b4d8e <serialEventRun+0x2e>
        serialEvent1();
   b4d8a:	f3af 8000 	nop.w
}
   b4d8e:	bd08      	pop	{r3, pc}
	...

000b4d98 <_post_loop>:
{
   b4d98:	b508      	push	{r3, lr}
	serialEventRun();
   b4d9a:	f7ff ffe1 	bl	b4d60 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4d9e:	f7ff faaf 	bl	b4300 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4da2:	4b01      	ldr	r3, [pc, #4]	; (b4da8 <_post_loop+0x10>)
   b4da4:	6018      	str	r0, [r3, #0]
}
   b4da6:	bd08      	pop	{r3, pc}
   b4da8:	2003e740 	.word	0x2003e740

000b4dac <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4dac:	4805      	ldr	r0, [pc, #20]	; (b4dc4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4dae:	4a06      	ldr	r2, [pc, #24]	; (b4dc8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4db0:	4906      	ldr	r1, [pc, #24]	; (b4dcc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4db2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4db4:	1a12      	subs	r2, r2, r0
   b4db6:	f000 f8b1 	bl	b4f1c <memcpy>
    __backup_sram_signature = signature;
   b4dba:	4b05      	ldr	r3, [pc, #20]	; (b4dd0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4dbc:	4a05      	ldr	r2, [pc, #20]	; (b4dd4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4dbe:	601a      	str	r2, [r3, #0]
}
   b4dc0:	bd08      	pop	{r3, pc}
   b4dc2:	bf00      	nop
   b4dc4:	2003f400 	.word	0x2003f400
   b4dc8:	2003f404 	.word	0x2003f404
   b4dcc:	000b52a4 	.word	0x000b52a4
   b4dd0:	2003f400 	.word	0x2003f400
   b4dd4:	9a271c1e 	.word	0x9a271c1e

000b4dd8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4dd8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4dda:	2300      	movs	r3, #0
   b4ddc:	9300      	str	r3, [sp, #0]
   b4dde:	461a      	mov	r2, r3
   b4de0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4de4:	f7ff fb76 	bl	b44d4 <system_ctrl_set_result>
}
   b4de8:	b003      	add	sp, #12
   b4dea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4df0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4df0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4df2:	8843      	ldrh	r3, [r0, #2]
   b4df4:	2b0a      	cmp	r3, #10
   b4df6:	d008      	beq.n	b4e0a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4df8:	2b50      	cmp	r3, #80	; 0x50
   b4dfa:	d10b      	bne.n	b4e14 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4dfc:	4b09      	ldr	r3, [pc, #36]	; (b4e24 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4dfe:	681b      	ldr	r3, [r3, #0]
   b4e00:	b14b      	cbz	r3, b4e16 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4e02:	b003      	add	sp, #12
   b4e04:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4e08:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4e0a:	f7ff ffe5 	bl	b4dd8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4e0e:	b003      	add	sp, #12
   b4e10:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4e14:	2300      	movs	r3, #0
   b4e16:	9300      	str	r3, [sp, #0]
   b4e18:	461a      	mov	r2, r3
   b4e1a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4e1e:	f7ff fb59 	bl	b44d4 <system_ctrl_set_result>
}
   b4e22:	e7f4      	b.n	b4e0e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4e24:	2003e73c 	.word	0x2003e73c

000b4e28 <module_user_init_hook>:
{
   b4e28:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4e2a:	4812      	ldr	r0, [pc, #72]	; (b4e74 <module_user_init_hook+0x4c>)
   b4e2c:	2100      	movs	r1, #0
   b4e2e:	f7ff fbdb 	bl	b45e8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4e32:	4b11      	ldr	r3, [pc, #68]	; (b4e78 <module_user_init_hook+0x50>)
   b4e34:	681a      	ldr	r2, [r3, #0]
   b4e36:	4b11      	ldr	r3, [pc, #68]	; (b4e7c <module_user_init_hook+0x54>)
   b4e38:	429a      	cmp	r2, r3
   b4e3a:	4b11      	ldr	r3, [pc, #68]	; (b4e80 <module_user_init_hook+0x58>)
   b4e3c:	bf0c      	ite	eq
   b4e3e:	2201      	moveq	r2, #1
   b4e40:	2200      	movne	r2, #0
   b4e42:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4e44:	d001      	beq.n	b4e4a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4e46:	f7ff ffb1 	bl	b4dac <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4e4a:	f7ff fa51 	bl	b42f0 <HAL_RNG_GetRandomNumber>
   b4e4e:	4604      	mov	r4, r0
    srand(seed);
   b4e50:	f000 f87a 	bl	b4f48 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4e54:	4b0b      	ldr	r3, [pc, #44]	; (b4e84 <module_user_init_hook+0x5c>)
   b4e56:	b113      	cbz	r3, b4e5e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4e58:	4620      	mov	r0, r4
   b4e5a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4e5e:	2100      	movs	r1, #0
   b4e60:	4808      	ldr	r0, [pc, #32]	; (b4e84 <module_user_init_hook+0x5c>)
   b4e62:	f7ff fb41 	bl	b44e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4e6a:	4807      	ldr	r0, [pc, #28]	; (b4e88 <module_user_init_hook+0x60>)
   b4e6c:	2100      	movs	r1, #0
   b4e6e:	f7ff bb27 	b.w	b44c0 <system_ctrl_set_app_request_handler>
   b4e72:	bf00      	nop
   b4e74:	000b4d55 	.word	0x000b4d55
   b4e78:	2003f400 	.word	0x2003f400
   b4e7c:	9a271c1e 	.word	0x9a271c1e
   b4e80:	2003e738 	.word	0x2003e738
   b4e84:	00000000 	.word	0x00000000
   b4e88:	000b4df1 	.word	0x000b4df1

000b4e8c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4e8c:	4770      	bx	lr
	...

000b4e90 <_Z20acquireSerial1Bufferv>:
{
   b4e90:	b538      	push	{r3, r4, r5, lr}
   b4e92:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b4e94:	2514      	movs	r5, #20
   b4e96:	462a      	mov	r2, r5
   b4e98:	2100      	movs	r1, #0
   b4e9a:	f000 f84d 	bl	b4f38 <memset>
   b4e9e:	8025      	strh	r5, [r4, #0]
   b4ea0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4ea2:	4907      	ldr	r1, [pc, #28]	; (b4ec0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b4ea4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4ea6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b4ea8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4eaa:	f000 f82f 	bl	b4f0c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4eae:	4904      	ldr	r1, [pc, #16]	; (b4ec0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b4eb0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4eb2:	4628      	mov	r0, r5
   b4eb4:	f000 f82a 	bl	b4f0c <_ZnajRKSt9nothrow_t>
    };
   b4eb8:	60e0      	str	r0, [r4, #12]
}
   b4eba:	4620      	mov	r0, r4
   b4ebc:	bd38      	pop	{r3, r4, r5, pc}
   b4ebe:	bf00      	nop
   b4ec0:	000b51e4 	.word	0x000b51e4

000b4ec4 <_Z22__fetch_global_Serial1v>:
{
   b4ec4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4ec6:	4d0e      	ldr	r5, [pc, #56]	; (b4f00 <_Z22__fetch_global_Serial1v+0x3c>)
   b4ec8:	7829      	ldrb	r1, [r5, #0]
   b4eca:	f3bf 8f5b 	dmb	ish
   b4ece:	f011 0401 	ands.w	r4, r1, #1
{
   b4ed2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4ed4:	d111      	bne.n	b4efa <_Z22__fetch_global_Serial1v+0x36>
   b4ed6:	4628      	mov	r0, r5
   b4ed8:	f7ff f8df 	bl	b409a <__cxa_guard_acquire>
   b4edc:	b168      	cbz	r0, b4efa <_Z22__fetch_global_Serial1v+0x36>
   b4ede:	a801      	add	r0, sp, #4
   b4ee0:	f7ff ffd6 	bl	b4e90 <_Z20acquireSerial1Bufferv>
   b4ee4:	aa01      	add	r2, sp, #4
   b4ee6:	4621      	mov	r1, r4
   b4ee8:	4806      	ldr	r0, [pc, #24]	; (b4f04 <_Z22__fetch_global_Serial1v+0x40>)
   b4eea:	f7ff fe9f 	bl	b4c2c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b4eee:	4628      	mov	r0, r5
   b4ef0:	f7ff f8d8 	bl	b40a4 <__cxa_guard_release>
   b4ef4:	4804      	ldr	r0, [pc, #16]	; (b4f08 <_Z22__fetch_global_Serial1v+0x44>)
   b4ef6:	f000 f80b 	bl	b4f10 <atexit>
    return serial1;
}
   b4efa:	4802      	ldr	r0, [pc, #8]	; (b4f04 <_Z22__fetch_global_Serial1v+0x40>)
   b4efc:	b007      	add	sp, #28
   b4efe:	bd30      	pop	{r4, r5, pc}
   b4f00:	2003e744 	.word	0x2003e744
   b4f04:	2003e748 	.word	0x2003e748
   b4f08:	000b4e8d 	.word	0x000b4e8d

000b4f0c <_ZnajRKSt9nothrow_t>:
   b4f0c:	f7ff b8c1 	b.w	b4092 <_Znaj>

000b4f10 <atexit>:
   b4f10:	2300      	movs	r3, #0
   b4f12:	4601      	mov	r1, r0
   b4f14:	461a      	mov	r2, r3
   b4f16:	4618      	mov	r0, r3
   b4f18:	f000 b84c 	b.w	b4fb4 <__register_exitproc>

000b4f1c <memcpy>:
   b4f1c:	440a      	add	r2, r1
   b4f1e:	4291      	cmp	r1, r2
   b4f20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b4f24:	d100      	bne.n	b4f28 <memcpy+0xc>
   b4f26:	4770      	bx	lr
   b4f28:	b510      	push	{r4, lr}
   b4f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b4f2e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b4f32:	4291      	cmp	r1, r2
   b4f34:	d1f9      	bne.n	b4f2a <memcpy+0xe>
   b4f36:	bd10      	pop	{r4, pc}

000b4f38 <memset>:
   b4f38:	4402      	add	r2, r0
   b4f3a:	4603      	mov	r3, r0
   b4f3c:	4293      	cmp	r3, r2
   b4f3e:	d100      	bne.n	b4f42 <memset+0xa>
   b4f40:	4770      	bx	lr
   b4f42:	f803 1b01 	strb.w	r1, [r3], #1
   b4f46:	e7f9      	b.n	b4f3c <memset+0x4>

000b4f48 <srand>:
   b4f48:	b538      	push	{r3, r4, r5, lr}
   b4f4a:	4b10      	ldr	r3, [pc, #64]	; (b4f8c <srand+0x44>)
   b4f4c:	681d      	ldr	r5, [r3, #0]
   b4f4e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b4f50:	4604      	mov	r4, r0
   b4f52:	b9b3      	cbnz	r3, b4f82 <srand+0x3a>
   b4f54:	2018      	movs	r0, #24
   b4f56:	f7ff fb2f 	bl	b45b8 <malloc>
   b4f5a:	4602      	mov	r2, r0
   b4f5c:	63a8      	str	r0, [r5, #56]	; 0x38
   b4f5e:	b920      	cbnz	r0, b4f6a <srand+0x22>
   b4f60:	4b0b      	ldr	r3, [pc, #44]	; (b4f90 <srand+0x48>)
   b4f62:	480c      	ldr	r0, [pc, #48]	; (b4f94 <srand+0x4c>)
   b4f64:	2142      	movs	r1, #66	; 0x42
   b4f66:	f7ff fb37 	bl	b45d8 <__assert_func>
   b4f6a:	490b      	ldr	r1, [pc, #44]	; (b4f98 <srand+0x50>)
   b4f6c:	4b0b      	ldr	r3, [pc, #44]	; (b4f9c <srand+0x54>)
   b4f6e:	e9c0 1300 	strd	r1, r3, [r0]
   b4f72:	4b0b      	ldr	r3, [pc, #44]	; (b4fa0 <srand+0x58>)
   b4f74:	6083      	str	r3, [r0, #8]
   b4f76:	230b      	movs	r3, #11
   b4f78:	8183      	strh	r3, [r0, #12]
   b4f7a:	2100      	movs	r1, #0
   b4f7c:	2001      	movs	r0, #1
   b4f7e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b4f82:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b4f84:	2200      	movs	r2, #0
   b4f86:	611c      	str	r4, [r3, #16]
   b4f88:	615a      	str	r2, [r3, #20]
   b4f8a:	bd38      	pop	{r3, r4, r5, pc}
   b4f8c:	2003e628 	.word	0x2003e628
   b4f90:	000b51e5 	.word	0x000b51e5
   b4f94:	000b51fc 	.word	0x000b51fc
   b4f98:	abcd330e 	.word	0xabcd330e
   b4f9c:	e66d1234 	.word	0xe66d1234
   b4fa0:	0005deec 	.word	0x0005deec

000b4fa4 <strlen>:
   b4fa4:	4603      	mov	r3, r0
   b4fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4faa:	2a00      	cmp	r2, #0
   b4fac:	d1fb      	bne.n	b4fa6 <strlen+0x2>
   b4fae:	1a18      	subs	r0, r3, r0
   b4fb0:	3801      	subs	r0, #1
   b4fb2:	4770      	bx	lr

000b4fb4 <__register_exitproc>:
   b4fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4fb8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5074 <__register_exitproc+0xc0>
   b4fbc:	4606      	mov	r6, r0
   b4fbe:	f8d8 0000 	ldr.w	r0, [r8]
   b4fc2:	461f      	mov	r7, r3
   b4fc4:	460d      	mov	r5, r1
   b4fc6:	4691      	mov	r9, r2
   b4fc8:	f000 f856 	bl	b5078 <__retarget_lock_acquire_recursive>
   b4fcc:	4b25      	ldr	r3, [pc, #148]	; (b5064 <__register_exitproc+0xb0>)
   b4fce:	681c      	ldr	r4, [r3, #0]
   b4fd0:	b934      	cbnz	r4, b4fe0 <__register_exitproc+0x2c>
   b4fd2:	4c25      	ldr	r4, [pc, #148]	; (b5068 <__register_exitproc+0xb4>)
   b4fd4:	601c      	str	r4, [r3, #0]
   b4fd6:	4b25      	ldr	r3, [pc, #148]	; (b506c <__register_exitproc+0xb8>)
   b4fd8:	b113      	cbz	r3, b4fe0 <__register_exitproc+0x2c>
   b4fda:	681b      	ldr	r3, [r3, #0]
   b4fdc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b4fe0:	6863      	ldr	r3, [r4, #4]
   b4fe2:	2b1f      	cmp	r3, #31
   b4fe4:	dd07      	ble.n	b4ff6 <__register_exitproc+0x42>
   b4fe6:	f8d8 0000 	ldr.w	r0, [r8]
   b4fea:	f000 f847 	bl	b507c <__retarget_lock_release_recursive>
   b4fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4ff6:	b34e      	cbz	r6, b504c <__register_exitproc+0x98>
   b4ff8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b4ffc:	b988      	cbnz	r0, b5022 <__register_exitproc+0x6e>
   b4ffe:	4b1c      	ldr	r3, [pc, #112]	; (b5070 <__register_exitproc+0xbc>)
   b5000:	b923      	cbnz	r3, b500c <__register_exitproc+0x58>
   b5002:	f8d8 0000 	ldr.w	r0, [r8]
   b5006:	f000 f838 	bl	b507a <__retarget_lock_release>
   b500a:	e7f0      	b.n	b4fee <__register_exitproc+0x3a>
   b500c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5010:	f7ff fad2 	bl	b45b8 <malloc>
   b5014:	2800      	cmp	r0, #0
   b5016:	d0f4      	beq.n	b5002 <__register_exitproc+0x4e>
   b5018:	2300      	movs	r3, #0
   b501a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b501e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5022:	6863      	ldr	r3, [r4, #4]
   b5024:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5028:	2201      	movs	r2, #1
   b502a:	409a      	lsls	r2, r3
   b502c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5030:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5034:	4313      	orrs	r3, r2
   b5036:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b503a:	2e02      	cmp	r6, #2
   b503c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5040:	bf02      	ittt	eq
   b5042:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5046:	4313      	orreq	r3, r2
   b5048:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b504c:	6863      	ldr	r3, [r4, #4]
   b504e:	f8d8 0000 	ldr.w	r0, [r8]
   b5052:	1c5a      	adds	r2, r3, #1
   b5054:	3302      	adds	r3, #2
   b5056:	6062      	str	r2, [r4, #4]
   b5058:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b505c:	f000 f80e 	bl	b507c <__retarget_lock_release_recursive>
   b5060:	2000      	movs	r0, #0
   b5062:	e7c6      	b.n	b4ff2 <__register_exitproc+0x3e>
   b5064:	2003e7e8 	.word	0x2003e7e8
   b5068:	2003e75c 	.word	0x2003e75c
   b506c:	00000000 	.word	0x00000000
   b5070:	000b45b9 	.word	0x000b45b9
   b5074:	2003e68c 	.word	0x2003e68c

000b5078 <__retarget_lock_acquire_recursive>:
   b5078:	4770      	bx	lr

000b507a <__retarget_lock_release>:
   b507a:	4770      	bx	lr

000b507c <__retarget_lock_release_recursive>:
   b507c:	4770      	bx	lr

000b507e <link_code_end>:
	...

000b5080 <dynalib_user>:
   b5080:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5090:	0000 0000                                   ....

000b5094 <_ZTVN5spark13CellularClassE>:
	...
   b509c:	4667 000b 465d 000b 4653 000b 4609 000b     gF..]F..SF...F..
   b50ac:	4647 000b 463b 000b 485d 000b 4865 000b     GF..;F..]H..eH..
   b50bc:	462f 000b 4627 000b 461d 000b 4613 000b     /F..'F...F...F..
   b50cc:	4895 000b                                   .H..

000b50d0 <_ZTVN5spark13EthernetClassE>:
	...
   b50d8:	46ff 000b 46f5 000b 46eb 000b 46e1 000b     .F...F...F...F..
   b50e8:	46d5 000b 46c9 000b 485d 000b 4865 000b     .F...F..]H..eH..
   b50f8:	46bd 000b 46b5 000b 46ab 000b 46a1 000b     .F...F...F...F..
   b5108:	4895 000b                                   .H..

000b510c <_ZTV9IPAddress>:
	...
   b5114:	472d 000b 471d 000b 471f 000b 7061 0070     -G...G...G..app.

000b5124 <_ZTVN5spark12NetworkClassE>:
	...
   b512c:	481d 000b 4827 000b 4831 000b 483b 000b     .H..'H..1H..;H..
   b513c:	4845 000b 4851 000b 485d 000b 4865 000b     EH..QH..]H..eH..
   b514c:	486d 000b 4879 000b 4881 000b 488b 000b     mH..yH...H...H..
   b515c:	4895 000b                                   .H..

000b5160 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b5160:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b5170:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b5180:	6d69 0065                                   ime.

000b5184 <_ZTV11USARTSerial>:
	...
   b518c:	4bb1 000b 4c1d 000b 4bf5 000b 4981 000b     .K...L...K...I..
   b519c:	4bc5 000b 4be1 000b 4bd3 000b 4bef 000b     .K...K...K...K..
   b51ac:	4bb3 000b 4bb7 000b                         .K...K..

000b51b4 <_ZTV9USBSerial>:
	...
   b51bc:	4c5b 000b 4cc3 000b 4c99 000b 4981 000b     [L...L...L...I..
   b51cc:	4c8b 000b 4c5d 000b 4c6d 000b 4cbd 000b     .L..]L..mL...L..
   b51dc:	4c7d 000b 4c55 000b                         }L..UL..

000b51e4 <_ZSt7nothrow>:
   b51e4:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b51f4:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b5204:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b5214:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b5224:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b5234:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b5244:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b5255 <link_const_variable_data_end>:
   b5255:	00          	.byte	0x00
	...

000b5258 <link_constructors_location>:
   b5258:	000b40e5 	.word	0x000b40e5
   b525c:	000b45f9 	.word	0x000b45f9
   b5260:	000b4671 	.word	0x000b4671
   b5264:	000b4709 	.word	0x000b4709
   b5268:	000b480d 	.word	0x000b480d
   b526c:	000b496d 	.word	0x000b496d
   b5270:	000b4a15 	.word	0x000b4a15
   b5274:	000b4b79 	.word	0x000b4b79
   b5278:	000b4b9d 	.word	0x000b4b9d

000b527c <link_constructors_end>:
   b527c:	00000000 	.word	0x00000000
