
/Users/kdneeley/Documents/IoT/NMParkBenchTests/LIDARmotionSensorTest/target/4.1.0/boron/LIDARmotionSensorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001254  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5270  000b5270  00005270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b5294  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e60c  000b5298  0001e60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000178  2003e678  2003e678  0002e678  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b5304  000b5304  00025304  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b532c  000b532c  0002532c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000d7d2f  00000000  00000000  00025330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000dbb0  00000000  00000000  000fd05f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0002eabc  00000000  00000000  0010ac0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002228  00000000  00000000  001396cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00008a50  00000000  00000000  0013b8f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000328f9  00000000  00000000  00144343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002fd64  00000000  00000000  00176c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012f725  00000000  00000000  001a69a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005eb8  00000000  00000000  002d60c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f000 ff4f 	bl	b4ed0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f000 ff57 	bl	b4eec <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e60c 	.word	0x2003e60c
   b4048:	000b5298 	.word	0x000b5298
   b404c:	2003e678 	.word	0x2003e678
   b4050:	2003e678 	.word	0x2003e678
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 fe7d 	bl	b4d5c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b5244 	.word	0x000b5244
   b407c:	000b5264 	.word	0x000b5264

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b821 	b.w	b40c6 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f827 	bl	b40d8 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 be1d 	b.w	b4ccc <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 ba0b 	b.w	b44ac <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f000 ba11 	b.w	b44bc <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr

000b40aa <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40aa:	b40e      	push	{r1, r2, r3}
   b40ac:	b503      	push	{r0, r1, lr}
   b40ae:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40b6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40b8:	f000 fcbd 	bl	b4a36 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40bc:	b002      	add	sp, #8
   b40be:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c2:	b003      	add	sp, #12
   b40c4:	4770      	bx	lr

000b40c6 <setup>:

LIDARLite_v4LED L1;



void setup() {
   b40c6:	b508      	push	{r3, lr}
    Serial.begin(9600);
   b40c8:	f000 fdb8 	bl	b4c3c <_Z16_fetch_usbserialv>
   
}
   b40cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.begin(9600);
   b40d0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40d4:	f000 bda6 	b.w	b4c24 <_ZN9USBSerial5beginEl>

000b40d8 <loop>:

void loop() {
   b40d8:	b537      	push	{r0, r1, r2, r4, r5, lr}

    int dist;
  
    L1.write(0x04, *arrayToSaveReading, 8, I2CADDRESS);
   b40da:	4c13      	ldr	r4, [pc, #76]	; (b4128 <loop+0x50>)
   b40dc:	4813      	ldr	r0, [pc, #76]	; (b412c <loop+0x54>)
   b40de:	6822      	ldr	r2, [r4, #0]
   b40e0:	2562      	movs	r5, #98	; 0x62
   b40e2:	9500      	str	r5, [sp, #0]
   b40e4:	2308      	movs	r3, #8
   b40e6:	2104      	movs	r1, #4
   b40e8:	f000 f824 	bl	b4134 <_ZN15LIDARLite_v4LED5writeEhPhhh>

    //repeat the following until bit 0 is low
    L1.read(0x01, *arrayToSaveReading,8, I2CADDRESS);
   b40ec:	6822      	ldr	r2, [r4, #0]
   b40ee:	480f      	ldr	r0, [pc, #60]	; (b412c <loop+0x54>)
   b40f0:	9500      	str	r5, [sp, #0]
   b40f2:	2308      	movs	r3, #8
   b40f4:	2101      	movs	r1, #1
   b40f6:	f000 f83d 	bl	b4174 <_ZN15LIDARLite_v4LED4readEhPhhh>
    
    L1.read(0x10, *arrayToSaveReading, 8, I2CADDRESS);
   b40fa:	6822      	ldr	r2, [r4, #0]
   b40fc:	480b      	ldr	r0, [pc, #44]	; (b412c <loop+0x54>)
   b40fe:	9500      	str	r5, [sp, #0]
   b4100:	2308      	movs	r3, #8
   b4102:	2110      	movs	r1, #16
   b4104:	f000 f836 	bl	b4174 <_ZN15LIDARLite_v4LED4readEhPhhh>
    L1.read(0x11, *arrayToSaveReading, 8, I2CADDRESS);
   b4108:	6822      	ldr	r2, [r4, #0]
   b410a:	4808      	ldr	r0, [pc, #32]	; (b412c <loop+0x54>)
   b410c:	9500      	str	r5, [sp, #0]
   b410e:	2308      	movs	r3, #8
   b4110:	2111      	movs	r1, #17
   b4112:	f000 f82f 	bl	b4174 <_ZN15LIDARLite_v4LED4readEhPhhh>
    Serial.printf("Distance Measured = %i\n", dist);
   b4116:	f000 fd91 	bl	b4c3c <_Z16_fetch_usbserialv>
   b411a:	4905      	ldr	r1, [pc, #20]	; (b4130 <loop+0x58>)
   b411c:	2200      	movs	r2, #0
   b411e:	f7ff ffc4 	bl	b40aa <_ZN5Print6printfEPKcz>

   b4122:	b003      	add	sp, #12
   b4124:	bd30      	pop	{r4, r5, pc}
   b4126:	bf00      	nop
   b4128:	2003e67c 	.word	0x2003e67c
   b412c:	2003e678 	.word	0x2003e678
   b4130:	000b5048 	.word	0x000b5048

000b4134 <_ZN15LIDARLite_v4LED5writeEhPhhh>:
  lidarliteAddress: Default 0x62. Fill in new address here if changed. See
    operating manual for instructions.
------------------------------------------------------------------------------*/
void LIDARLite_v4LED::write(uint8_t regAddr,  uint8_t * dataBytes,
                            uint8_t numBytes, uint8_t lidarliteAddress)
{
   b4134:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4136:	460d      	mov	r5, r1
   b4138:	f89d 1018 	ldrb.w	r1, [sp, #24]
   b413c:	9301      	str	r3, [sp, #4]
   b413e:	4614      	mov	r4, r2
   b4140:	9100      	str	r1, [sp, #0]
    int nackCatcher;

    Wire.beginTransmission((int) lidarliteAddress);
   b4142:	f000 fe59 	bl	b4df8 <_Z19__fetch_global_Wirev>
   b4146:	9900      	ldr	r1, [sp, #0]
   b4148:	f000 fae4 	bl	b4714 <_ZN7TwoWire17beginTransmissionEi>

    // First byte of every write sets the LidarLite's internal register address pointer
    Wire.write((int) regAddr);
   b414c:	f000 fe54 	bl	b4df8 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4150:	6803      	ldr	r3, [r0, #0]
   b4152:	4629      	mov	r1, r5
   b4154:	689b      	ldr	r3, [r3, #8]
   b4156:	4798      	blx	r3

    // Subsequent bytes are data writes
    Wire.write(dataBytes, (int) numBytes);
   b4158:	f000 fe4e 	bl	b4df8 <_Z19__fetch_global_Wirev>
   b415c:	6803      	ldr	r3, [r0, #0]
   b415e:	9a01      	ldr	r2, [sp, #4]
   b4160:	68db      	ldr	r3, [r3, #12]
   b4162:	4621      	mov	r1, r4
   b4164:	4798      	blx	r3

    // A nack means the device is not responding. Report the error over serial.
    nackCatcher = Wire.endTransmission();
   b4166:	f000 fe47 	bl	b4df8 <_Z19__fetch_global_Wirev>
    if (nackCatcher != 0)
    {
        // handle nack issues in here
    }
} /* LIDARLite_v4LED::write */
   b416a:	b003      	add	sp, #12
   b416c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    nackCatcher = Wire.endTransmission();
   b4170:	f000 bad7 	b.w	b4722 <_ZN7TwoWire15endTransmissionEv>

000b4174 <_ZN15LIDARLite_v4LED4readEhPhhh>:
  lidarliteAddress: Default 0x62. Fill in new address here if changed. See
    operating manual for instructions.
------------------------------------------------------------------------------*/
void LIDARLite_v4LED::read(uint8_t regAddr,  uint8_t * dataBytes,
                           uint8_t numBytes, uint8_t lidarliteAddress)
{
   b4174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4176:	f89d 7018 	ldrb.w	r7, [sp, #24]
   b417a:	4615      	mov	r5, r2
   b417c:	461c      	mov	r4, r3
   b417e:	460e      	mov	r6, r1
    uint16_t i = 0;
    int nackCatcher = 0;

    // Set the internal register address pointer in the Lidar Lite
    Wire.beginTransmission((int) lidarliteAddress);
   b4180:	f000 fe3a 	bl	b4df8 <_Z19__fetch_global_Wirev>
   b4184:	4639      	mov	r1, r7
   b4186:	f000 fac5 	bl	b4714 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((int) regAddr); // Set the register to be read
   b418a:	f000 fe35 	bl	b4df8 <_Z19__fetch_global_Wirev>
   b418e:	6803      	ldr	r3, [r0, #0]
   b4190:	4631      	mov	r1, r6
   b4192:	689b      	ldr	r3, [r3, #8]
   b4194:	4798      	blx	r3

    // A nack means the device is not responding, report the error over serial
    nackCatcher = Wire.endTransmission(false); // false means perform repeated start
   b4196:	f000 fe2f 	bl	b4df8 <_Z19__fetch_global_Wirev>
   b419a:	2100      	movs	r1, #0
   b419c:	f000 fabd 	bl	b471a <_ZN7TwoWire15endTransmissionEh>
    {
        // handle nack issues in here
    }

    // Perform read, save in dataBytes array
    Wire.requestFrom((int)lidarliteAddress, (int) numBytes);
   b41a0:	f000 fe2a 	bl	b4df8 <_Z19__fetch_global_Wirev>
   b41a4:	4622      	mov	r2, r4
   b41a6:	4639      	mov	r1, r7
   b41a8:	f000 faad 	bl	b4706 <_ZN7TwoWire11requestFromEhj>
    if ((int) numBytes <= Wire.available())
   b41ac:	f000 fe24 	bl	b4df8 <_Z19__fetch_global_Wirev>
   b41b0:	6803      	ldr	r3, [r0, #0]
   b41b2:	691b      	ldr	r3, [r3, #16]
   b41b4:	4798      	blx	r3
   b41b6:	4284      	cmp	r4, r0
   b41b8:	dc0a      	bgt.n	b41d0 <_ZN15LIDARLite_v4LED4readEhPhhh+0x5c>
   b41ba:	442c      	add	r4, r5
    {
        while (i < numBytes)
   b41bc:	42a5      	cmp	r5, r4
   b41be:	d007      	beq.n	b41d0 <_ZN15LIDARLite_v4LED4readEhPhhh+0x5c>
        {
            dataBytes[i] = (uint8_t) Wire.read();
   b41c0:	f000 fe1a 	bl	b4df8 <_Z19__fetch_global_Wirev>
   b41c4:	6803      	ldr	r3, [r0, #0]
   b41c6:	695b      	ldr	r3, [r3, #20]
   b41c8:	4798      	blx	r3
   b41ca:	f805 0b01 	strb.w	r0, [r5], #1
        while (i < numBytes)
   b41ce:	e7f5      	b.n	b41bc <_ZN15LIDARLite_v4LED4readEhPhhh+0x48>
            i++;
        }
    }

} /* LIDARLite_v4LED::read */
   b41d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b41d4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b41d4:	b508      	push	{r3, lr}
   b41d6:	4b02      	ldr	r3, [pc, #8]	; (b41e0 <os_mutex_recursive_create+0xc>)
   b41d8:	681b      	ldr	r3, [r3, #0]
   b41da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b41dc:	9301      	str	r3, [sp, #4]
   b41de:	bd08      	pop	{r3, pc}
   b41e0:	00030248 	.word	0x00030248

000b41e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b41e4:	b508      	push	{r3, lr}
   b41e6:	4b02      	ldr	r3, [pc, #8]	; (b41f0 <HAL_RNG_GetRandomNumber+0xc>)
   b41e8:	681b      	ldr	r3, [r3, #0]
   b41ea:	685b      	ldr	r3, [r3, #4]
   b41ec:	9301      	str	r3, [sp, #4]
   b41ee:	bd08      	pop	{r3, pc}
   b41f0:	00030218 	.word	0x00030218

000b41f4 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b41f4:	b508      	push	{r3, lr}
   b41f6:	4b02      	ldr	r3, [pc, #8]	; (b4200 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b41f8:	681b      	ldr	r3, [r3, #0]
   b41fa:	695b      	ldr	r3, [r3, #20]
   b41fc:	9301      	str	r3, [sp, #4]
   b41fe:	bd08      	pop	{r3, pc}
   b4200:	00030218 	.word	0x00030218

000b4204 <hal_i2c_begin_transmission>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4204:	b508      	push	{r3, lr}
   b4206:	4b02      	ldr	r3, [pc, #8]	; (b4210 <hal_i2c_begin_transmission+0xc>)
   b4208:	681b      	ldr	r3, [r3, #0]
   b420a:	699b      	ldr	r3, [r3, #24]
   b420c:	9301      	str	r3, [sp, #4]
   b420e:	bd08      	pop	{r3, pc}
   b4210:	00030228 	.word	0x00030228

000b4214 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4214:	b508      	push	{r3, lr}
   b4216:	4b02      	ldr	r3, [pc, #8]	; (b4220 <hal_i2c_end_transmission+0xc>)
   b4218:	681b      	ldr	r3, [r3, #0]
   b421a:	69db      	ldr	r3, [r3, #28]
   b421c:	9301      	str	r3, [sp, #4]
   b421e:	bd08      	pop	{r3, pc}
   b4220:	00030228 	.word	0x00030228

000b4224 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4224:	b508      	push	{r3, lr}
   b4226:	4b02      	ldr	r3, [pc, #8]	; (b4230 <hal_i2c_write+0xc>)
   b4228:	681b      	ldr	r3, [r3, #0]
   b422a:	6a1b      	ldr	r3, [r3, #32]
   b422c:	9301      	str	r3, [sp, #4]
   b422e:	bd08      	pop	{r3, pc}
   b4230:	00030228 	.word	0x00030228

000b4234 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4234:	b508      	push	{r3, lr}
   b4236:	4b02      	ldr	r3, [pc, #8]	; (b4240 <hal_i2c_available+0xc>)
   b4238:	681b      	ldr	r3, [r3, #0]
   b423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b423c:	9301      	str	r3, [sp, #4]
   b423e:	bd08      	pop	{r3, pc}
   b4240:	00030228 	.word	0x00030228

000b4244 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4244:	b508      	push	{r3, lr}
   b4246:	4b02      	ldr	r3, [pc, #8]	; (b4250 <hal_i2c_read+0xc>)
   b4248:	681b      	ldr	r3, [r3, #0]
   b424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b424c:	9301      	str	r3, [sp, #4]
   b424e:	bd08      	pop	{r3, pc}
   b4250:	00030228 	.word	0x00030228

000b4254 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4254:	b508      	push	{r3, lr}
   b4256:	4b02      	ldr	r3, [pc, #8]	; (b4260 <hal_i2c_peek+0xc>)
   b4258:	681b      	ldr	r3, [r3, #0]
   b425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b425c:	9301      	str	r3, [sp, #4]
   b425e:	bd08      	pop	{r3, pc}
   b4260:	00030228 	.word	0x00030228

000b4264 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4264:	b508      	push	{r3, lr}
   b4266:	4b02      	ldr	r3, [pc, #8]	; (b4270 <hal_i2c_flush+0xc>)
   b4268:	681b      	ldr	r3, [r3, #0]
   b426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b426c:	9301      	str	r3, [sp, #4]
   b426e:	bd08      	pop	{r3, pc}
   b4270:	00030228 	.word	0x00030228

000b4274 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4274:	b508      	push	{r3, lr}
   b4276:	4b02      	ldr	r3, [pc, #8]	; (b4280 <hal_i2c_init+0xc>)
   b4278:	681b      	ldr	r3, [r3, #0]
   b427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b427c:	9301      	str	r3, [sp, #4]
   b427e:	bd08      	pop	{r3, pc}
   b4280:	00030228 	.word	0x00030228

000b4284 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4284:	b508      	push	{r3, lr}
   b4286:	4b02      	ldr	r3, [pc, #8]	; (b4290 <hal_i2c_request_ex+0xc>)
   b4288:	681b      	ldr	r3, [r3, #0]
   b428a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b428c:	9301      	str	r3, [sp, #4]
   b428e:	bd08      	pop	{r3, pc}
   b4290:	00030228 	.word	0x00030228

000b4294 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4294:	b508      	push	{r3, lr}
   b4296:	4b02      	ldr	r3, [pc, #8]	; (b42a0 <inet_inet_ntop+0xc>)
   b4298:	681b      	ldr	r3, [r3, #0]
   b429a:	695b      	ldr	r3, [r3, #20]
   b429c:	9301      	str	r3, [sp, #4]
   b429e:	bd08      	pop	{r3, pc}
   b42a0:	00030264 	.word	0x00030264

000b42a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b42a4:	b508      	push	{r3, lr}
   b42a6:	4b02      	ldr	r3, [pc, #8]	; (b42b0 <netdb_freeaddrinfo+0xc>)
   b42a8:	681b      	ldr	r3, [r3, #0]
   b42aa:	689b      	ldr	r3, [r3, #8]
   b42ac:	9301      	str	r3, [sp, #4]
   b42ae:	bd08      	pop	{r3, pc}
   b42b0:	00030268 	.word	0x00030268

000b42b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b42b4:	b508      	push	{r3, lr}
   b42b6:	4b02      	ldr	r3, [pc, #8]	; (b42c0 <netdb_getaddrinfo+0xc>)
   b42b8:	681b      	ldr	r3, [r3, #0]
   b42ba:	68db      	ldr	r3, [r3, #12]
   b42bc:	9301      	str	r3, [sp, #4]
   b42be:	bd08      	pop	{r3, pc}
   b42c0:	00030268 	.word	0x00030268

000b42c4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b42c4:	b508      	push	{r3, lr}
   b42c6:	4b02      	ldr	r3, [pc, #8]	; (b42d0 <hal_usart_write+0xc>)
   b42c8:	681b      	ldr	r3, [r3, #0]
   b42ca:	68db      	ldr	r3, [r3, #12]
   b42cc:	9301      	str	r3, [sp, #4]
   b42ce:	bd08      	pop	{r3, pc}
   b42d0:	0003023c 	.word	0x0003023c

000b42d4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b42d4:	b508      	push	{r3, lr}
   b42d6:	4b02      	ldr	r3, [pc, #8]	; (b42e0 <hal_usart_available+0xc>)
   b42d8:	681b      	ldr	r3, [r3, #0]
   b42da:	691b      	ldr	r3, [r3, #16]
   b42dc:	9301      	str	r3, [sp, #4]
   b42de:	bd08      	pop	{r3, pc}
   b42e0:	0003023c 	.word	0x0003023c

000b42e4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b42e4:	b508      	push	{r3, lr}
   b42e6:	4b02      	ldr	r3, [pc, #8]	; (b42f0 <hal_usart_read+0xc>)
   b42e8:	681b      	ldr	r3, [r3, #0]
   b42ea:	695b      	ldr	r3, [r3, #20]
   b42ec:	9301      	str	r3, [sp, #4]
   b42ee:	bd08      	pop	{r3, pc}
   b42f0:	0003023c 	.word	0x0003023c

000b42f4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b42f4:	b508      	push	{r3, lr}
   b42f6:	4b02      	ldr	r3, [pc, #8]	; (b4300 <hal_usart_peek+0xc>)
   b42f8:	681b      	ldr	r3, [r3, #0]
   b42fa:	699b      	ldr	r3, [r3, #24]
   b42fc:	9301      	str	r3, [sp, #4]
   b42fe:	bd08      	pop	{r3, pc}
   b4300:	0003023c 	.word	0x0003023c

000b4304 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4304:	b508      	push	{r3, lr}
   b4306:	4b02      	ldr	r3, [pc, #8]	; (b4310 <hal_usart_flush+0xc>)
   b4308:	681b      	ldr	r3, [r3, #0]
   b430a:	69db      	ldr	r3, [r3, #28]
   b430c:	9301      	str	r3, [sp, #4]
   b430e:	bd08      	pop	{r3, pc}
   b4310:	0003023c 	.word	0x0003023c

000b4314 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4314:	b508      	push	{r3, lr}
   b4316:	4b02      	ldr	r3, [pc, #8]	; (b4320 <hal_usart_available_data_for_write+0xc>)
   b4318:	681b      	ldr	r3, [r3, #0]
   b431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b431c:	9301      	str	r3, [sp, #4]
   b431e:	bd08      	pop	{r3, pc}
   b4320:	0003023c 	.word	0x0003023c

000b4324 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4324:	b508      	push	{r3, lr}
   b4326:	4b02      	ldr	r3, [pc, #8]	; (b4330 <hal_usart_init_ex+0xc>)
   b4328:	681b      	ldr	r3, [r3, #0]
   b432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b432c:	9301      	str	r3, [sp, #4]
   b432e:	bd08      	pop	{r3, pc}
   b4330:	0003023c 	.word	0x0003023c

000b4334 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4334:	b508      	push	{r3, lr}
   b4336:	4b02      	ldr	r3, [pc, #8]	; (b4340 <HAL_USB_USART_Init+0xc>)
   b4338:	681b      	ldr	r3, [r3, #0]
   b433a:	681b      	ldr	r3, [r3, #0]
   b433c:	9301      	str	r3, [sp, #4]
   b433e:	bd08      	pop	{r3, pc}
   b4340:	0003024c 	.word	0x0003024c

000b4344 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4344:	b508      	push	{r3, lr}
   b4346:	4b02      	ldr	r3, [pc, #8]	; (b4350 <HAL_USB_USART_Begin+0xc>)
   b4348:	681b      	ldr	r3, [r3, #0]
   b434a:	685b      	ldr	r3, [r3, #4]
   b434c:	9301      	str	r3, [sp, #4]
   b434e:	bd08      	pop	{r3, pc}
   b4350:	0003024c 	.word	0x0003024c

000b4354 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4354:	b508      	push	{r3, lr}
   b4356:	4b02      	ldr	r3, [pc, #8]	; (b4360 <HAL_USB_USART_Available_Data+0xc>)
   b4358:	681b      	ldr	r3, [r3, #0]
   b435a:	691b      	ldr	r3, [r3, #16]
   b435c:	9301      	str	r3, [sp, #4]
   b435e:	bd08      	pop	{r3, pc}
   b4360:	0003024c 	.word	0x0003024c

000b4364 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4364:	b508      	push	{r3, lr}
   b4366:	4b02      	ldr	r3, [pc, #8]	; (b4370 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4368:	681b      	ldr	r3, [r3, #0]
   b436a:	695b      	ldr	r3, [r3, #20]
   b436c:	9301      	str	r3, [sp, #4]
   b436e:	bd08      	pop	{r3, pc}
   b4370:	0003024c 	.word	0x0003024c

000b4374 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4374:	b508      	push	{r3, lr}
   b4376:	4b02      	ldr	r3, [pc, #8]	; (b4380 <HAL_USB_USART_Receive_Data+0xc>)
   b4378:	681b      	ldr	r3, [r3, #0]
   b437a:	699b      	ldr	r3, [r3, #24]
   b437c:	9301      	str	r3, [sp, #4]
   b437e:	bd08      	pop	{r3, pc}
   b4380:	0003024c 	.word	0x0003024c

000b4384 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4384:	b508      	push	{r3, lr}
   b4386:	4b02      	ldr	r3, [pc, #8]	; (b4390 <HAL_USB_USART_Send_Data+0xc>)
   b4388:	681b      	ldr	r3, [r3, #0]
   b438a:	69db      	ldr	r3, [r3, #28]
   b438c:	9301      	str	r3, [sp, #4]
   b438e:	bd08      	pop	{r3, pc}
   b4390:	0003024c 	.word	0x0003024c

000b4394 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4394:	b508      	push	{r3, lr}
   b4396:	4b02      	ldr	r3, [pc, #8]	; (b43a0 <HAL_USB_USART_Flush_Data+0xc>)
   b4398:	681b      	ldr	r3, [r3, #0]
   b439a:	6a1b      	ldr	r3, [r3, #32]
   b439c:	9301      	str	r3, [sp, #4]
   b439e:	bd08      	pop	{r3, pc}
   b43a0:	0003024c 	.word	0x0003024c

000b43a4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b43a4:	b508      	push	{r3, lr}
   b43a6:	4b02      	ldr	r3, [pc, #8]	; (b43b0 <set_system_mode+0xc>)
   b43a8:	681b      	ldr	r3, [r3, #0]
   b43aa:	685b      	ldr	r3, [r3, #4]
   b43ac:	9301      	str	r3, [sp, #4]
   b43ae:	bd08      	pop	{r3, pc}
   b43b0:	00030220 	.word	0x00030220

000b43b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b43b4:	b508      	push	{r3, lr}
   b43b6:	4b03      	ldr	r3, [pc, #12]	; (b43c4 <system_ctrl_set_app_request_handler+0x10>)
   b43b8:	681b      	ldr	r3, [r3, #0]
   b43ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b43be:	9301      	str	r3, [sp, #4]
   b43c0:	bd08      	pop	{r3, pc}
   b43c2:	0000      	.short	0x0000
   b43c4:	00030220 	.word	0x00030220

000b43c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b43c8:	b508      	push	{r3, lr}
   b43ca:	4b03      	ldr	r3, [pc, #12]	; (b43d8 <system_ctrl_set_result+0x10>)
   b43cc:	681b      	ldr	r3, [r3, #0]
   b43ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b43d2:	9301      	str	r3, [sp, #4]
   b43d4:	bd08      	pop	{r3, pc}
   b43d6:	0000      	.short	0x0000
   b43d8:	00030220 	.word	0x00030220

000b43dc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b43dc:	b508      	push	{r3, lr}
   b43de:	4b02      	ldr	r3, [pc, #8]	; (b43e8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b43e0:	681b      	ldr	r3, [r3, #0]
   b43e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b43e4:	9301      	str	r3, [sp, #4]
   b43e6:	bd08      	pop	{r3, pc}
   b43e8:	00030244 	.word	0x00030244

000b43ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b43ec:	b508      	push	{r3, lr}
   b43ee:	4b02      	ldr	r3, [pc, #8]	; (b43f8 <network_connect+0xc>)
   b43f0:	681b      	ldr	r3, [r3, #0]
   b43f2:	685b      	ldr	r3, [r3, #4]
   b43f4:	9301      	str	r3, [sp, #4]
   b43f6:	bd08      	pop	{r3, pc}
   b43f8:	00030240 	.word	0x00030240

000b43fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b43fc:	b508      	push	{r3, lr}
   b43fe:	4b02      	ldr	r3, [pc, #8]	; (b4408 <network_connecting+0xc>)
   b4400:	681b      	ldr	r3, [r3, #0]
   b4402:	689b      	ldr	r3, [r3, #8]
   b4404:	9301      	str	r3, [sp, #4]
   b4406:	bd08      	pop	{r3, pc}
   b4408:	00030240 	.word	0x00030240

000b440c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b440c:	b508      	push	{r3, lr}
   b440e:	4b02      	ldr	r3, [pc, #8]	; (b4418 <network_disconnect+0xc>)
   b4410:	681b      	ldr	r3, [r3, #0]
   b4412:	68db      	ldr	r3, [r3, #12]
   b4414:	9301      	str	r3, [sp, #4]
   b4416:	bd08      	pop	{r3, pc}
   b4418:	00030240 	.word	0x00030240

000b441c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b441c:	b508      	push	{r3, lr}
   b441e:	4b02      	ldr	r3, [pc, #8]	; (b4428 <network_ready+0xc>)
   b4420:	681b      	ldr	r3, [r3, #0]
   b4422:	691b      	ldr	r3, [r3, #16]
   b4424:	9301      	str	r3, [sp, #4]
   b4426:	bd08      	pop	{r3, pc}
   b4428:	00030240 	.word	0x00030240

000b442c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b442c:	b508      	push	{r3, lr}
   b442e:	4b02      	ldr	r3, [pc, #8]	; (b4438 <network_on+0xc>)
   b4430:	681b      	ldr	r3, [r3, #0]
   b4432:	695b      	ldr	r3, [r3, #20]
   b4434:	9301      	str	r3, [sp, #4]
   b4436:	bd08      	pop	{r3, pc}
   b4438:	00030240 	.word	0x00030240

000b443c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b443c:	b508      	push	{r3, lr}
   b443e:	4b02      	ldr	r3, [pc, #8]	; (b4448 <network_off+0xc>)
   b4440:	681b      	ldr	r3, [r3, #0]
   b4442:	699b      	ldr	r3, [r3, #24]
   b4444:	9301      	str	r3, [sp, #4]
   b4446:	bd08      	pop	{r3, pc}
   b4448:	00030240 	.word	0x00030240

000b444c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b444c:	b508      	push	{r3, lr}
   b444e:	4b02      	ldr	r3, [pc, #8]	; (b4458 <network_listen+0xc>)
   b4450:	681b      	ldr	r3, [r3, #0]
   b4452:	69db      	ldr	r3, [r3, #28]
   b4454:	9301      	str	r3, [sp, #4]
   b4456:	bd08      	pop	{r3, pc}
   b4458:	00030240 	.word	0x00030240

000b445c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b445c:	b508      	push	{r3, lr}
   b445e:	4b02      	ldr	r3, [pc, #8]	; (b4468 <network_listening+0xc>)
   b4460:	681b      	ldr	r3, [r3, #0]
   b4462:	6a1b      	ldr	r3, [r3, #32]
   b4464:	9301      	str	r3, [sp, #4]
   b4466:	bd08      	pop	{r3, pc}
   b4468:	00030240 	.word	0x00030240

000b446c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b446c:	b508      	push	{r3, lr}
   b446e:	4b02      	ldr	r3, [pc, #8]	; (b4478 <network_set_listen_timeout+0xc>)
   b4470:	681b      	ldr	r3, [r3, #0]
   b4472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4474:	9301      	str	r3, [sp, #4]
   b4476:	bd08      	pop	{r3, pc}
   b4478:	00030240 	.word	0x00030240

000b447c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b447c:	b508      	push	{r3, lr}
   b447e:	4b02      	ldr	r3, [pc, #8]	; (b4488 <network_get_listen_timeout+0xc>)
   b4480:	681b      	ldr	r3, [r3, #0]
   b4482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4484:	9301      	str	r3, [sp, #4]
   b4486:	bd08      	pop	{r3, pc}
   b4488:	00030240 	.word	0x00030240

000b448c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b448c:	b508      	push	{r3, lr}
   b448e:	4b02      	ldr	r3, [pc, #8]	; (b4498 <network_is_on+0xc>)
   b4490:	681b      	ldr	r3, [r3, #0]
   b4492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4494:	9301      	str	r3, [sp, #4]
   b4496:	bd08      	pop	{r3, pc}
   b4498:	00030240 	.word	0x00030240

000b449c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b449c:	b508      	push	{r3, lr}
   b449e:	4b02      	ldr	r3, [pc, #8]	; (b44a8 <network_is_off+0xc>)
   b44a0:	681b      	ldr	r3, [r3, #0]
   b44a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b44a4:	9301      	str	r3, [sp, #4]
   b44a6:	bd08      	pop	{r3, pc}
   b44a8:	00030240 	.word	0x00030240

000b44ac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b44ac:	b508      	push	{r3, lr}
   b44ae:	4b02      	ldr	r3, [pc, #8]	; (b44b8 <malloc+0xc>)
   b44b0:	681b      	ldr	r3, [r3, #0]
   b44b2:	681b      	ldr	r3, [r3, #0]
   b44b4:	9301      	str	r3, [sp, #4]
   b44b6:	bd08      	pop	{r3, pc}
   b44b8:	0003021c 	.word	0x0003021c

000b44bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b44bc:	b508      	push	{r3, lr}
   b44be:	4b02      	ldr	r3, [pc, #8]	; (b44c8 <free+0xc>)
   b44c0:	681b      	ldr	r3, [r3, #0]
   b44c2:	685b      	ldr	r3, [r3, #4]
   b44c4:	9301      	str	r3, [sp, #4]
   b44c6:	bd08      	pop	{r3, pc}
   b44c8:	0003021c 	.word	0x0003021c

000b44cc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b44cc:	b508      	push	{r3, lr}
   b44ce:	4b02      	ldr	r3, [pc, #8]	; (b44d8 <vsnprintf+0xc>)
   b44d0:	681b      	ldr	r3, [r3, #0]
   b44d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b44d4:	9301      	str	r3, [sp, #4]
   b44d6:	bd08      	pop	{r3, pc}
   b44d8:	0003021c 	.word	0x0003021c

000b44dc <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b44dc:	b508      	push	{r3, lr}
   b44de:	4b02      	ldr	r3, [pc, #8]	; (b44e8 <__assert_func+0xc>)
   b44e0:	681b      	ldr	r3, [r3, #0]
   b44e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b44e4:	9301      	str	r3, [sp, #4]
   b44e6:	bd08      	pop	{r3, pc}
   b44e8:	0003021c 	.word	0x0003021c

000b44ec <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b44ec:	b508      	push	{r3, lr}
   b44ee:	4b02      	ldr	r3, [pc, #8]	; (b44f8 <newlib_impure_ptr_callback+0xc>)
   b44f0:	681b      	ldr	r3, [r3, #0]
   b44f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b44f4:	9301      	str	r3, [sp, #4]
   b44f6:	bd08      	pop	{r3, pc}
   b44f8:	0003021c 	.word	0x0003021c

000b44fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b44fc:	4802      	ldr	r0, [pc, #8]	; (b4508 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b44fe:	2300      	movs	r3, #0
   b4500:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4502:	f7ff be67 	b.w	b41d4 <os_mutex_recursive_create>
   b4506:	bf00      	nop
   b4508:	2003e69c 	.word	0x2003e69c

000b450c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b450c:	2200      	movs	r2, #0
   b450e:	6840      	ldr	r0, [r0, #4]
   b4510:	4611      	mov	r1, r2
   b4512:	f7ff bf83 	b.w	b441c <network_ready>

000b4516 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b4516:	2200      	movs	r2, #0
   b4518:	6840      	ldr	r0, [r0, #4]
   b451a:	4611      	mov	r1, r2
   b451c:	f7ff bf9e 	b.w	b445c <network_listening>

000b4520 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4520:	2200      	movs	r2, #0
   b4522:	6840      	ldr	r0, [r0, #4]
   b4524:	4611      	mov	r1, r2
   b4526:	f7ff bfa9 	b.w	b447c <network_get_listen_timeout>

000b452a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b452a:	6840      	ldr	r0, [r0, #4]
   b452c:	2200      	movs	r2, #0
   b452e:	f7ff bf9d 	b.w	b446c <network_set_listen_timeout>

000b4532 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4532:	6840      	ldr	r0, [r0, #4]
   b4534:	2200      	movs	r2, #0
   b4536:	f081 0101 	eor.w	r1, r1, #1
   b453a:	f7ff bf87 	b.w	b444c <network_listen>

000b453e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b453e:	2300      	movs	r3, #0
   b4540:	6840      	ldr	r0, [r0, #4]
   b4542:	461a      	mov	r2, r3
   b4544:	4619      	mov	r1, r3
   b4546:	f7ff bf79 	b.w	b443c <network_off>

000b454a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b454a:	2300      	movs	r3, #0
   b454c:	6840      	ldr	r0, [r0, #4]
   b454e:	461a      	mov	r2, r3
   b4550:	4619      	mov	r1, r3
   b4552:	f7ff bf6b 	b.w	b442c <network_on>

000b4556 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4556:	2200      	movs	r2, #0
   b4558:	6840      	ldr	r0, [r0, #4]
   b455a:	4611      	mov	r1, r2
   b455c:	f7ff bf4e 	b.w	b43fc <network_connecting>

000b4560 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4560:	6840      	ldr	r0, [r0, #4]
   b4562:	2200      	movs	r2, #0
   b4564:	2102      	movs	r1, #2
   b4566:	f7ff bf51 	b.w	b440c <network_disconnect>

000b456a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b456a:	2300      	movs	r3, #0
   b456c:	6840      	ldr	r0, [r0, #4]
   b456e:	461a      	mov	r2, r3
   b4570:	f7ff bf3c 	b.w	b43ec <network_connect>

000b4574 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b4574:	4b08      	ldr	r3, [pc, #32]	; (b4598 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b4576:	b510      	push	{r4, lr}
   b4578:	2428      	movs	r4, #40	; 0x28
   b457a:	4622      	mov	r2, r4
   b457c:	4618      	mov	r0, r3
   b457e:	2100      	movs	r1, #0
   b4580:	f000 fcb4 	bl	b4eec <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4584:	4b05      	ldr	r3, [pc, #20]	; (b459c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b4586:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b4588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b458c:	6042      	str	r2, [r0, #4]
   b458e:	2204      	movs	r2, #4
   b4590:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b4592:	4a03      	ldr	r2, [pc, #12]	; (b45a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b4594:	601a      	str	r2, [r3, #0]
   b4596:	bd10      	pop	{r4, pc}
   b4598:	2003e6a8 	.word	0x2003e6a8
   b459c:	2003e6a0 	.word	0x2003e6a0
   b45a0:	000b5068 	.word	0x000b5068

000b45a4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b45a4:	2200      	movs	r2, #0
   b45a6:	6840      	ldr	r0, [r0, #4]
   b45a8:	4611      	mov	r1, r2
   b45aa:	f7ff bf57 	b.w	b445c <network_listening>

000b45ae <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b45ae:	2200      	movs	r2, #0
   b45b0:	6840      	ldr	r0, [r0, #4]
   b45b2:	4611      	mov	r1, r2
   b45b4:	f7ff bf62 	b.w	b447c <network_get_listen_timeout>

000b45b8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b45b8:	6840      	ldr	r0, [r0, #4]
   b45ba:	2200      	movs	r2, #0
   b45bc:	f7ff bf56 	b.w	b446c <network_set_listen_timeout>

000b45c0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b45c0:	6840      	ldr	r0, [r0, #4]
   b45c2:	2200      	movs	r2, #0
   b45c4:	f081 0101 	eor.w	r1, r1, #1
   b45c8:	f7ff bf40 	b.w	b444c <network_listen>

000b45cc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b45cc:	2300      	movs	r3, #0
   b45ce:	6840      	ldr	r0, [r0, #4]
   b45d0:	461a      	mov	r2, r3
   b45d2:	4619      	mov	r1, r3
   b45d4:	f7ff bf32 	b.w	b443c <network_off>

000b45d8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b45d8:	2300      	movs	r3, #0
   b45da:	6840      	ldr	r0, [r0, #4]
   b45dc:	461a      	mov	r2, r3
   b45de:	4619      	mov	r1, r3
   b45e0:	f7ff bf24 	b.w	b442c <network_on>

000b45e4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b45e4:	2200      	movs	r2, #0
   b45e6:	6840      	ldr	r0, [r0, #4]
   b45e8:	4611      	mov	r1, r2
   b45ea:	f7ff bf17 	b.w	b441c <network_ready>

000b45ee <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b45ee:	2200      	movs	r2, #0
   b45f0:	6840      	ldr	r0, [r0, #4]
   b45f2:	4611      	mov	r1, r2
   b45f4:	f7ff bf02 	b.w	b43fc <network_connecting>

000b45f8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b45f8:	6840      	ldr	r0, [r0, #4]
   b45fa:	2200      	movs	r2, #0
   b45fc:	2102      	movs	r1, #2
   b45fe:	f7ff bf05 	b.w	b440c <network_disconnect>

000b4602 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4602:	2300      	movs	r3, #0
   b4604:	6840      	ldr	r0, [r0, #4]
   b4606:	461a      	mov	r2, r3
   b4608:	f7ff bef0 	b.w	b43ec <network_connect>

000b460c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b460c:	4b02      	ldr	r3, [pc, #8]	; (b4618 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b460e:	2203      	movs	r2, #3
   b4610:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4612:	4a02      	ldr	r2, [pc, #8]	; (b461c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4614:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4616:	4770      	bx	lr
   b4618:	2003e6d0 	.word	0x2003e6d0
   b461c:	000b50a4 	.word	0x000b50a4

000b4620 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4620:	4770      	bx	lr

000b4622 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4624:	4606      	mov	r6, r0
   b4626:	4615      	mov	r5, r2
   b4628:	460c      	mov	r4, r1
   b462a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b462c:	42bc      	cmp	r4, r7
   b462e:	d006      	beq.n	b463e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4630:	6833      	ldr	r3, [r6, #0]
   b4632:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4636:	689b      	ldr	r3, [r3, #8]
   b4638:	4630      	mov	r0, r6
   b463a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b463c:	e7f6      	b.n	b462c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b463e:	4628      	mov	r0, r5
   b4640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4642 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4642:	7c00      	ldrb	r0, [r0, #16]
   b4644:	2200      	movs	r2, #0
   b4646:	f7ff bded 	b.w	b4224 <hal_i2c_write>

000b464a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b464a:	7c00      	ldrb	r0, [r0, #16]
   b464c:	2100      	movs	r1, #0
   b464e:	f7ff bdf1 	b.w	b4234 <hal_i2c_available>

000b4652 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4652:	7c00      	ldrb	r0, [r0, #16]
   b4654:	2100      	movs	r1, #0
   b4656:	f7ff bdf5 	b.w	b4244 <hal_i2c_read>

000b465a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b465a:	7c00      	ldrb	r0, [r0, #16]
   b465c:	2100      	movs	r1, #0
   b465e:	f7ff bdf9 	b.w	b4254 <hal_i2c_peek>

000b4662 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4662:	7c00      	ldrb	r0, [r0, #16]
   b4664:	2100      	movs	r1, #0
   b4666:	f7ff bdfd 	b.w	b4264 <hal_i2c_flush>

000b466a <_ZN7TwoWireD0Ev>:
   b466a:	b510      	push	{r4, lr}
   b466c:	2114      	movs	r1, #20
   b466e:	4604      	mov	r4, r0
   b4670:	f7ff fd11 	bl	b4096 <_ZdlPvj>
   b4674:	4620      	mov	r0, r4
   b4676:	bd10      	pop	{r4, pc}

000b4678 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4678:	b538      	push	{r3, r4, r5, lr}
   b467a:	4604      	mov	r4, r0
   b467c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b467e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4682:	2200      	movs	r2, #0
   b4684:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4688:	4b09      	ldr	r3, [pc, #36]	; (b46b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b468a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b468c:	4608      	mov	r0, r1
   b468e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4690:	4629      	mov	r1, r5
   b4692:	f7ff fdef 	bl	b4274 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4696:	30bf      	adds	r0, #191	; 0xbf
   b4698:	d108      	bne.n	b46ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b469a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b469c:	07db      	lsls	r3, r3, #31
   b469e:	d505      	bpl.n	b46ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b46a0:	6868      	ldr	r0, [r5, #4]
   b46a2:	f7ff ff0b 	bl	b44bc <free>
    free(conf.tx_buffer);
   b46a6:	68e8      	ldr	r0, [r5, #12]
   b46a8:	f7ff ff08 	bl	b44bc <free>
}
   b46ac:	4620      	mov	r0, r4
   b46ae:	bd38      	pop	{r3, r4, r5, pc}
   b46b0:	000b50e0 	.word	0x000b50e0

000b46b4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b46b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b46b6:	2200      	movs	r2, #0
   b46b8:	2314      	movs	r3, #20
   b46ba:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b46be:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b46c2:	780b      	ldrb	r3, [r1, #0]
   b46c4:	f88d 3008 	strb.w	r3, [sp, #8]
   b46c8:	684b      	ldr	r3, [r1, #4]
   b46ca:	9303      	str	r3, [sp, #12]
   b46cc:	68cb      	ldr	r3, [r1, #12]
   b46ce:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b46d0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b46d2:	7a0b      	ldrb	r3, [r1, #8]
   b46d4:	9305      	str	r3, [sp, #20]
   b46d6:	a901      	add	r1, sp, #4
   b46d8:	f7ff fdd4 	bl	b4284 <hal_i2c_request_ex>
}
   b46dc:	b007      	add	sp, #28
   b46de:	f85d fb04 	ldr.w	pc, [sp], #4

000b46e2 <_ZN7TwoWire11requestFromEhjh>:
{
   b46e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b46e4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b46e6:	f88d 1000 	strb.w	r1, [sp]
   b46ea:	f04f 0164 	mov.w	r1, #100	; 0x64
   b46ee:	9103      	str	r1, [sp, #12]
   b46f0:	bf18      	it	ne
   b46f2:	2301      	movne	r3, #1
   b46f4:	4669      	mov	r1, sp
    size_ = size;
   b46f6:	9201      	str	r2, [sp, #4]
   b46f8:	f88d 3008 	strb.w	r3, [sp, #8]
   b46fc:	f7ff ffda 	bl	b46b4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b4700:	b005      	add	sp, #20
   b4702:	f85d fb04 	ldr.w	pc, [sp], #4

000b4706 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b4706:	2301      	movs	r3, #1
   b4708:	f7ff bfeb 	b.w	b46e2 <_ZN7TwoWire11requestFromEhjh>

000b470c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b470c:	7c00      	ldrb	r0, [r0, #16]
   b470e:	2200      	movs	r2, #0
   b4710:	f7ff bd78 	b.w	b4204 <hal_i2c_begin_transmission>

000b4714 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b4714:	b2c9      	uxtb	r1, r1
   b4716:	f7ff bff9 	b.w	b470c <_ZN7TwoWire17beginTransmissionEh>

000b471a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b471a:	7c00      	ldrb	r0, [r0, #16]
   b471c:	2200      	movs	r2, #0
   b471e:	f7ff bd79 	b.w	b4214 <hal_i2c_end_transmission>

000b4722 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b4722:	2101      	movs	r1, #1
   b4724:	f7ff bff9 	b.w	b471a <_ZN7TwoWire15endTransmissionEh>

000b4728 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4728:	4770      	bx	lr

000b472a <_ZN9IPAddressD0Ev>:
   b472a:	b510      	push	{r4, lr}
   b472c:	2118      	movs	r1, #24
   b472e:	4604      	mov	r4, r0
   b4730:	f7ff fcb1 	bl	b4096 <_ZdlPvj>
   b4734:	4620      	mov	r0, r4
   b4736:	bd10      	pop	{r4, pc}

000b4738 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4738:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b473a:	7d03      	ldrb	r3, [r0, #20]
   b473c:	2b06      	cmp	r3, #6
{
   b473e:	b08d      	sub	sp, #52	; 0x34
   b4740:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4742:	f100 0704 	add.w	r7, r0, #4
   b4746:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b474a:	d012      	beq.n	b4772 <_ZNK9IPAddress7printToER5Print+0x3a>
   b474c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4750:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4754:	220a      	movs	r2, #10
   b4756:	4630      	mov	r0, r6
   b4758:	f000 f94f 	bl	b49fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b475c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b475e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4760:	d019      	beq.n	b4796 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4762:	2c00      	cmp	r4, #0
   b4764:	d0f4      	beq.n	b4750 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4766:	212e      	movs	r1, #46	; 0x2e
   b4768:	4630      	mov	r0, r6
   b476a:	f000 f937 	bl	b49dc <_ZN5Print5printEc>
   b476e:	4404      	add	r4, r0
   b4770:	e7ee      	b.n	b4750 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4772:	232f      	movs	r3, #47	; 0x2f
   b4774:	466a      	mov	r2, sp
   b4776:	4639      	mov	r1, r7
   b4778:	200a      	movs	r0, #10
		buf[0] = 0;
   b477a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b477e:	f7ff fd89 	bl	b4294 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4782:	4668      	mov	r0, sp
   b4784:	f000 fbe8 	bl	b4f58 <strlen>
   b4788:	6833      	ldr	r3, [r6, #0]
   b478a:	4602      	mov	r2, r0
   b478c:	68db      	ldr	r3, [r3, #12]
   b478e:	4669      	mov	r1, sp
   b4790:	4630      	mov	r0, r6
   b4792:	4798      	blx	r3
   b4794:	4604      	mov	r4, r0
    }
    return n;
}
   b4796:	4620      	mov	r0, r4
   b4798:	b00d      	add	sp, #52	; 0x34
   b479a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b479c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b479c:	b510      	push	{r4, lr}
   b479e:	4b05      	ldr	r3, [pc, #20]	; (b47b4 <_ZN9IPAddressC1Ev+0x18>)
   b47a0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b47a2:	2211      	movs	r2, #17
   b47a4:	f840 3b04 	str.w	r3, [r0], #4
   b47a8:	2100      	movs	r1, #0
   b47aa:	f000 fb9f 	bl	b4eec <memset>
}
   b47ae:	4620      	mov	r0, r4
   b47b0:	bd10      	pop	{r4, pc}
   b47b2:	bf00      	nop
   b47b4:	000b5108 	.word	0x000b5108

000b47b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b47b8:	4603      	mov	r3, r0
   b47ba:	4a07      	ldr	r2, [pc, #28]	; (b47d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b47bc:	b510      	push	{r4, lr}
   b47be:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b47c2:	f101 0210 	add.w	r2, r1, #16
   b47c6:	f851 4b04 	ldr.w	r4, [r1], #4
   b47ca:	f843 4b04 	str.w	r4, [r3], #4
   b47ce:	4291      	cmp	r1, r2
   b47d0:	d1f9      	bne.n	b47c6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b47d2:	780a      	ldrb	r2, [r1, #0]
   b47d4:	701a      	strb	r2, [r3, #0]
}
   b47d6:	bd10      	pop	{r4, pc}
   b47d8:	000b5108 	.word	0x000b5108

000b47dc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b47dc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b47de:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b47e2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b47e6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b47ea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b47ee:	2304      	movs	r3, #4
   b47f0:	6041      	str	r1, [r0, #4]
   b47f2:	7503      	strb	r3, [r0, #20]
}
   b47f4:	bd10      	pop	{r4, pc}
	...

000b47f8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b47f8:	b507      	push	{r0, r1, r2, lr}
   b47fa:	4b06      	ldr	r3, [pc, #24]	; (b4814 <_ZN9IPAddressC1EPKh+0x1c>)
   b47fc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b47fe:	78cb      	ldrb	r3, [r1, #3]
   b4800:	9300      	str	r3, [sp, #0]
   b4802:	788b      	ldrb	r3, [r1, #2]
   b4804:	784a      	ldrb	r2, [r1, #1]
   b4806:	7809      	ldrb	r1, [r1, #0]
   b4808:	f7ff ffe8 	bl	b47dc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b480c:	b003      	add	sp, #12
   b480e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4812:	bf00      	nop
   b4814:	000b5108 	.word	0x000b5108

000b4818 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4818:	4b01      	ldr	r3, [pc, #4]	; (b4820 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b481a:	4a02      	ldr	r2, [pc, #8]	; (b4824 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b481c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b481e:	4770      	bx	lr
   b4820:	2003e6d8 	.word	0x2003e6d8
   b4824:	000b5114 	.word	0x000b5114

000b4828 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4828:	2300      	movs	r3, #0
   b482a:	6840      	ldr	r0, [r0, #4]
   b482c:	461a      	mov	r2, r3
   b482e:	f7ff bddd 	b.w	b43ec <network_connect>

000b4832 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4832:	6840      	ldr	r0, [r0, #4]
   b4834:	2200      	movs	r2, #0
   b4836:	2102      	movs	r1, #2
   b4838:	f7ff bde8 	b.w	b440c <network_disconnect>

000b483c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b483c:	2200      	movs	r2, #0
   b483e:	6840      	ldr	r0, [r0, #4]
   b4840:	4611      	mov	r1, r2
   b4842:	f7ff bddb 	b.w	b43fc <network_connecting>

000b4846 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4846:	2200      	movs	r2, #0
   b4848:	6840      	ldr	r0, [r0, #4]
   b484a:	4611      	mov	r1, r2
   b484c:	f7ff bde6 	b.w	b441c <network_ready>

000b4850 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4850:	2300      	movs	r3, #0
   b4852:	6840      	ldr	r0, [r0, #4]
   b4854:	461a      	mov	r2, r3
   b4856:	4619      	mov	r1, r3
   b4858:	f7ff bde8 	b.w	b442c <network_on>

000b485c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b485c:	2300      	movs	r3, #0
   b485e:	6840      	ldr	r0, [r0, #4]
   b4860:	461a      	mov	r2, r3
   b4862:	4619      	mov	r1, r3
   b4864:	f7ff bdea 	b.w	b443c <network_off>

000b4868 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4868:	6840      	ldr	r0, [r0, #4]
   b486a:	2100      	movs	r1, #0
   b486c:	f7ff be0e 	b.w	b448c <network_is_on>

000b4870 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4870:	6840      	ldr	r0, [r0, #4]
   b4872:	2100      	movs	r1, #0
   b4874:	f7ff be12 	b.w	b449c <network_is_off>

000b4878 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4878:	6840      	ldr	r0, [r0, #4]
   b487a:	2200      	movs	r2, #0
   b487c:	f081 0101 	eor.w	r1, r1, #1
   b4880:	f7ff bde4 	b.w	b444c <network_listen>

000b4884 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4884:	6840      	ldr	r0, [r0, #4]
   b4886:	2200      	movs	r2, #0
   b4888:	f7ff bdf0 	b.w	b446c <network_set_listen_timeout>

000b488c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b488c:	2200      	movs	r2, #0
   b488e:	6840      	ldr	r0, [r0, #4]
   b4890:	4611      	mov	r1, r2
   b4892:	f7ff bdf3 	b.w	b447c <network_get_listen_timeout>

000b4896 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4896:	2200      	movs	r2, #0
   b4898:	6840      	ldr	r0, [r0, #4]
   b489a:	4611      	mov	r1, r2
   b489c:	f7ff bdde 	b.w	b445c <network_listening>

000b48a0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b48a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b48a4:	b095      	sub	sp, #84	; 0x54
   b48a6:	4614      	mov	r4, r2
   b48a8:	460d      	mov	r5, r1
   b48aa:	4607      	mov	r7, r0
    IPAddress addr;
   b48ac:	f7ff ff76 	bl	b479c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b48b0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b48b2:	221c      	movs	r2, #28
   b48b4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b48b6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b48b8:	f000 fb18 	bl	b4eec <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b48bc:	2340      	movs	r3, #64	; 0x40
   b48be:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b48c0:	4620      	mov	r0, r4
   b48c2:	466b      	mov	r3, sp
   b48c4:	aa0c      	add	r2, sp, #48	; 0x30
   b48c6:	2100      	movs	r1, #0
   b48c8:	f7ff fcf4 	bl	b42b4 <netdb_getaddrinfo>
    if (!r) {
   b48cc:	4604      	mov	r4, r0
   b48ce:	2800      	cmp	r0, #0
   b48d0:	d14b      	bne.n	b496a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b48d2:	4602      	mov	r2, r0
   b48d4:	2101      	movs	r1, #1
   b48d6:	6868      	ldr	r0, [r5, #4]
   b48d8:	f7ff fda0 	bl	b441c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b48dc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b48de:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b48e0:	4622      	mov	r2, r4
   b48e2:	6868      	ldr	r0, [r5, #4]
   b48e4:	f7ff fd9a 	bl	b441c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b48e8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b48ea:	4681      	mov	r9, r0
        bool ok = false;
   b48ec:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b48ee:	2e00      	cmp	r6, #0
   b48f0:	d03b      	beq.n	b496a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b48f2:	2900      	cmp	r1, #0
   b48f4:	d139      	bne.n	b496a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b48f6:	6873      	ldr	r3, [r6, #4]
   b48f8:	2b02      	cmp	r3, #2
   b48fa:	d003      	beq.n	b4904 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b48fc:	2b0a      	cmp	r3, #10
   b48fe:	d011      	beq.n	b4924 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4900:	69f6      	ldr	r6, [r6, #28]
   b4902:	e7f4      	b.n	b48ee <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4904:	f1b8 0f00 	cmp.w	r8, #0
   b4908:	d0fa      	beq.n	b4900 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b490a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b490c:	a806      	add	r0, sp, #24
   b490e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4910:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4912:	f7ff ff71 	bl	b47f8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4918:	1d3c      	adds	r4, r7, #4
   b491a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b491c:	682b      	ldr	r3, [r5, #0]
   b491e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4920:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4922:	e7ed      	b.n	b4900 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4924:	f1b9 0f00 	cmp.w	r9, #0
   b4928:	d0ea      	beq.n	b4900 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b492a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b492c:	2210      	movs	r2, #16
   b492e:	a801      	add	r0, sp, #4
   b4930:	f000 fadc 	bl	b4eec <memset>
                    a.v = 6;
   b4934:	2306      	movs	r3, #6
   b4936:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b493a:	ad01      	add	r5, sp, #4
   b493c:	f104 0308 	add.w	r3, r4, #8
   b4940:	3418      	adds	r4, #24
   b4942:	6818      	ldr	r0, [r3, #0]
   b4944:	6859      	ldr	r1, [r3, #4]
   b4946:	462a      	mov	r2, r5
   b4948:	c203      	stmia	r2!, {r0, r1}
   b494a:	3308      	adds	r3, #8
   b494c:	42a3      	cmp	r3, r4
   b494e:	4615      	mov	r5, r2
   b4950:	d1f7      	bne.n	b4942 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4952:	a901      	add	r1, sp, #4
   b4954:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4956:	ad07      	add	r5, sp, #28
   b4958:	f7ff ff2e 	bl	b47b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b495c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b495e:	1d3c      	adds	r4, r7, #4
   b4960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4962:	682b      	ldr	r3, [r5, #0]
   b4964:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4966:	4649      	mov	r1, r9
   b4968:	e7ca      	b.n	b4900 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b496a:	9800      	ldr	r0, [sp, #0]
   b496c:	f7ff fc9a 	bl	b42a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4970:	4638      	mov	r0, r7
   b4972:	b015      	add	sp, #84	; 0x54
   b4974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4978 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4978:	4b02      	ldr	r3, [pc, #8]	; (b4984 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b497a:	4a03      	ldr	r2, [pc, #12]	; (b4988 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b497c:	601a      	str	r2, [r3, #0]
   b497e:	2200      	movs	r2, #0
   b4980:	605a      	str	r2, [r3, #4]

} // spark
   b4982:	4770      	bx	lr
   b4984:	2003e6dc 	.word	0x2003e6dc
   b4988:	000b5120 	.word	0x000b5120

000b498c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b498e:	4606      	mov	r6, r0
   b4990:	460d      	mov	r5, r1
  size_t n = 0;
   b4992:	188f      	adds	r7, r1, r2
   b4994:	2400      	movs	r4, #0
  while (size--) {
   b4996:	42bd      	cmp	r5, r7
   b4998:	d00c      	beq.n	b49b4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b499a:	6833      	ldr	r3, [r6, #0]
   b499c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b49a0:	689b      	ldr	r3, [r3, #8]
   b49a2:	4630      	mov	r0, r6
   b49a4:	4798      	blx	r3
     if (chunk>=0)
   b49a6:	1e03      	subs	r3, r0, #0
   b49a8:	db01      	blt.n	b49ae <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b49aa:	441c      	add	r4, r3
  while (size--) {
   b49ac:	e7f3      	b.n	b4996 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b49ae:	2c00      	cmp	r4, #0
   b49b0:	bf08      	it	eq
   b49b2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b49b4:	4620      	mov	r0, r4
   b49b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b49b8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b49b8:	b513      	push	{r0, r1, r4, lr}
   b49ba:	4604      	mov	r4, r0
    }
   b49bc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b49be:	b159      	cbz	r1, b49d8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b49c0:	9101      	str	r1, [sp, #4]
   b49c2:	f000 fac9 	bl	b4f58 <strlen>
   b49c6:	6823      	ldr	r3, [r4, #0]
   b49c8:	9901      	ldr	r1, [sp, #4]
   b49ca:	68db      	ldr	r3, [r3, #12]
   b49cc:	4602      	mov	r2, r0
   b49ce:	4620      	mov	r0, r4
    }
   b49d0:	b002      	add	sp, #8
   b49d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b49d6:	4718      	bx	r3
    }
   b49d8:	b002      	add	sp, #8
   b49da:	bd10      	pop	{r4, pc}

000b49dc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b49dc:	6803      	ldr	r3, [r0, #0]
   b49de:	689b      	ldr	r3, [r3, #8]
   b49e0:	4718      	bx	r3

000b49e2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b49e2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b49e4:	210d      	movs	r1, #13
{
   b49e6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b49e8:	f7ff fff8 	bl	b49dc <_ZN5Print5printEc>
  n += print('\n');
   b49ec:	210a      	movs	r1, #10
  size_t n = print('\r');
   b49ee:	4604      	mov	r4, r0
  n += print('\n');
   b49f0:	4628      	mov	r0, r5
   b49f2:	f7ff fff3 	bl	b49dc <_ZN5Print5printEc>
  return n;
}
   b49f6:	4420      	add	r0, r4
   b49f8:	bd38      	pop	{r3, r4, r5, pc}

000b49fa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b49fa:	b530      	push	{r4, r5, lr}
   b49fc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b49fe:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4a00:	2a01      	cmp	r2, #1
  *str = '\0';
   b4a02:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4a06:	bf98      	it	ls
   b4a08:	220a      	movls	r2, #10
   b4a0a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4a0c:	460d      	mov	r5, r1
   b4a0e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4a12:	fb01 5312 	mls	r3, r1, r2, r5
   b4a16:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4a1a:	2b09      	cmp	r3, #9
   b4a1c:	bf94      	ite	ls
   b4a1e:	3330      	addls	r3, #48	; 0x30
   b4a20:	3337      	addhi	r3, #55	; 0x37
   b4a22:	b2db      	uxtb	r3, r3
  } while(n);
   b4a24:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4a26:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4a2a:	d9ef      	bls.n	b4a0c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4a2c:	4621      	mov	r1, r4
   b4a2e:	f7ff ffc3 	bl	b49b8 <_ZN5Print5writeEPKc>
}
   b4a32:	b00b      	add	sp, #44	; 0x2c
   b4a34:	bd30      	pop	{r4, r5, pc}

000b4a36 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4a3a:	b086      	sub	sp, #24
   b4a3c:	af00      	add	r7, sp, #0
   b4a3e:	4605      	mov	r5, r0
   b4a40:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4a42:	1d38      	adds	r0, r7, #4
   b4a44:	2114      	movs	r1, #20
{
   b4a46:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4a48:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4a4a:	f7ff fd3f 	bl	b44cc <vsnprintf>

    if (n<bufsize)
   b4a4e:	2813      	cmp	r0, #19
   b4a50:	d80e      	bhi.n	b4a70 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4a52:	1d39      	adds	r1, r7, #4
   b4a54:	4628      	mov	r0, r5
   b4a56:	f7ff ffaf 	bl	b49b8 <_ZN5Print5writeEPKc>
   b4a5a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4a5c:	b11e      	cbz	r6, b4a66 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4a5e:	4628      	mov	r0, r5
   b4a60:	f7ff ffbf 	bl	b49e2 <_ZN5Print7printlnEv>
   b4a64:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4a66:	4620      	mov	r0, r4
   b4a68:	3718      	adds	r7, #24
   b4a6a:	46bd      	mov	sp, r7
   b4a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4a70:	f100 0308 	add.w	r3, r0, #8
   b4a74:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4a78:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4a7a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4a7e:	4622      	mov	r2, r4
   b4a80:	1c41      	adds	r1, r0, #1
   b4a82:	683b      	ldr	r3, [r7, #0]
   b4a84:	4668      	mov	r0, sp
   b4a86:	f7ff fd21 	bl	b44cc <vsnprintf>
  return write(str);
   b4a8a:	4669      	mov	r1, sp
   b4a8c:	4628      	mov	r0, r5
   b4a8e:	f7ff ff93 	bl	b49b8 <_ZN5Print5writeEPKc>
   b4a92:	4604      	mov	r4, r0
   b4a94:	46c5      	mov	sp, r8
   b4a96:	e7e1      	b.n	b4a5c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4a98 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4a98:	4b01      	ldr	r3, [pc, #4]	; (b4aa0 <_GLOBAL__sub_I_RGB+0x8>)
   b4a9a:	2200      	movs	r2, #0
   b4a9c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4a9e:	4770      	bx	lr
   b4aa0:	2003e6e4 	.word	0x2003e6e4

000b4aa4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4aa4:	4b05      	ldr	r3, [pc, #20]	; (b4abc <_GLOBAL__sub_I_System+0x18>)
   b4aa6:	2202      	movs	r2, #2
   b4aa8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4aaa:	4b05      	ldr	r3, [pc, #20]	; (b4ac0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4aac:	4a05      	ldr	r2, [pc, #20]	; (b4ac4 <_GLOBAL__sub_I_System+0x20>)
   b4aae:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4ab0:	2000      	movs	r0, #0
   b4ab2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4ab6:	f7ff bc75 	b.w	b43a4 <set_system_mode>
   b4aba:	bf00      	nop
   b4abc:	2003e700 	.word	0x2003e700
   b4ac0:	2003e6f4 	.word	0x2003e6f4
   b4ac4:	ffff0000 	.word	0xffff0000

000b4ac8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4ac8:	4b02      	ldr	r3, [pc, #8]	; (b4ad4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4aca:	681a      	ldr	r2, [r3, #0]
   b4acc:	4b02      	ldr	r3, [pc, #8]	; (b4ad8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4ace:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4ad0:	4770      	bx	lr
   b4ad2:	bf00      	nop
   b4ad4:	2003e60c 	.word	0x2003e60c
   b4ad8:	2003e704 	.word	0x2003e704

000b4adc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4adc:	4770      	bx	lr

000b4ade <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4ade:	7441      	strb	r1, [r0, #17]
}
   b4ae0:	4770      	bx	lr

000b4ae2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4ae2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4ae4:	7c00      	ldrb	r0, [r0, #16]
   b4ae6:	f7ff fc15 	bl	b4314 <hal_usart_available_data_for_write>
}
   b4aea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4aee:	bd08      	pop	{r3, pc}

000b4af0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4af0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4af2:	7c00      	ldrb	r0, [r0, #16]
   b4af4:	f7ff fbee 	bl	b42d4 <hal_usart_available>
}
   b4af8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4afc:	bd08      	pop	{r3, pc}

000b4afe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4afe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4b00:	7c00      	ldrb	r0, [r0, #16]
   b4b02:	f7ff fbf7 	bl	b42f4 <hal_usart_peek>
}
   b4b06:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4b0a:	bd08      	pop	{r3, pc}

000b4b0c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4b0c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4b0e:	7c00      	ldrb	r0, [r0, #16]
   b4b10:	f7ff fbe8 	bl	b42e4 <hal_usart_read>
}
   b4b14:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4b18:	bd08      	pop	{r3, pc}

000b4b1a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4b1a:	7c00      	ldrb	r0, [r0, #16]
   b4b1c:	f7ff bbf2 	b.w	b4304 <hal_usart_flush>

000b4b20 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4b22:	7c45      	ldrb	r5, [r0, #17]
{
   b4b24:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4b26:	b12d      	cbz	r5, b4b34 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4b28:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4b2a:	b003      	add	sp, #12
   b4b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4b30:	f7ff bbc8 	b.w	b42c4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4b34:	7c00      	ldrb	r0, [r0, #16]
   b4b36:	9101      	str	r1, [sp, #4]
   b4b38:	f7ff fbec 	bl	b4314 <hal_usart_available_data_for_write>
   b4b3c:	2800      	cmp	r0, #0
   b4b3e:	9901      	ldr	r1, [sp, #4]
   b4b40:	dcf2      	bgt.n	b4b28 <_ZN11USARTSerial5writeEh+0x8>
}
   b4b42:	4628      	mov	r0, r5
   b4b44:	b003      	add	sp, #12
   b4b46:	bd30      	pop	{r4, r5, pc}

000b4b48 <_ZN11USARTSerialD0Ev>:
   b4b48:	b510      	push	{r4, lr}
   b4b4a:	2114      	movs	r1, #20
   b4b4c:	4604      	mov	r4, r0
   b4b4e:	f7ff faa2 	bl	b4096 <_ZdlPvj>
   b4b52:	4620      	mov	r0, r4
   b4b54:	bd10      	pop	{r4, pc}
	...

000b4b58 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4b58:	b510      	push	{r4, lr}
   b4b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4b5e:	4604      	mov	r4, r0
   b4b60:	4608      	mov	r0, r1
   b4b62:	4611      	mov	r1, r2
   b4b64:	2200      	movs	r2, #0
   b4b66:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4b6a:	4b04      	ldr	r3, [pc, #16]	; (b4b7c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4b6c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4b6e:	2301      	movs	r3, #1
  _serial = serial;
   b4b70:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4b72:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4b74:	f7ff fbd6 	bl	b4324 <hal_usart_init_ex>
}
   b4b78:	4620      	mov	r0, r4
   b4b7a:	bd10      	pop	{r4, pc}
   b4b7c:	000b5178 	.word	0x000b5178

000b4b80 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4b80:	7441      	strb	r1, [r0, #17]
}
   b4b82:	4770      	bx	lr

000b4b84 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4b84:	4770      	bx	lr

000b4b86 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4b86:	4770      	bx	lr

000b4b88 <_ZN9USBSerial4readEv>:
{
   b4b88:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4b8a:	2100      	movs	r1, #0
   b4b8c:	7c00      	ldrb	r0, [r0, #16]
   b4b8e:	f7ff fbf1 	bl	b4374 <HAL_USB_USART_Receive_Data>
}
   b4b92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4b96:	bd08      	pop	{r3, pc}

000b4b98 <_ZN9USBSerial4peekEv>:
{
   b4b98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4b9a:	2101      	movs	r1, #1
   b4b9c:	7c00      	ldrb	r0, [r0, #16]
   b4b9e:	f7ff fbe9 	bl	b4374 <HAL_USB_USART_Receive_Data>
}
   b4ba2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4ba6:	bd08      	pop	{r3, pc}

000b4ba8 <_ZN9USBSerial17availableForWriteEv>:
{
   b4ba8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4baa:	7c00      	ldrb	r0, [r0, #16]
   b4bac:	f7ff fbda 	bl	b4364 <HAL_USB_USART_Available_Data_For_Write>
}
   b4bb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4bb4:	bd08      	pop	{r3, pc}

000b4bb6 <_ZN9USBSerial9availableEv>:
{
   b4bb6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4bb8:	7c00      	ldrb	r0, [r0, #16]
   b4bba:	f7ff fbcb 	bl	b4354 <HAL_USB_USART_Available_Data>
}
   b4bbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4bc2:	bd08      	pop	{r3, pc}

000b4bc4 <_ZN9USBSerial5writeEh>:
{
   b4bc4:	b513      	push	{r0, r1, r4, lr}
   b4bc6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4bc8:	7c00      	ldrb	r0, [r0, #16]
{
   b4bca:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4bcc:	f7ff fbca 	bl	b4364 <HAL_USB_USART_Available_Data_For_Write>
   b4bd0:	2800      	cmp	r0, #0
   b4bd2:	9901      	ldr	r1, [sp, #4]
   b4bd4:	dc01      	bgt.n	b4bda <_ZN9USBSerial5writeEh+0x16>
   b4bd6:	7c60      	ldrb	r0, [r4, #17]
   b4bd8:	b120      	cbz	r0, b4be4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4bda:	7c20      	ldrb	r0, [r4, #16]
   b4bdc:	f7ff fbd2 	bl	b4384 <HAL_USB_USART_Send_Data>
   b4be0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4be4:	b002      	add	sp, #8
   b4be6:	bd10      	pop	{r4, pc}

000b4be8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4be8:	7c00      	ldrb	r0, [r0, #16]
   b4bea:	f7ff bbd3 	b.w	b4394 <HAL_USB_USART_Flush_Data>

000b4bee <_ZN9USBSerialD0Ev>:
   b4bee:	b510      	push	{r4, lr}
   b4bf0:	2114      	movs	r1, #20
   b4bf2:	4604      	mov	r4, r0
   b4bf4:	f7ff fa4f 	bl	b4096 <_ZdlPvj>
   b4bf8:	4620      	mov	r0, r4
   b4bfa:	bd10      	pop	{r4, pc}

000b4bfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4bfc:	b510      	push	{r4, lr}
   b4bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4c02:	4604      	mov	r4, r0
   b4c04:	4608      	mov	r0, r1
   b4c06:	2100      	movs	r1, #0
   b4c08:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4c0c:	4b04      	ldr	r3, [pc, #16]	; (b4c20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4c0e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4c10:	2301      	movs	r3, #1
  _serial = serial;
   b4c12:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4c14:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4c16:	4611      	mov	r1, r2
   b4c18:	f7ff fb8c 	bl	b4334 <HAL_USB_USART_Init>
}
   b4c1c:	4620      	mov	r0, r4
   b4c1e:	bd10      	pop	{r4, pc}
   b4c20:	000b51a8 	.word	0x000b51a8

000b4c24 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4c24:	7c00      	ldrb	r0, [r0, #16]
   b4c26:	2200      	movs	r2, #0
   b4c28:	f7ff bb8c 	b.w	b4344 <HAL_USB_USART_Begin>

000b4c2c <_Z19acquireSerialBufferv>:
{
   b4c2c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4c2e:	2214      	movs	r2, #20
{
   b4c30:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4c32:	2100      	movs	r1, #0
   b4c34:	f000 f95a 	bl	b4eec <memset>
}
   b4c38:	4620      	mov	r0, r4
   b4c3a:	bd10      	pop	{r4, pc}

000b4c3c <_Z16_fetch_usbserialv>:
{
   b4c3c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4c3e:	4c0f      	ldr	r4, [pc, #60]	; (b4c7c <_Z16_fetch_usbserialv+0x40>)
{
   b4c40:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4c42:	a803      	add	r0, sp, #12
   b4c44:	f7ff fff2 	bl	b4c2c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4c48:	7821      	ldrb	r1, [r4, #0]
   b4c4a:	f3bf 8f5b 	dmb	ish
   b4c4e:	f011 0101 	ands.w	r1, r1, #1
   b4c52:	d10f      	bne.n	b4c74 <_Z16_fetch_usbserialv+0x38>
   b4c54:	4620      	mov	r0, r4
   b4c56:	9101      	str	r1, [sp, #4]
   b4c58:	f7ff fa1f 	bl	b409a <__cxa_guard_acquire>
   b4c5c:	9901      	ldr	r1, [sp, #4]
   b4c5e:	b148      	cbz	r0, b4c74 <_Z16_fetch_usbserialv+0x38>
   b4c60:	aa03      	add	r2, sp, #12
   b4c62:	4807      	ldr	r0, [pc, #28]	; (b4c80 <_Z16_fetch_usbserialv+0x44>)
   b4c64:	f7ff ffca 	bl	b4bfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4c68:	4620      	mov	r0, r4
   b4c6a:	f7ff fa1b 	bl	b40a4 <__cxa_guard_release>
   b4c6e:	4805      	ldr	r0, [pc, #20]	; (b4c84 <_Z16_fetch_usbserialv+0x48>)
   b4c70:	f000 f928 	bl	b4ec4 <atexit>
	return _usbserial;
}
   b4c74:	4802      	ldr	r0, [pc, #8]	; (b4c80 <_Z16_fetch_usbserialv+0x44>)
   b4c76:	b008      	add	sp, #32
   b4c78:	bd10      	pop	{r4, pc}
   b4c7a:	bf00      	nop
   b4c7c:	2003e708 	.word	0x2003e708
   b4c80:	2003e70c 	.word	0x2003e70c
   b4c84:	000b4b85 	.word	0x000b4b85

000b4c88 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4c88:	4b01      	ldr	r3, [pc, #4]	; (b4c90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4c8a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4c8c:	4770      	bx	lr
   b4c8e:	bf00      	nop
   b4c90:	2003e610 	.word	0x2003e610

000b4c94 <serialEventRun>:
{
   b4c94:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4c96:	4b0b      	ldr	r3, [pc, #44]	; (b4cc4 <serialEventRun+0x30>)
   b4c98:	b143      	cbz	r3, b4cac <serialEventRun+0x18>
   b4c9a:	f7ff ffcf 	bl	b4c3c <_Z16_fetch_usbserialv>
   b4c9e:	6803      	ldr	r3, [r0, #0]
   b4ca0:	691b      	ldr	r3, [r3, #16]
   b4ca2:	4798      	blx	r3
   b4ca4:	2800      	cmp	r0, #0
   b4ca6:	dd01      	ble.n	b4cac <serialEventRun+0x18>
        serialEvent();
   b4ca8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4cac:	4b06      	ldr	r3, [pc, #24]	; (b4cc8 <serialEventRun+0x34>)
   b4cae:	b143      	cbz	r3, b4cc2 <serialEventRun+0x2e>
   b4cb0:	f000 f8e2 	bl	b4e78 <_Z22__fetch_global_Serial1v>
   b4cb4:	6803      	ldr	r3, [r0, #0]
   b4cb6:	691b      	ldr	r3, [r3, #16]
   b4cb8:	4798      	blx	r3
   b4cba:	2800      	cmp	r0, #0
   b4cbc:	dd01      	ble.n	b4cc2 <serialEventRun+0x2e>
        serialEvent1();
   b4cbe:	f3af 8000 	nop.w
}
   b4cc2:	bd08      	pop	{r3, pc}
	...

000b4ccc <_post_loop>:
{
   b4ccc:	b508      	push	{r3, lr}
	serialEventRun();
   b4cce:	f7ff ffe1 	bl	b4c94 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4cd2:	f7ff fa8f 	bl	b41f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4cd6:	4b01      	ldr	r3, [pc, #4]	; (b4cdc <_post_loop+0x10>)
   b4cd8:	6018      	str	r0, [r3, #0]
}
   b4cda:	bd08      	pop	{r3, pc}
   b4cdc:	2003e728 	.word	0x2003e728

000b4ce0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4ce0:	4805      	ldr	r0, [pc, #20]	; (b4cf8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4ce2:	4a06      	ldr	r2, [pc, #24]	; (b4cfc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4ce4:	4906      	ldr	r1, [pc, #24]	; (b4d00 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4ce6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4ce8:	1a12      	subs	r2, r2, r0
   b4cea:	f000 f8f1 	bl	b4ed0 <memcpy>
    __backup_sram_signature = signature;
   b4cee:	4b05      	ldr	r3, [pc, #20]	; (b4d04 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4cf0:	4a05      	ldr	r2, [pc, #20]	; (b4d08 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4cf2:	601a      	str	r2, [r3, #0]
}
   b4cf4:	bd08      	pop	{r3, pc}
   b4cf6:	bf00      	nop
   b4cf8:	2003f400 	.word	0x2003f400
   b4cfc:	2003f404 	.word	0x2003f404
   b4d00:	000b5294 	.word	0x000b5294
   b4d04:	2003f400 	.word	0x2003f400
   b4d08:	9a271c1e 	.word	0x9a271c1e

000b4d0c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4d0c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4d0e:	2300      	movs	r3, #0
   b4d10:	9300      	str	r3, [sp, #0]
   b4d12:	461a      	mov	r2, r3
   b4d14:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4d18:	f7ff fb56 	bl	b43c8 <system_ctrl_set_result>
}
   b4d1c:	b003      	add	sp, #12
   b4d1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4d24 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4d24:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4d26:	8843      	ldrh	r3, [r0, #2]
   b4d28:	2b0a      	cmp	r3, #10
   b4d2a:	d008      	beq.n	b4d3e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4d2c:	2b50      	cmp	r3, #80	; 0x50
   b4d2e:	d10b      	bne.n	b4d48 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4d30:	4b09      	ldr	r3, [pc, #36]	; (b4d58 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4d32:	681b      	ldr	r3, [r3, #0]
   b4d34:	b14b      	cbz	r3, b4d4a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4d36:	b003      	add	sp, #12
   b4d38:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4d3c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4d3e:	f7ff ffe5 	bl	b4d0c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4d42:	b003      	add	sp, #12
   b4d44:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4d48:	2300      	movs	r3, #0
   b4d4a:	9300      	str	r3, [sp, #0]
   b4d4c:	461a      	mov	r2, r3
   b4d4e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4d52:	f7ff fb39 	bl	b43c8 <system_ctrl_set_result>
}
   b4d56:	e7f4      	b.n	b4d42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4d58:	2003e724 	.word	0x2003e724

000b4d5c <module_user_init_hook>:
{
   b4d5c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4d5e:	4812      	ldr	r0, [pc, #72]	; (b4da8 <module_user_init_hook+0x4c>)
   b4d60:	2100      	movs	r1, #0
   b4d62:	f7ff fbc3 	bl	b44ec <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4d66:	4b11      	ldr	r3, [pc, #68]	; (b4dac <module_user_init_hook+0x50>)
   b4d68:	681a      	ldr	r2, [r3, #0]
   b4d6a:	4b11      	ldr	r3, [pc, #68]	; (b4db0 <module_user_init_hook+0x54>)
   b4d6c:	429a      	cmp	r2, r3
   b4d6e:	4b11      	ldr	r3, [pc, #68]	; (b4db4 <module_user_init_hook+0x58>)
   b4d70:	bf0c      	ite	eq
   b4d72:	2201      	moveq	r2, #1
   b4d74:	2200      	movne	r2, #0
   b4d76:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4d78:	d001      	beq.n	b4d7e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4d7a:	f7ff ffb1 	bl	b4ce0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4d7e:	f7ff fa31 	bl	b41e4 <HAL_RNG_GetRandomNumber>
   b4d82:	4604      	mov	r4, r0
    srand(seed);
   b4d84:	f000 f8ba 	bl	b4efc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4d88:	4b0b      	ldr	r3, [pc, #44]	; (b4db8 <module_user_init_hook+0x5c>)
   b4d8a:	b113      	cbz	r3, b4d92 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4d8c:	4620      	mov	r0, r4
   b4d8e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4d92:	2100      	movs	r1, #0
   b4d94:	4808      	ldr	r0, [pc, #32]	; (b4db8 <module_user_init_hook+0x5c>)
   b4d96:	f7ff fb21 	bl	b43dc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4d9e:	4807      	ldr	r0, [pc, #28]	; (b4dbc <module_user_init_hook+0x60>)
   b4da0:	2100      	movs	r1, #0
   b4da2:	f7ff bb07 	b.w	b43b4 <system_ctrl_set_app_request_handler>
   b4da6:	bf00      	nop
   b4da8:	000b4c89 	.word	0x000b4c89
   b4dac:	2003f400 	.word	0x2003f400
   b4db0:	9a271c1e 	.word	0x9a271c1e
   b4db4:	2003e720 	.word	0x2003e720
   b4db8:	00000000 	.word	0x00000000
   b4dbc:	000b4d25 	.word	0x000b4d25

000b4dc0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4dc0:	4770      	bx	lr
	...

000b4dc4 <_Z17acquireWireBufferv>:
{
   b4dc4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b4dc6:	4b0a      	ldr	r3, [pc, #40]	; (b4df0 <_Z17acquireWireBufferv+0x2c>)
   b4dc8:	6003      	str	r3, [r0, #0]
   b4dca:	2301      	movs	r3, #1
{
   b4dcc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b4dce:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b4dd0:	4908      	ldr	r1, [pc, #32]	; (b4df4 <_Z17acquireWireBufferv+0x30>)
   b4dd2:	2020      	movs	r0, #32
   b4dd4:	f000 f874 	bl	b4ec0 <_ZnajRKSt9nothrow_t>
	};
   b4dd8:	2520      	movs	r5, #32
   b4dda:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b4ddc:	4905      	ldr	r1, [pc, #20]	; (b4df4 <_Z17acquireWireBufferv+0x30>)
	};
   b4dde:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b4de0:	4628      	mov	r0, r5
   b4de2:	f000 f86d 	bl	b4ec0 <_ZnajRKSt9nothrow_t>
	};
   b4de6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b4dea:	4620      	mov	r0, r4
   b4dec:	bd38      	pop	{r3, r4, r5, pc}
   b4dee:	bf00      	nop
   b4df0:	00010018 	.word	0x00010018
   b4df4:	000b51d0 	.word	0x000b51d0

000b4df8 <_Z19__fetch_global_Wirev>:
{
   b4df8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4dfa:	4d0e      	ldr	r5, [pc, #56]	; (b4e34 <_Z19__fetch_global_Wirev+0x3c>)
   b4dfc:	7829      	ldrb	r1, [r5, #0]
   b4dfe:	f3bf 8f5b 	dmb	ish
   b4e02:	f011 0401 	ands.w	r4, r1, #1
{
   b4e06:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4e08:	d111      	bne.n	b4e2e <_Z19__fetch_global_Wirev+0x36>
   b4e0a:	4628      	mov	r0, r5
   b4e0c:	f7ff f945 	bl	b409a <__cxa_guard_acquire>
   b4e10:	b168      	cbz	r0, b4e2e <_Z19__fetch_global_Wirev+0x36>
   b4e12:	4668      	mov	r0, sp
   b4e14:	f7ff ffd6 	bl	b4dc4 <_Z17acquireWireBufferv>
   b4e18:	466a      	mov	r2, sp
   b4e1a:	4621      	mov	r1, r4
   b4e1c:	4806      	ldr	r0, [pc, #24]	; (b4e38 <_Z19__fetch_global_Wirev+0x40>)
   b4e1e:	f7ff fc2b 	bl	b4678 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b4e22:	4628      	mov	r0, r5
   b4e24:	f7ff f93e 	bl	b40a4 <__cxa_guard_release>
   b4e28:	4804      	ldr	r0, [pc, #16]	; (b4e3c <_Z19__fetch_global_Wirev+0x44>)
   b4e2a:	f000 f84b 	bl	b4ec4 <atexit>
	return wire;
}
   b4e2e:	4802      	ldr	r0, [pc, #8]	; (b4e38 <_Z19__fetch_global_Wirev+0x40>)
   b4e30:	b007      	add	sp, #28
   b4e32:	bd30      	pop	{r4, r5, pc}
   b4e34:	2003e72c 	.word	0x2003e72c
   b4e38:	2003e730 	.word	0x2003e730
   b4e3c:	000b4dc1 	.word	0x000b4dc1

000b4e40 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4e40:	4770      	bx	lr
	...

000b4e44 <_Z20acquireSerial1Bufferv>:
{
   b4e44:	b538      	push	{r3, r4, r5, lr}
   b4e46:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b4e48:	2514      	movs	r5, #20
   b4e4a:	462a      	mov	r2, r5
   b4e4c:	2100      	movs	r1, #0
   b4e4e:	f000 f84d 	bl	b4eec <memset>
   b4e52:	8025      	strh	r5, [r4, #0]
   b4e54:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4e56:	4907      	ldr	r1, [pc, #28]	; (b4e74 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b4e58:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4e5a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b4e5c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4e5e:	f000 f82f 	bl	b4ec0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4e62:	4904      	ldr	r1, [pc, #16]	; (b4e74 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b4e64:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4e66:	4628      	mov	r0, r5
   b4e68:	f000 f82a 	bl	b4ec0 <_ZnajRKSt9nothrow_t>
    };
   b4e6c:	60e0      	str	r0, [r4, #12]
}
   b4e6e:	4620      	mov	r0, r4
   b4e70:	bd38      	pop	{r3, r4, r5, pc}
   b4e72:	bf00      	nop
   b4e74:	000b51d0 	.word	0x000b51d0

000b4e78 <_Z22__fetch_global_Serial1v>:
{
   b4e78:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4e7a:	4d0e      	ldr	r5, [pc, #56]	; (b4eb4 <_Z22__fetch_global_Serial1v+0x3c>)
   b4e7c:	7829      	ldrb	r1, [r5, #0]
   b4e7e:	f3bf 8f5b 	dmb	ish
   b4e82:	f011 0401 	ands.w	r4, r1, #1
{
   b4e86:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4e88:	d111      	bne.n	b4eae <_Z22__fetch_global_Serial1v+0x36>
   b4e8a:	4628      	mov	r0, r5
   b4e8c:	f7ff f905 	bl	b409a <__cxa_guard_acquire>
   b4e90:	b168      	cbz	r0, b4eae <_Z22__fetch_global_Serial1v+0x36>
   b4e92:	a801      	add	r0, sp, #4
   b4e94:	f7ff ffd6 	bl	b4e44 <_Z20acquireSerial1Bufferv>
   b4e98:	aa01      	add	r2, sp, #4
   b4e9a:	4621      	mov	r1, r4
   b4e9c:	4806      	ldr	r0, [pc, #24]	; (b4eb8 <_Z22__fetch_global_Serial1v+0x40>)
   b4e9e:	f7ff fe5b 	bl	b4b58 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b4ea2:	4628      	mov	r0, r5
   b4ea4:	f7ff f8fe 	bl	b40a4 <__cxa_guard_release>
   b4ea8:	4804      	ldr	r0, [pc, #16]	; (b4ebc <_Z22__fetch_global_Serial1v+0x44>)
   b4eaa:	f000 f80b 	bl	b4ec4 <atexit>
    return serial1;
}
   b4eae:	4802      	ldr	r0, [pc, #8]	; (b4eb8 <_Z22__fetch_global_Serial1v+0x40>)
   b4eb0:	b007      	add	sp, #28
   b4eb2:	bd30      	pop	{r4, r5, pc}
   b4eb4:	2003e744 	.word	0x2003e744
   b4eb8:	2003e748 	.word	0x2003e748
   b4ebc:	000b4e41 	.word	0x000b4e41

000b4ec0 <_ZnajRKSt9nothrow_t>:
   b4ec0:	f7ff b8e7 	b.w	b4092 <_Znaj>

000b4ec4 <atexit>:
   b4ec4:	2300      	movs	r3, #0
   b4ec6:	4601      	mov	r1, r0
   b4ec8:	461a      	mov	r2, r3
   b4eca:	4618      	mov	r0, r3
   b4ecc:	f000 b84c 	b.w	b4f68 <__register_exitproc>

000b4ed0 <memcpy>:
   b4ed0:	440a      	add	r2, r1
   b4ed2:	4291      	cmp	r1, r2
   b4ed4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b4ed8:	d100      	bne.n	b4edc <memcpy+0xc>
   b4eda:	4770      	bx	lr
   b4edc:	b510      	push	{r4, lr}
   b4ede:	f811 4b01 	ldrb.w	r4, [r1], #1
   b4ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b4ee6:	4291      	cmp	r1, r2
   b4ee8:	d1f9      	bne.n	b4ede <memcpy+0xe>
   b4eea:	bd10      	pop	{r4, pc}

000b4eec <memset>:
   b4eec:	4402      	add	r2, r0
   b4eee:	4603      	mov	r3, r0
   b4ef0:	4293      	cmp	r3, r2
   b4ef2:	d100      	bne.n	b4ef6 <memset+0xa>
   b4ef4:	4770      	bx	lr
   b4ef6:	f803 1b01 	strb.w	r1, [r3], #1
   b4efa:	e7f9      	b.n	b4ef0 <memset+0x4>

000b4efc <srand>:
   b4efc:	b538      	push	{r3, r4, r5, lr}
   b4efe:	4b10      	ldr	r3, [pc, #64]	; (b4f40 <srand+0x44>)
   b4f00:	681d      	ldr	r5, [r3, #0]
   b4f02:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b4f04:	4604      	mov	r4, r0
   b4f06:	b9b3      	cbnz	r3, b4f36 <srand+0x3a>
   b4f08:	2018      	movs	r0, #24
   b4f0a:	f7ff facf 	bl	b44ac <malloc>
   b4f0e:	4602      	mov	r2, r0
   b4f10:	63a8      	str	r0, [r5, #56]	; 0x38
   b4f12:	b920      	cbnz	r0, b4f1e <srand+0x22>
   b4f14:	4b0b      	ldr	r3, [pc, #44]	; (b4f44 <srand+0x48>)
   b4f16:	480c      	ldr	r0, [pc, #48]	; (b4f48 <srand+0x4c>)
   b4f18:	2142      	movs	r1, #66	; 0x42
   b4f1a:	f7ff fadf 	bl	b44dc <__assert_func>
   b4f1e:	490b      	ldr	r1, [pc, #44]	; (b4f4c <srand+0x50>)
   b4f20:	4b0b      	ldr	r3, [pc, #44]	; (b4f50 <srand+0x54>)
   b4f22:	e9c0 1300 	strd	r1, r3, [r0]
   b4f26:	4b0b      	ldr	r3, [pc, #44]	; (b4f54 <srand+0x58>)
   b4f28:	6083      	str	r3, [r0, #8]
   b4f2a:	230b      	movs	r3, #11
   b4f2c:	8183      	strh	r3, [r0, #12]
   b4f2e:	2100      	movs	r1, #0
   b4f30:	2001      	movs	r0, #1
   b4f32:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b4f36:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b4f38:	2200      	movs	r2, #0
   b4f3a:	611c      	str	r4, [r3, #16]
   b4f3c:	615a      	str	r2, [r3, #20]
   b4f3e:	bd38      	pop	{r3, r4, r5, pc}
   b4f40:	2003e610 	.word	0x2003e610
   b4f44:	000b51d1 	.word	0x000b51d1
   b4f48:	000b51e8 	.word	0x000b51e8
   b4f4c:	abcd330e 	.word	0xabcd330e
   b4f50:	e66d1234 	.word	0xe66d1234
   b4f54:	0005deec 	.word	0x0005deec

000b4f58 <strlen>:
   b4f58:	4603      	mov	r3, r0
   b4f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4f5e:	2a00      	cmp	r2, #0
   b4f60:	d1fb      	bne.n	b4f5a <strlen+0x2>
   b4f62:	1a18      	subs	r0, r3, r0
   b4f64:	3801      	subs	r0, #1
   b4f66:	4770      	bx	lr

000b4f68 <__register_exitproc>:
   b4f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4f6c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5028 <__register_exitproc+0xc0>
   b4f70:	4606      	mov	r6, r0
   b4f72:	f8d8 0000 	ldr.w	r0, [r8]
   b4f76:	461f      	mov	r7, r3
   b4f78:	460d      	mov	r5, r1
   b4f7a:	4691      	mov	r9, r2
   b4f7c:	f000 f856 	bl	b502c <__retarget_lock_acquire_recursive>
   b4f80:	4b25      	ldr	r3, [pc, #148]	; (b5018 <__register_exitproc+0xb0>)
   b4f82:	681c      	ldr	r4, [r3, #0]
   b4f84:	b934      	cbnz	r4, b4f94 <__register_exitproc+0x2c>
   b4f86:	4c25      	ldr	r4, [pc, #148]	; (b501c <__register_exitproc+0xb4>)
   b4f88:	601c      	str	r4, [r3, #0]
   b4f8a:	4b25      	ldr	r3, [pc, #148]	; (b5020 <__register_exitproc+0xb8>)
   b4f8c:	b113      	cbz	r3, b4f94 <__register_exitproc+0x2c>
   b4f8e:	681b      	ldr	r3, [r3, #0]
   b4f90:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b4f94:	6863      	ldr	r3, [r4, #4]
   b4f96:	2b1f      	cmp	r3, #31
   b4f98:	dd07      	ble.n	b4faa <__register_exitproc+0x42>
   b4f9a:	f8d8 0000 	ldr.w	r0, [r8]
   b4f9e:	f000 f847 	bl	b5030 <__retarget_lock_release_recursive>
   b4fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4faa:	b34e      	cbz	r6, b5000 <__register_exitproc+0x98>
   b4fac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b4fb0:	b988      	cbnz	r0, b4fd6 <__register_exitproc+0x6e>
   b4fb2:	4b1c      	ldr	r3, [pc, #112]	; (b5024 <__register_exitproc+0xbc>)
   b4fb4:	b923      	cbnz	r3, b4fc0 <__register_exitproc+0x58>
   b4fb6:	f8d8 0000 	ldr.w	r0, [r8]
   b4fba:	f000 f838 	bl	b502e <__retarget_lock_release>
   b4fbe:	e7f0      	b.n	b4fa2 <__register_exitproc+0x3a>
   b4fc0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b4fc4:	f7ff fa72 	bl	b44ac <malloc>
   b4fc8:	2800      	cmp	r0, #0
   b4fca:	d0f4      	beq.n	b4fb6 <__register_exitproc+0x4e>
   b4fcc:	2300      	movs	r3, #0
   b4fce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b4fd2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b4fd6:	6863      	ldr	r3, [r4, #4]
   b4fd8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b4fdc:	2201      	movs	r2, #1
   b4fde:	409a      	lsls	r2, r3
   b4fe0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b4fe4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b4fe8:	4313      	orrs	r3, r2
   b4fea:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b4fee:	2e02      	cmp	r6, #2
   b4ff0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b4ff4:	bf02      	ittt	eq
   b4ff6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b4ffa:	4313      	orreq	r3, r2
   b4ffc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5000:	6863      	ldr	r3, [r4, #4]
   b5002:	f8d8 0000 	ldr.w	r0, [r8]
   b5006:	1c5a      	adds	r2, r3, #1
   b5008:	3302      	adds	r3, #2
   b500a:	6062      	str	r2, [r4, #4]
   b500c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5010:	f000 f80e 	bl	b5030 <__retarget_lock_release_recursive>
   b5014:	2000      	movs	r0, #0
   b5016:	e7c6      	b.n	b4fa6 <__register_exitproc+0x3e>
   b5018:	2003e7e8 	.word	0x2003e7e8
   b501c:	2003e75c 	.word	0x2003e75c
   b5020:	00000000 	.word	0x00000000
   b5024:	000b44ad 	.word	0x000b44ad
   b5028:	2003e674 	.word	0x2003e674

000b502c <__retarget_lock_acquire_recursive>:
   b502c:	4770      	bx	lr

000b502e <__retarget_lock_release>:
   b502e:	4770      	bx	lr

000b5030 <__retarget_lock_release_recursive>:
   b5030:	4770      	bx	lr

000b5032 <link_code_end>:
	...

000b5034 <dynalib_user>:
   b5034:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5044:	0000 0000 6944 7473 6e61 6563 4d20 6165     ....Distance Mea
   b5054:	7573 6572 2064 203d 6925 000a               sured = %i..

000b5060 <_ZTVN5spark13CellularClassE>:
	...
   b5068:	456b 000b 4561 000b 4557 000b 450d 000b     kE..aE..WE...E..
   b5078:	454b 000b 453f 000b 4869 000b 4871 000b     KE..?E..iH..qH..
   b5088:	4533 000b 452b 000b 4521 000b 4517 000b     3E..+E..!E...E..
   b5098:	48a1 000b                                   .H..

000b509c <_ZTVN5spark13EthernetClassE>:
	...
   b50a4:	4603 000b 45f9 000b 45ef 000b 45e5 000b     .F...E...E...E..
   b50b4:	45d9 000b 45cd 000b 4869 000b 4871 000b     .E...E..iH..qH..
   b50c4:	45c1 000b 45b9 000b 45af 000b 45a5 000b     .E...E...E...E..
   b50d4:	48a1 000b                                   .H..

000b50d8 <_ZTV7TwoWire>:
	...
   b50e0:	4621 000b 466b 000b 4643 000b 4623 000b     !F..kF..CF..#F..
   b50f0:	464b 000b 4653 000b 465b 000b 4663 000b     KF..SF..[F..cF..

000b5100 <_ZTV9IPAddress>:
	...
   b5108:	4739 000b 4729 000b 472b 000b 7061 0070     9G..)G..+G..app.

000b5118 <_ZTVN5spark12NetworkClassE>:
	...
   b5120:	4829 000b 4833 000b 483d 000b 4847 000b     )H..3H..=H..GH..
   b5130:	4851 000b 485d 000b 4869 000b 4871 000b     QH..]H..iH..qH..
   b5140:	4879 000b 4885 000b 488d 000b 4897 000b     yH...H...H...H..
   b5150:	48a1 000b 5925 252d 2d6d 6425 2554 3a48     .H..%Y-%m-%dT%H:
   b5160:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b5170 <_ZTV11USARTSerial>:
	...
   b5178:	4add 000b 4b49 000b 4b21 000b 498d 000b     .J..IK..!K...I..
   b5188:	4af1 000b 4b0d 000b 4aff 000b 4b1b 000b     .J...K...J...K..
   b5198:	4adf 000b 4ae3 000b                         .J...J..

000b51a0 <_ZTV9USBSerial>:
	...
   b51a8:	4b87 000b 4bef 000b 4bc5 000b 498d 000b     .K...K...K...I..
   b51b8:	4bb7 000b 4b89 000b 4b99 000b 4be9 000b     .K...K...K...K..
   b51c8:	4ba9 000b 4b81 000b                         .K...K..

000b51d0 <_ZSt7nothrow>:
   b51d0:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b51e0:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b51f0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b5200:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b5210:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b5220:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b5230:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b5241 <link_const_variable_data_end>:
   b5241:	00          	.byte	0x00
	...

000b5244 <link_constructors_location>:
   b5244:	000b44fd 	.word	0x000b44fd
   b5248:	000b4575 	.word	0x000b4575
   b524c:	000b460d 	.word	0x000b460d
   b5250:	000b4819 	.word	0x000b4819
   b5254:	000b4979 	.word	0x000b4979
   b5258:	000b4a99 	.word	0x000b4a99
   b525c:	000b4aa5 	.word	0x000b4aa5
   b5260:	000b4ac9 	.word	0x000b4ac9

000b5264 <link_constructors_end>:
	...
