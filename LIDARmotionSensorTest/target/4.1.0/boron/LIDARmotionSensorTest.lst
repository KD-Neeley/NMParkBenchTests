
/Users/kdneeley/Documents/IoT/NMParkBenchTests/LIDARmotionSensorTest/target/4.1.0/boron/LIDARmotionSensorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000013e4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5400  000b5400  00005400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b5424  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e624  000b5428  0001e624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000160  2003e690  2003e690  0002e690  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b5494  000b5494  00025494  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b54bc  000b54bc  000254bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000dda88  00000000  00000000  000254c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000e5db  00000000  00000000  00102f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0002ef2c  00000000  00000000  00111523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002250  00000000  00000000  0014044f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00008aa0  00000000  00000000  0014269f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033db1  00000000  00000000  0014b13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00031c69  00000000  00000000  0017eef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012f6c8  00000000  00000000  001b0b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005f00  00000000  00000000  002e0224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 f819 	bl	b5064 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 f821 	bl	b5080 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e624 	.word	0x2003e624
   b4048:	000b5428 	.word	0x000b5428
   b404c:	2003e690 	.word	0x2003e690
   b4050:	2003e690 	.word	0x2003e690
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 ff47 	bl	b4ef0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b53d8 	.word	0x000b53d8
   b407c:	000b53fc 	.word	0x000b53fc

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b814 	b.w	b40ac <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f823 	bl	b40d0 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 bee7 	b.w	b4e60 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 baf5 	b.w	b4680 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f000 bafb 	b.w	b4690 <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr
	...

000b40ac <setup>:

byte * arrayToSave[2];
LIDARLite L1;


void setup() {
   b40ac:	b510      	push	{r4, lr}
 // Initialize Arduino serial port (for display of ASCII output to PC)
    Serial.begin(9600);
   b40ae:	f000 fe8f 	bl	b4dd0 <_Z16_fetch_usbserialv>
   b40b2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40b6:	f000 fe7f 	bl	b4db8 <_ZN9USBSerial5beginEl>
    L1.begin(0, true);
}
   b40ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    L1.begin(0, true);
   b40be:	4803      	ldr	r0, [pc, #12]	; (b40cc <setup+0x20>)
   b40c0:	2362      	movs	r3, #98	; 0x62
   b40c2:	2201      	movs	r2, #1
   b40c4:	2100      	movs	r1, #0
   b40c6:	f000 b8b1 	b.w	b422c <_ZN9LIDARLite5beginEibc>
   b40ca:	bf00      	nop
   b40cc:	2003e690 	.word	0x2003e690

000b40d0 <loop>:

void loop() {
   b40d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int dist;

    dist = L1.distance(true, I2CADDRESS); 
   b40d2:	2262      	movs	r2, #98	; 0x62
   b40d4:	2101      	movs	r1, #1
   b40d6:	4813      	ldr	r0, [pc, #76]	; (b4124 <loop+0x54>)
   b40d8:	f000 f930 	bl	b433c <_ZN9LIDARLite8distanceEbc>
    L1.write(0x04, 0x00, I2CADDRESS);
   b40dc:	2362      	movs	r3, #98	; 0x62
    dist = L1.distance(true, I2CADDRESS); 
   b40de:	4604      	mov	r4, r0
    L1.write(0x04, 0x00, I2CADDRESS);
   b40e0:	2200      	movs	r2, #0
   b40e2:	4810      	ldr	r0, [pc, #64]	; (b4124 <loop+0x54>)
   b40e4:	2104      	movs	r1, #4
   b40e6:	f000 f82d 	bl	b4144 <_ZN9LIDARLite5writeEccc>
    L1.read(0x01, 1, arrayToSave[0], true, I2CADDRESS);
   b40ea:	2201      	movs	r2, #1
   b40ec:	2362      	movs	r3, #98	; 0x62
   b40ee:	e9cd 2300 	strd	r2, r3, [sp]
   b40f2:	4b0d      	ldr	r3, [pc, #52]	; (b4128 <loop+0x58>)
   b40f4:	480b      	ldr	r0, [pc, #44]	; (b4124 <loop+0x54>)
   b40f6:	681b      	ldr	r3, [r3, #0]
   b40f8:	4611      	mov	r1, r2
   b40fa:	f000 f8af 	bl	b425c <_ZN9LIDARLite4readEciPhbc>
    // Display distance
    Serial.print(dist);
   b40fe:	f000 fe67 	bl	b4dd0 <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4102:	2c00      	cmp	r4, #0
   b4104:	4605      	mov	r5, r0
   b4106:	da0a      	bge.n	b411e <loop+0x4e>
            t = print('-');
   b4108:	212d      	movs	r1, #45	; 0x2d
   b410a:	f000 fd57 	bl	b4bbc <_ZN5Print5printEc>
            val = -n;
   b410e:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4110:	220a      	movs	r2, #10
   b4112:	4628      	mov	r0, r5

   b4114:	b003      	add	sp, #12
   b4116:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   b411a:	f000 bd68 	b.w	b4bee <_ZN5Print11printNumberEmh>
            val = n;
   b411e:	4621      	mov	r1, r4
   b4120:	e7f6      	b.n	b4110 <loop+0x40>
   b4122:	bf00      	nop
   b4124:	2003e690 	.word	0x2003e690
   b4128:	2003e694 	.word	0x2003e694

000b412c <_GLOBAL__sub_I_arrayToSave>:
LIDARLite L1;
   b412c:	4801      	ldr	r0, [pc, #4]	; (b4134 <_GLOBAL__sub_I_arrayToSave+0x8>)
   b412e:	f000 b807 	b.w	b4140 <_ZN9LIDARLiteC1Ev>
   b4132:	bf00      	nop
   b4134:	2003e690 	.word	0x2003e690

000b4138 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4138:	6803      	ldr	r3, [r0, #0]
   b413a:	b2c9      	uxtb	r1, r1
   b413c:	689b      	ldr	r3, [r3, #8]
   b413e:	4718      	bx	r3

000b4140 <_ZN9LIDARLiteC1Ev>:
/*------------------------------------------------------------------------------
  Constructor

  Use LIDARLite::begin to initialize.
------------------------------------------------------------------------------*/
LIDARLite::LIDARLite(){}
   b4140:	4770      	bx	lr
	...

000b4144 <_ZN9LIDARLite5writeEccc>:
  myValue: value to write.
  lidarliteAddress: Default 0x62. Fill in new address here if changed. See
    operating manual for instructions.
------------------------------------------------------------------------------*/
void LIDARLite::write(char myAddress, char myValue, char lidarliteAddress)
{
   b4144:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4146:	4614      	mov	r4, r2
   b4148:	9301      	str	r3, [sp, #4]
   b414a:	460d      	mov	r5, r1
  Wire.beginTransmission((int)lidarliteAddress);
   b414c:	f000 ff1e 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b4150:	9901      	ldr	r1, [sp, #4]
   b4152:	f000 fbcf 	bl	b48f4 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((int)myAddress); // Set register for write
   b4156:	f000 ff19 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b415a:	4629      	mov	r1, r5
   b415c:	f7ff ffec 	bl	b4138 <_ZN7TwoWire5writeEi.isra.0>
  Wire.write((int)myValue); // Write myValue to register
   b4160:	f000 ff14 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b4164:	4621      	mov	r1, r4
   b4166:	f7ff ffe7 	bl	b4138 <_ZN7TwoWire5writeEi.isra.0>

  // A nack means the device is not responding, report the error over serial
  int nackCatcher = Wire.endTransmission();
   b416a:	f000 ff0f 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b416e:	f000 fbc8 	bl	b4902 <_ZN7TwoWire15endTransmissionEv>
  if(nackCatcher != 0)
   b4172:	b120      	cbz	r0, b417e <_ZN9LIDARLite5writeEccc+0x3a>
  {
    Serial.println("> nack");
   b4174:	f000 fe2c 	bl	b4dd0 <_Z16_fetch_usbserialv>
   b4178:	4904      	ldr	r1, [pc, #16]	; (b418c <_ZN9LIDARLite5writeEccc+0x48>)
   b417a:	f000 fd2e 	bl	b4bda <_ZN5Print7printlnEPKc>
  }

  delay(1); // 1 ms delay for robustness with successive reads and writes
   b417e:	2001      	movs	r0, #1
} /* LIDARLite::write */
   b4180:	b003      	add	sp, #12
   b4182:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  delay(1); // 1 ms delay for robustness with successive reads and writes
   b4186:	f000 ba9b 	b.w	b46c0 <delay>
   b418a:	bf00      	nop
   b418c:	000b51dc 	.word	0x000b51dc

000b4190 <_ZN9LIDARLite9configureEic>:
{
   b4190:	b507      	push	{r0, r1, r2, lr}
   b4192:	4613      	mov	r3, r2
   b4194:	2905      	cmp	r1, #5
   b4196:	d846      	bhi.n	b4226 <_ZN9LIDARLite9configureEic+0x96>
   b4198:	e8df f001 	tbb	[pc, r1]
   b419c:	241b1803 	.word	0x241b1803
   b41a0:	3627      	.short	0x3627
      write(0x02,0x80,lidarliteAddress); // Default
   b41a2:	9301      	str	r3, [sp, #4]
   b41a4:	2280      	movs	r2, #128	; 0x80
      write(0x02,0x1d,lidarliteAddress);
   b41a6:	2102      	movs	r1, #2
   b41a8:	9000      	str	r0, [sp, #0]
   b41aa:	f7ff ffcb 	bl	b4144 <_ZN9LIDARLite5writeEccc>
      write(0x04,0x08,lidarliteAddress); // Default
   b41ae:	9b01      	ldr	r3, [sp, #4]
   b41b0:	2208      	movs	r2, #8
   b41b2:	9800      	ldr	r0, [sp, #0]
   b41b4:	2104      	movs	r1, #4
   b41b6:	f7ff ffc5 	bl	b4144 <_ZN9LIDARLite5writeEccc>
      write(0x1c,0x00,lidarliteAddress); // Default
   b41ba:	9b01      	ldr	r3, [sp, #4]
   b41bc:	2200      	movs	r2, #0
      write(0x1c,0xb0,lidarliteAddress);
   b41be:	9800      	ldr	r0, [sp, #0]
   b41c0:	211c      	movs	r1, #28
} /* LIDARLite::configure */
   b41c2:	b003      	add	sp, #12
   b41c4:	f85d eb04 	ldr.w	lr, [sp], #4
      write(0x1c,0xb0,lidarliteAddress);
   b41c8:	f7ff bfbc 	b.w	b4144 <_ZN9LIDARLite5writeEccc>
      write(0x02,0x1d,lidarliteAddress);
   b41cc:	9301      	str	r3, [sp, #4]
   b41ce:	221d      	movs	r2, #29
   b41d0:	e7e9      	b.n	b41a6 <_ZN9LIDARLite9configureEic+0x16>
      write(0x02,0x80,lidarliteAddress); // Default
   b41d2:	2280      	movs	r2, #128	; 0x80
   b41d4:	2102      	movs	r1, #2
   b41d6:	9301      	str	r3, [sp, #4]
   b41d8:	9000      	str	r0, [sp, #0]
   b41da:	f7ff ffb3 	bl	b4144 <_ZN9LIDARLite5writeEccc>
      write(0x04,0x00,lidarliteAddress);
   b41de:	9b01      	ldr	r3, [sp, #4]
   b41e0:	2200      	movs	r2, #0
   b41e2:	e7e6      	b.n	b41b2 <_ZN9LIDARLite9configureEic+0x22>
      write(0x02,0xff,lidarliteAddress);
   b41e4:	9301      	str	r3, [sp, #4]
   b41e6:	22ff      	movs	r2, #255	; 0xff
   b41e8:	e7dd      	b.n	b41a6 <_ZN9LIDARLite9configureEic+0x16>
      write(0x02,0x80,lidarliteAddress); // Default
   b41ea:	2280      	movs	r2, #128	; 0x80
   b41ec:	2102      	movs	r1, #2
   b41ee:	9301      	str	r3, [sp, #4]
   b41f0:	9000      	str	r0, [sp, #0]
   b41f2:	f7ff ffa7 	bl	b4144 <_ZN9LIDARLite5writeEccc>
      write(0x04,0x08,lidarliteAddress); // Default
   b41f6:	9b01      	ldr	r3, [sp, #4]
   b41f8:	9800      	ldr	r0, [sp, #0]
   b41fa:	2208      	movs	r2, #8
   b41fc:	2104      	movs	r1, #4
   b41fe:	f7ff ffa1 	bl	b4144 <_ZN9LIDARLite5writeEccc>
      write(0x1c,0x80,lidarliteAddress);
   b4202:	9b01      	ldr	r3, [sp, #4]
   b4204:	2280      	movs	r2, #128	; 0x80
   b4206:	e7da      	b.n	b41be <_ZN9LIDARLite9configureEic+0x2e>
      write(0x02,0x80,lidarliteAddress); // Default
   b4208:	2280      	movs	r2, #128	; 0x80
   b420a:	2102      	movs	r1, #2
   b420c:	9301      	str	r3, [sp, #4]
   b420e:	9000      	str	r0, [sp, #0]
   b4210:	f7ff ff98 	bl	b4144 <_ZN9LIDARLite5writeEccc>
      write(0x04,0x08,lidarliteAddress); // Default
   b4214:	9b01      	ldr	r3, [sp, #4]
   b4216:	9800      	ldr	r0, [sp, #0]
   b4218:	2208      	movs	r2, #8
   b421a:	2104      	movs	r1, #4
   b421c:	f7ff ff92 	bl	b4144 <_ZN9LIDARLite5writeEccc>
      write(0x1c,0xb0,lidarliteAddress);
   b4220:	9b01      	ldr	r3, [sp, #4]
   b4222:	22b0      	movs	r2, #176	; 0xb0
   b4224:	e7cb      	b.n	b41be <_ZN9LIDARLite9configureEic+0x2e>
} /* LIDARLite::configure */
   b4226:	b003      	add	sp, #12
   b4228:	f85d fb04 	ldr.w	pc, [sp], #4

000b422c <_ZN9LIDARLite5beginEibc>:
{
   b422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b422e:	4617      	mov	r7, r2
   b4230:	460d      	mov	r5, r1
   b4232:	461e      	mov	r6, r3
   b4234:	4604      	mov	r4, r0
  Wire.begin(); // Start I2C
   b4236:	f000 fea9 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b423a:	f000 fb25 	bl	b4888 <_ZN7TwoWire5beginEv>
  if(fasti2c)
   b423e:	b127      	cbz	r7, b424a <_ZN9LIDARLite5beginEibc+0x1e>
      Wire.setClock(400000UL); // Set I2C frequency to 400kHz, for Arduino Due
   b4240:	f000 fea4 	bl	b4f8c <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4244:	4904      	ldr	r1, [pc, #16]	; (b4258 <_ZN9LIDARLite5beginEibc+0x2c>)
   b4246:	f000 fb1b 	bl	b4880 <_ZN7TwoWire8setSpeedEm>
  configure(configuration, lidarliteAddress); // Configuration settings
   b424a:	4632      	mov	r2, r6
   b424c:	4629      	mov	r1, r5
   b424e:	4620      	mov	r0, r4
} /* LIDARLite::begin */
   b4250:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  configure(configuration, lidarliteAddress); // Configuration settings
   b4254:	f7ff bf9c 	b.w	b4190 <_ZN9LIDARLite9configureEic>
   b4258:	00061a80 	.word	0x00061a80

000b425c <_ZN9LIDARLite4readEciPhbc>:
  arrayToSave: an array to store the read values.
  monitorBusyFlag: if true, the routine will repeatedly read the status
    register until the busy flag (LSB) is 0.
------------------------------------------------------------------------------*/
void LIDARLite::read(char myAddress, int numOfBytes, byte arrayToSave[2], bool monitorBusyFlag, char lidarliteAddress)
{
   b425c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4260:	461e      	mov	r6, r3
   b4262:	f89d 3020 	ldrb.w	r3, [sp, #32]
   b4266:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
   b426a:	460f      	mov	r7, r1
   b426c:	4614      	mov	r4, r2
  int busyFlag = 0; // busyFlag monitors when the device is done with a measurement
  if(monitorBusyFlag)
   b426e:	2b00      	cmp	r3, #0
   b4270:	d158      	bne.n	b4324 <_ZN9LIDARLite4readEciPhbc+0xc8>
  }

  // Device is not busy, begin read
  if(busyFlag == 0)
  {
    Wire.beginTransmission((int)lidarliteAddress);
   b4272:	f000 fe8b 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b4276:	4629      	mov	r1, r5
   b4278:	f000 fb3c 	bl	b48f4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((int)myAddress); // Set the register to be read
   b427c:	f000 fe86 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b4280:	4639      	mov	r1, r7
   b4282:	f7ff ff59 	bl	b4138 <_ZN7TwoWire5writeEi.isra.0>

    // A nack means the device is not responding, report the error over serial
    int nackCatcher = Wire.endTransmission();
   b4286:	f000 fe81 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b428a:	f000 fb3a 	bl	b4902 <_ZN7TwoWire15endTransmissionEv>
    if(nackCatcher != 0)
   b428e:	b120      	cbz	r0, b429a <_ZN9LIDARLite4readEciPhbc+0x3e>
    {
      Serial.println("> nack");
   b4290:	f000 fd9e 	bl	b4dd0 <_Z16_fetch_usbserialv>
   b4294:	4927      	ldr	r1, [pc, #156]	; (b4334 <_ZN9LIDARLite4readEciPhbc+0xd8>)
   b4296:	f000 fca0 	bl	b4bda <_ZN5Print7printlnEPKc>
    }

    // Perform read of 1 or 2 bytes, save in arrayToSave
    Wire.requestFrom((int)lidarliteAddress, numOfBytes);
   b429a:	f000 fe77 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b429e:	4622      	mov	r2, r4
   b42a0:	4629      	mov	r1, r5
   b42a2:	f000 fb20 	bl	b48e6 <_ZN7TwoWire11requestFromEhj>
    int i = 0;
    if(numOfBytes <= Wire.available())
   b42a6:	f000 fe71 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b42aa:	6803      	ldr	r3, [r0, #0]
   b42ac:	691b      	ldr	r3, [r3, #16]
   b42ae:	4798      	blx	r3
   b42b0:	42a0      	cmp	r0, r4
   b42b2:	db3c      	blt.n	b432e <_ZN9LIDARLite4readEciPhbc+0xd2>
    int i = 0;
   b42b4:	2500      	movs	r5, #0
    {
      while(i < numOfBytes)
   b42b6:	42a5      	cmp	r5, r4
   b42b8:	da39      	bge.n	b432e <_ZN9LIDARLite4readEciPhbc+0xd2>
      {
        arrayToSave[i] = Wire.read();
   b42ba:	f000 fe67 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b42be:	6803      	ldr	r3, [r0, #0]
   b42c0:	695b      	ldr	r3, [r3, #20]
   b42c2:	4798      	blx	r3
   b42c4:	5570      	strb	r0, [r6, r5]
        i++;
   b42c6:	3501      	adds	r5, #1
      while(i < numOfBytes)
   b42c8:	e7f5      	b.n	b42b6 <_ZN9LIDARLite4readEciPhbc+0x5a>
  while(busyFlag != 0) // Loop until device is not busy
   b42ca:	2800      	cmp	r0, #0
   b42cc:	d0d1      	beq.n	b4272 <_ZN9LIDARLite4readEciPhbc+0x16>
    Wire.beginTransmission((int)lidarliteAddress);
   b42ce:	f000 fe5d 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b42d2:	4629      	mov	r1, r5
   b42d4:	f000 fb0e 	bl	b48f4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(0x01); // Set the status register to be read
   b42d8:	f000 fe58 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b42dc:	2101      	movs	r1, #1
   b42de:	f7ff ff2b 	bl	b4138 <_ZN7TwoWire5writeEi.isra.0>
    int nackCatcher = Wire.endTransmission();
   b42e2:	f000 fe53 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b42e6:	f000 fb0c 	bl	b4902 <_ZN7TwoWire15endTransmissionEv>
    if(nackCatcher != 0)
   b42ea:	b120      	cbz	r0, b42f6 <_ZN9LIDARLite4readEciPhbc+0x9a>
      Serial.println("> nack");
   b42ec:	f000 fd70 	bl	b4dd0 <_Z16_fetch_usbserialv>
   b42f0:	4649      	mov	r1, r9
   b42f2:	f000 fc72 	bl	b4bda <_ZN5Print7printlnEPKc>
    Wire.requestFrom((int)lidarliteAddress,1); // Read register 0x01
   b42f6:	f000 fe49 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b42fa:	2201      	movs	r2, #1
   b42fc:	4629      	mov	r1, r5
   b42fe:	f000 faf2 	bl	b48e6 <_ZN7TwoWire11requestFromEhj>
    busyFlag = bitRead(Wire.read(),0); // Assign the LSB of the status register to busyFlag
   b4302:	f000 fe43 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b4306:	6803      	ldr	r3, [r0, #0]
   b4308:	695b      	ldr	r3, [r3, #20]
   b430a:	4798      	blx	r3
    if(busyCounter > 9999)
   b430c:	f1b8 0801 	subs.w	r8, r8, #1
    busyFlag = bitRead(Wire.read(),0); // Assign the LSB of the status register to busyFlag
   b4310:	f000 0001 	and.w	r0, r0, #1
    if(busyCounter > 9999)
   b4314:	d1d9      	bne.n	b42ca <_ZN9LIDARLite4readEciPhbc+0x6e>
  // bailout reports error over serial
  if(busyCounter > 9999)
  {
    bailout:
      busyCounter = 0;
      Serial.println("> read failed");
   b4316:	f000 fd5b 	bl	b4dd0 <_Z16_fetch_usbserialv>
  }
} /* LIDARLite::read */
   b431a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      Serial.println("> read failed");
   b431e:	4906      	ldr	r1, [pc, #24]	; (b4338 <_ZN9LIDARLite4readEciPhbc+0xdc>)
   b4320:	f000 bc5b 	b.w	b4bda <_ZN5Print7printlnEPKc>
      Serial.println("> nack");
   b4324:	f8df 900c 	ldr.w	r9, [pc, #12]	; b4334 <_ZN9LIDARLite4readEciPhbc+0xd8>
   b4328:	f242 7810 	movw	r8, #10000	; 0x2710
   b432c:	e7cf      	b.n	b42ce <_ZN9LIDARLite4readEciPhbc+0x72>
} /* LIDARLite::read */
   b432e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4332:	bf00      	nop
   b4334:	000b51dc 	.word	0x000b51dc
   b4338:	000b51e3 	.word	0x000b51e3

000b433c <_ZN9LIDARLite8distanceEbc>:
{
   b433c:	b530      	push	{r4, r5, lr}
    write(0x00,0x04,lidarliteAddress);
   b433e:	4613      	mov	r3, r2
{
   b4340:	b085      	sub	sp, #20
   b4342:	4605      	mov	r5, r0
   b4344:	4614      	mov	r4, r2
  if(biasCorrection)
   b4346:	b1a1      	cbz	r1, b4372 <_ZN9LIDARLite8distanceEbc+0x36>
    write(0x00,0x04,lidarliteAddress);
   b4348:	2204      	movs	r2, #4
   b434a:	2100      	movs	r1, #0
    write(0x00,0x03,lidarliteAddress);
   b434c:	f7ff fefa 	bl	b4144 <_ZN9LIDARLite5writeEccc>
  read(0x8f,2,distanceArray,true,lidarliteAddress);
   b4350:	2301      	movs	r3, #1
   b4352:	9300      	str	r3, [sp, #0]
   b4354:	4628      	mov	r0, r5
   b4356:	ab03      	add	r3, sp, #12
   b4358:	9401      	str	r4, [sp, #4]
   b435a:	2202      	movs	r2, #2
   b435c:	218f      	movs	r1, #143	; 0x8f
   b435e:	f7ff ff7d 	bl	b425c <_ZN9LIDARLite4readEciPhbc>
  int distance = (distanceArray[0] << 8) + distanceArray[1];
   b4362:	f89d 000c 	ldrb.w	r0, [sp, #12]
   b4366:	f89d 300d 	ldrb.w	r3, [sp, #13]
} /* LIDARLite::distance */
   b436a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   b436e:	b005      	add	sp, #20
   b4370:	bd30      	pop	{r4, r5, pc}
    write(0x00,0x03,lidarliteAddress);
   b4372:	2203      	movs	r2, #3
   b4374:	e7ea      	b.n	b434c <_ZN9LIDARLite8distanceEbc+0x10>
	...

000b4378 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4378:	b508      	push	{r3, lr}
   b437a:	4b02      	ldr	r3, [pc, #8]	; (b4384 <os_mutex_recursive_create+0xc>)
   b437c:	681b      	ldr	r3, [r3, #0]
   b437e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4380:	9301      	str	r3, [sp, #4]
   b4382:	bd08      	pop	{r3, pc}
   b4384:	00030248 	.word	0x00030248

000b4388 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4388:	b508      	push	{r3, lr}
   b438a:	4b02      	ldr	r3, [pc, #8]	; (b4394 <HAL_RNG_GetRandomNumber+0xc>)
   b438c:	681b      	ldr	r3, [r3, #0]
   b438e:	685b      	ldr	r3, [r3, #4]
   b4390:	9301      	str	r3, [sp, #4]
   b4392:	bd08      	pop	{r3, pc}
   b4394:	00030218 	.word	0x00030218

000b4398 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4398:	b508      	push	{r3, lr}
   b439a:	4b02      	ldr	r3, [pc, #8]	; (b43a4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b439c:	681b      	ldr	r3, [r3, #0]
   b439e:	695b      	ldr	r3, [r3, #20]
   b43a0:	9301      	str	r3, [sp, #4]
   b43a2:	bd08      	pop	{r3, pc}
   b43a4:	00030218 	.word	0x00030218

000b43a8 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b43a8:	b508      	push	{r3, lr}
   b43aa:	4b02      	ldr	r3, [pc, #8]	; (b43b4 <hal_i2c_set_speed+0xc>)
   b43ac:	681b      	ldr	r3, [r3, #0]
   b43ae:	681b      	ldr	r3, [r3, #0]
   b43b0:	9301      	str	r3, [sp, #4]
   b43b2:	bd08      	pop	{r3, pc}
   b43b4:	00030228 	.word	0x00030228

000b43b8 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b43b8:	b508      	push	{r3, lr}
   b43ba:	4b02      	ldr	r3, [pc, #8]	; (b43c4 <hal_i2c_begin+0xc>)
   b43bc:	681b      	ldr	r3, [r3, #0]
   b43be:	68db      	ldr	r3, [r3, #12]
   b43c0:	9301      	str	r3, [sp, #4]
   b43c2:	bd08      	pop	{r3, pc}
   b43c4:	00030228 	.word	0x00030228

000b43c8 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b43c8:	b508      	push	{r3, lr}
   b43ca:	4b02      	ldr	r3, [pc, #8]	; (b43d4 <hal_i2c_begin_transmission+0xc>)
   b43cc:	681b      	ldr	r3, [r3, #0]
   b43ce:	699b      	ldr	r3, [r3, #24]
   b43d0:	9301      	str	r3, [sp, #4]
   b43d2:	bd08      	pop	{r3, pc}
   b43d4:	00030228 	.word	0x00030228

000b43d8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b43d8:	b508      	push	{r3, lr}
   b43da:	4b02      	ldr	r3, [pc, #8]	; (b43e4 <hal_i2c_end_transmission+0xc>)
   b43dc:	681b      	ldr	r3, [r3, #0]
   b43de:	69db      	ldr	r3, [r3, #28]
   b43e0:	9301      	str	r3, [sp, #4]
   b43e2:	bd08      	pop	{r3, pc}
   b43e4:	00030228 	.word	0x00030228

000b43e8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b43e8:	b508      	push	{r3, lr}
   b43ea:	4b02      	ldr	r3, [pc, #8]	; (b43f4 <hal_i2c_write+0xc>)
   b43ec:	681b      	ldr	r3, [r3, #0]
   b43ee:	6a1b      	ldr	r3, [r3, #32]
   b43f0:	9301      	str	r3, [sp, #4]
   b43f2:	bd08      	pop	{r3, pc}
   b43f4:	00030228 	.word	0x00030228

000b43f8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b43f8:	b508      	push	{r3, lr}
   b43fa:	4b02      	ldr	r3, [pc, #8]	; (b4404 <hal_i2c_available+0xc>)
   b43fc:	681b      	ldr	r3, [r3, #0]
   b43fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4400:	9301      	str	r3, [sp, #4]
   b4402:	bd08      	pop	{r3, pc}
   b4404:	00030228 	.word	0x00030228

000b4408 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4408:	b508      	push	{r3, lr}
   b440a:	4b02      	ldr	r3, [pc, #8]	; (b4414 <hal_i2c_read+0xc>)
   b440c:	681b      	ldr	r3, [r3, #0]
   b440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4410:	9301      	str	r3, [sp, #4]
   b4412:	bd08      	pop	{r3, pc}
   b4414:	00030228 	.word	0x00030228

000b4418 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4418:	b508      	push	{r3, lr}
   b441a:	4b02      	ldr	r3, [pc, #8]	; (b4424 <hal_i2c_peek+0xc>)
   b441c:	681b      	ldr	r3, [r3, #0]
   b441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4420:	9301      	str	r3, [sp, #4]
   b4422:	bd08      	pop	{r3, pc}
   b4424:	00030228 	.word	0x00030228

000b4428 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4428:	b508      	push	{r3, lr}
   b442a:	4b02      	ldr	r3, [pc, #8]	; (b4434 <hal_i2c_flush+0xc>)
   b442c:	681b      	ldr	r3, [r3, #0]
   b442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4430:	9301      	str	r3, [sp, #4]
   b4432:	bd08      	pop	{r3, pc}
   b4434:	00030228 	.word	0x00030228

000b4438 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4438:	b508      	push	{r3, lr}
   b443a:	4b02      	ldr	r3, [pc, #8]	; (b4444 <hal_i2c_init+0xc>)
   b443c:	681b      	ldr	r3, [r3, #0]
   b443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4440:	9301      	str	r3, [sp, #4]
   b4442:	bd08      	pop	{r3, pc}
   b4444:	00030228 	.word	0x00030228

000b4448 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4448:	b508      	push	{r3, lr}
   b444a:	4b02      	ldr	r3, [pc, #8]	; (b4454 <hal_i2c_request_ex+0xc>)
   b444c:	681b      	ldr	r3, [r3, #0]
   b444e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4450:	9301      	str	r3, [sp, #4]
   b4452:	bd08      	pop	{r3, pc}
   b4454:	00030228 	.word	0x00030228

000b4458 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4458:	b508      	push	{r3, lr}
   b445a:	4b02      	ldr	r3, [pc, #8]	; (b4464 <inet_inet_ntop+0xc>)
   b445c:	681b      	ldr	r3, [r3, #0]
   b445e:	695b      	ldr	r3, [r3, #20]
   b4460:	9301      	str	r3, [sp, #4]
   b4462:	bd08      	pop	{r3, pc}
   b4464:	00030264 	.word	0x00030264

000b4468 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4468:	b508      	push	{r3, lr}
   b446a:	4b02      	ldr	r3, [pc, #8]	; (b4474 <netdb_freeaddrinfo+0xc>)
   b446c:	681b      	ldr	r3, [r3, #0]
   b446e:	689b      	ldr	r3, [r3, #8]
   b4470:	9301      	str	r3, [sp, #4]
   b4472:	bd08      	pop	{r3, pc}
   b4474:	00030268 	.word	0x00030268

000b4478 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4478:	b508      	push	{r3, lr}
   b447a:	4b02      	ldr	r3, [pc, #8]	; (b4484 <netdb_getaddrinfo+0xc>)
   b447c:	681b      	ldr	r3, [r3, #0]
   b447e:	68db      	ldr	r3, [r3, #12]
   b4480:	9301      	str	r3, [sp, #4]
   b4482:	bd08      	pop	{r3, pc}
   b4484:	00030268 	.word	0x00030268

000b4488 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4488:	b508      	push	{r3, lr}
   b448a:	4b02      	ldr	r3, [pc, #8]	; (b4494 <hal_usart_write+0xc>)
   b448c:	681b      	ldr	r3, [r3, #0]
   b448e:	68db      	ldr	r3, [r3, #12]
   b4490:	9301      	str	r3, [sp, #4]
   b4492:	bd08      	pop	{r3, pc}
   b4494:	0003023c 	.word	0x0003023c

000b4498 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4498:	b508      	push	{r3, lr}
   b449a:	4b02      	ldr	r3, [pc, #8]	; (b44a4 <hal_usart_available+0xc>)
   b449c:	681b      	ldr	r3, [r3, #0]
   b449e:	691b      	ldr	r3, [r3, #16]
   b44a0:	9301      	str	r3, [sp, #4]
   b44a2:	bd08      	pop	{r3, pc}
   b44a4:	0003023c 	.word	0x0003023c

000b44a8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b44a8:	b508      	push	{r3, lr}
   b44aa:	4b02      	ldr	r3, [pc, #8]	; (b44b4 <hal_usart_read+0xc>)
   b44ac:	681b      	ldr	r3, [r3, #0]
   b44ae:	695b      	ldr	r3, [r3, #20]
   b44b0:	9301      	str	r3, [sp, #4]
   b44b2:	bd08      	pop	{r3, pc}
   b44b4:	0003023c 	.word	0x0003023c

000b44b8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b44b8:	b508      	push	{r3, lr}
   b44ba:	4b02      	ldr	r3, [pc, #8]	; (b44c4 <hal_usart_peek+0xc>)
   b44bc:	681b      	ldr	r3, [r3, #0]
   b44be:	699b      	ldr	r3, [r3, #24]
   b44c0:	9301      	str	r3, [sp, #4]
   b44c2:	bd08      	pop	{r3, pc}
   b44c4:	0003023c 	.word	0x0003023c

000b44c8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b44c8:	b508      	push	{r3, lr}
   b44ca:	4b02      	ldr	r3, [pc, #8]	; (b44d4 <hal_usart_flush+0xc>)
   b44cc:	681b      	ldr	r3, [r3, #0]
   b44ce:	69db      	ldr	r3, [r3, #28]
   b44d0:	9301      	str	r3, [sp, #4]
   b44d2:	bd08      	pop	{r3, pc}
   b44d4:	0003023c 	.word	0x0003023c

000b44d8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b44d8:	b508      	push	{r3, lr}
   b44da:	4b02      	ldr	r3, [pc, #8]	; (b44e4 <hal_usart_available_data_for_write+0xc>)
   b44dc:	681b      	ldr	r3, [r3, #0]
   b44de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b44e0:	9301      	str	r3, [sp, #4]
   b44e2:	bd08      	pop	{r3, pc}
   b44e4:	0003023c 	.word	0x0003023c

000b44e8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b44e8:	b508      	push	{r3, lr}
   b44ea:	4b02      	ldr	r3, [pc, #8]	; (b44f4 <hal_usart_init_ex+0xc>)
   b44ec:	681b      	ldr	r3, [r3, #0]
   b44ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b44f0:	9301      	str	r3, [sp, #4]
   b44f2:	bd08      	pop	{r3, pc}
   b44f4:	0003023c 	.word	0x0003023c

000b44f8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b44f8:	b508      	push	{r3, lr}
   b44fa:	4b02      	ldr	r3, [pc, #8]	; (b4504 <HAL_USB_USART_Init+0xc>)
   b44fc:	681b      	ldr	r3, [r3, #0]
   b44fe:	681b      	ldr	r3, [r3, #0]
   b4500:	9301      	str	r3, [sp, #4]
   b4502:	bd08      	pop	{r3, pc}
   b4504:	0003024c 	.word	0x0003024c

000b4508 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4508:	b508      	push	{r3, lr}
   b450a:	4b02      	ldr	r3, [pc, #8]	; (b4514 <HAL_USB_USART_Begin+0xc>)
   b450c:	681b      	ldr	r3, [r3, #0]
   b450e:	685b      	ldr	r3, [r3, #4]
   b4510:	9301      	str	r3, [sp, #4]
   b4512:	bd08      	pop	{r3, pc}
   b4514:	0003024c 	.word	0x0003024c

000b4518 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4518:	b508      	push	{r3, lr}
   b451a:	4b02      	ldr	r3, [pc, #8]	; (b4524 <HAL_USB_USART_Available_Data+0xc>)
   b451c:	681b      	ldr	r3, [r3, #0]
   b451e:	691b      	ldr	r3, [r3, #16]
   b4520:	9301      	str	r3, [sp, #4]
   b4522:	bd08      	pop	{r3, pc}
   b4524:	0003024c 	.word	0x0003024c

000b4528 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4528:	b508      	push	{r3, lr}
   b452a:	4b02      	ldr	r3, [pc, #8]	; (b4534 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b452c:	681b      	ldr	r3, [r3, #0]
   b452e:	695b      	ldr	r3, [r3, #20]
   b4530:	9301      	str	r3, [sp, #4]
   b4532:	bd08      	pop	{r3, pc}
   b4534:	0003024c 	.word	0x0003024c

000b4538 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4538:	b508      	push	{r3, lr}
   b453a:	4b02      	ldr	r3, [pc, #8]	; (b4544 <HAL_USB_USART_Receive_Data+0xc>)
   b453c:	681b      	ldr	r3, [r3, #0]
   b453e:	699b      	ldr	r3, [r3, #24]
   b4540:	9301      	str	r3, [sp, #4]
   b4542:	bd08      	pop	{r3, pc}
   b4544:	0003024c 	.word	0x0003024c

000b4548 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4548:	b508      	push	{r3, lr}
   b454a:	4b02      	ldr	r3, [pc, #8]	; (b4554 <HAL_USB_USART_Send_Data+0xc>)
   b454c:	681b      	ldr	r3, [r3, #0]
   b454e:	69db      	ldr	r3, [r3, #28]
   b4550:	9301      	str	r3, [sp, #4]
   b4552:	bd08      	pop	{r3, pc}
   b4554:	0003024c 	.word	0x0003024c

000b4558 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4558:	b508      	push	{r3, lr}
   b455a:	4b02      	ldr	r3, [pc, #8]	; (b4564 <HAL_USB_USART_Flush_Data+0xc>)
   b455c:	681b      	ldr	r3, [r3, #0]
   b455e:	6a1b      	ldr	r3, [r3, #32]
   b4560:	9301      	str	r3, [sp, #4]
   b4562:	bd08      	pop	{r3, pc}
   b4564:	0003024c 	.word	0x0003024c

000b4568 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4568:	b508      	push	{r3, lr}
   b456a:	4b02      	ldr	r3, [pc, #8]	; (b4574 <set_system_mode+0xc>)
   b456c:	681b      	ldr	r3, [r3, #0]
   b456e:	685b      	ldr	r3, [r3, #4]
   b4570:	9301      	str	r3, [sp, #4]
   b4572:	bd08      	pop	{r3, pc}
   b4574:	00030220 	.word	0x00030220

000b4578 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4578:	b508      	push	{r3, lr}
   b457a:	4b02      	ldr	r3, [pc, #8]	; (b4584 <system_delay_ms+0xc>)
   b457c:	681b      	ldr	r3, [r3, #0]
   b457e:	695b      	ldr	r3, [r3, #20]
   b4580:	9301      	str	r3, [sp, #4]
   b4582:	bd08      	pop	{r3, pc}
   b4584:	00030220 	.word	0x00030220

000b4588 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4588:	b508      	push	{r3, lr}
   b458a:	4b03      	ldr	r3, [pc, #12]	; (b4598 <system_ctrl_set_app_request_handler+0x10>)
   b458c:	681b      	ldr	r3, [r3, #0]
   b458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4592:	9301      	str	r3, [sp, #4]
   b4594:	bd08      	pop	{r3, pc}
   b4596:	0000      	.short	0x0000
   b4598:	00030220 	.word	0x00030220

000b459c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b459c:	b508      	push	{r3, lr}
   b459e:	4b03      	ldr	r3, [pc, #12]	; (b45ac <system_ctrl_set_result+0x10>)
   b45a0:	681b      	ldr	r3, [r3, #0]
   b45a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b45a6:	9301      	str	r3, [sp, #4]
   b45a8:	bd08      	pop	{r3, pc}
   b45aa:	0000      	.short	0x0000
   b45ac:	00030220 	.word	0x00030220

000b45b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b45b0:	b508      	push	{r3, lr}
   b45b2:	4b02      	ldr	r3, [pc, #8]	; (b45bc <spark_set_random_seed_from_cloud_handler+0xc>)
   b45b4:	681b      	ldr	r3, [r3, #0]
   b45b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b45b8:	9301      	str	r3, [sp, #4]
   b45ba:	bd08      	pop	{r3, pc}
   b45bc:	00030244 	.word	0x00030244

000b45c0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b45c0:	b508      	push	{r3, lr}
   b45c2:	4b02      	ldr	r3, [pc, #8]	; (b45cc <network_connect+0xc>)
   b45c4:	681b      	ldr	r3, [r3, #0]
   b45c6:	685b      	ldr	r3, [r3, #4]
   b45c8:	9301      	str	r3, [sp, #4]
   b45ca:	bd08      	pop	{r3, pc}
   b45cc:	00030240 	.word	0x00030240

000b45d0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b45d0:	b508      	push	{r3, lr}
   b45d2:	4b02      	ldr	r3, [pc, #8]	; (b45dc <network_connecting+0xc>)
   b45d4:	681b      	ldr	r3, [r3, #0]
   b45d6:	689b      	ldr	r3, [r3, #8]
   b45d8:	9301      	str	r3, [sp, #4]
   b45da:	bd08      	pop	{r3, pc}
   b45dc:	00030240 	.word	0x00030240

000b45e0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b45e0:	b508      	push	{r3, lr}
   b45e2:	4b02      	ldr	r3, [pc, #8]	; (b45ec <network_disconnect+0xc>)
   b45e4:	681b      	ldr	r3, [r3, #0]
   b45e6:	68db      	ldr	r3, [r3, #12]
   b45e8:	9301      	str	r3, [sp, #4]
   b45ea:	bd08      	pop	{r3, pc}
   b45ec:	00030240 	.word	0x00030240

000b45f0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b45f0:	b508      	push	{r3, lr}
   b45f2:	4b02      	ldr	r3, [pc, #8]	; (b45fc <network_ready+0xc>)
   b45f4:	681b      	ldr	r3, [r3, #0]
   b45f6:	691b      	ldr	r3, [r3, #16]
   b45f8:	9301      	str	r3, [sp, #4]
   b45fa:	bd08      	pop	{r3, pc}
   b45fc:	00030240 	.word	0x00030240

000b4600 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4600:	b508      	push	{r3, lr}
   b4602:	4b02      	ldr	r3, [pc, #8]	; (b460c <network_on+0xc>)
   b4604:	681b      	ldr	r3, [r3, #0]
   b4606:	695b      	ldr	r3, [r3, #20]
   b4608:	9301      	str	r3, [sp, #4]
   b460a:	bd08      	pop	{r3, pc}
   b460c:	00030240 	.word	0x00030240

000b4610 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4610:	b508      	push	{r3, lr}
   b4612:	4b02      	ldr	r3, [pc, #8]	; (b461c <network_off+0xc>)
   b4614:	681b      	ldr	r3, [r3, #0]
   b4616:	699b      	ldr	r3, [r3, #24]
   b4618:	9301      	str	r3, [sp, #4]
   b461a:	bd08      	pop	{r3, pc}
   b461c:	00030240 	.word	0x00030240

000b4620 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4620:	b508      	push	{r3, lr}
   b4622:	4b02      	ldr	r3, [pc, #8]	; (b462c <network_listen+0xc>)
   b4624:	681b      	ldr	r3, [r3, #0]
   b4626:	69db      	ldr	r3, [r3, #28]
   b4628:	9301      	str	r3, [sp, #4]
   b462a:	bd08      	pop	{r3, pc}
   b462c:	00030240 	.word	0x00030240

000b4630 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4630:	b508      	push	{r3, lr}
   b4632:	4b02      	ldr	r3, [pc, #8]	; (b463c <network_listening+0xc>)
   b4634:	681b      	ldr	r3, [r3, #0]
   b4636:	6a1b      	ldr	r3, [r3, #32]
   b4638:	9301      	str	r3, [sp, #4]
   b463a:	bd08      	pop	{r3, pc}
   b463c:	00030240 	.word	0x00030240

000b4640 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4640:	b508      	push	{r3, lr}
   b4642:	4b02      	ldr	r3, [pc, #8]	; (b464c <network_set_listen_timeout+0xc>)
   b4644:	681b      	ldr	r3, [r3, #0]
   b4646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4648:	9301      	str	r3, [sp, #4]
   b464a:	bd08      	pop	{r3, pc}
   b464c:	00030240 	.word	0x00030240

000b4650 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4650:	b508      	push	{r3, lr}
   b4652:	4b02      	ldr	r3, [pc, #8]	; (b465c <network_get_listen_timeout+0xc>)
   b4654:	681b      	ldr	r3, [r3, #0]
   b4656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4658:	9301      	str	r3, [sp, #4]
   b465a:	bd08      	pop	{r3, pc}
   b465c:	00030240 	.word	0x00030240

000b4660 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4660:	b508      	push	{r3, lr}
   b4662:	4b02      	ldr	r3, [pc, #8]	; (b466c <network_is_on+0xc>)
   b4664:	681b      	ldr	r3, [r3, #0]
   b4666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4668:	9301      	str	r3, [sp, #4]
   b466a:	bd08      	pop	{r3, pc}
   b466c:	00030240 	.word	0x00030240

000b4670 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4670:	b508      	push	{r3, lr}
   b4672:	4b02      	ldr	r3, [pc, #8]	; (b467c <network_is_off+0xc>)
   b4674:	681b      	ldr	r3, [r3, #0]
   b4676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4678:	9301      	str	r3, [sp, #4]
   b467a:	bd08      	pop	{r3, pc}
   b467c:	00030240 	.word	0x00030240

000b4680 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4680:	b508      	push	{r3, lr}
   b4682:	4b02      	ldr	r3, [pc, #8]	; (b468c <malloc+0xc>)
   b4684:	681b      	ldr	r3, [r3, #0]
   b4686:	681b      	ldr	r3, [r3, #0]
   b4688:	9301      	str	r3, [sp, #4]
   b468a:	bd08      	pop	{r3, pc}
   b468c:	0003021c 	.word	0x0003021c

000b4690 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4690:	b508      	push	{r3, lr}
   b4692:	4b02      	ldr	r3, [pc, #8]	; (b469c <free+0xc>)
   b4694:	681b      	ldr	r3, [r3, #0]
   b4696:	685b      	ldr	r3, [r3, #4]
   b4698:	9301      	str	r3, [sp, #4]
   b469a:	bd08      	pop	{r3, pc}
   b469c:	0003021c 	.word	0x0003021c

000b46a0 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b46a0:	b508      	push	{r3, lr}
   b46a2:	4b02      	ldr	r3, [pc, #8]	; (b46ac <__assert_func+0xc>)
   b46a4:	681b      	ldr	r3, [r3, #0]
   b46a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46a8:	9301      	str	r3, [sp, #4]
   b46aa:	bd08      	pop	{r3, pc}
   b46ac:	0003021c 	.word	0x0003021c

000b46b0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b46b0:	b508      	push	{r3, lr}
   b46b2:	4b02      	ldr	r3, [pc, #8]	; (b46bc <newlib_impure_ptr_callback+0xc>)
   b46b4:	681b      	ldr	r3, [r3, #0]
   b46b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b46b8:	9301      	str	r3, [sp, #4]
   b46ba:	bd08      	pop	{r3, pc}
   b46bc:	0003021c 	.word	0x0003021c

000b46c0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b46c0:	2100      	movs	r1, #0
   b46c2:	f7ff bf59 	b.w	b4578 <system_delay_ms>
	...

000b46c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b46c8:	4802      	ldr	r0, [pc, #8]	; (b46d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b46ca:	2300      	movs	r3, #0
   b46cc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b46ce:	f7ff be53 	b.w	b4378 <os_mutex_recursive_create>
   b46d2:	bf00      	nop
   b46d4:	2003e69c 	.word	0x2003e69c

000b46d8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b46d8:	2200      	movs	r2, #0
   b46da:	6840      	ldr	r0, [r0, #4]
   b46dc:	4611      	mov	r1, r2
   b46de:	f7ff bf87 	b.w	b45f0 <network_ready>

000b46e2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b46e2:	2200      	movs	r2, #0
   b46e4:	6840      	ldr	r0, [r0, #4]
   b46e6:	4611      	mov	r1, r2
   b46e8:	f7ff bfa2 	b.w	b4630 <network_listening>

000b46ec <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b46ec:	2200      	movs	r2, #0
   b46ee:	6840      	ldr	r0, [r0, #4]
   b46f0:	4611      	mov	r1, r2
   b46f2:	f7ff bfad 	b.w	b4650 <network_get_listen_timeout>

000b46f6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b46f6:	6840      	ldr	r0, [r0, #4]
   b46f8:	2200      	movs	r2, #0
   b46fa:	f7ff bfa1 	b.w	b4640 <network_set_listen_timeout>

000b46fe <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b46fe:	6840      	ldr	r0, [r0, #4]
   b4700:	2200      	movs	r2, #0
   b4702:	f081 0101 	eor.w	r1, r1, #1
   b4706:	f7ff bf8b 	b.w	b4620 <network_listen>

000b470a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b470a:	2300      	movs	r3, #0
   b470c:	6840      	ldr	r0, [r0, #4]
   b470e:	461a      	mov	r2, r3
   b4710:	4619      	mov	r1, r3
   b4712:	f7ff bf7d 	b.w	b4610 <network_off>

000b4716 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4716:	2300      	movs	r3, #0
   b4718:	6840      	ldr	r0, [r0, #4]
   b471a:	461a      	mov	r2, r3
   b471c:	4619      	mov	r1, r3
   b471e:	f7ff bf6f 	b.w	b4600 <network_on>

000b4722 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4722:	2200      	movs	r2, #0
   b4724:	6840      	ldr	r0, [r0, #4]
   b4726:	4611      	mov	r1, r2
   b4728:	f7ff bf52 	b.w	b45d0 <network_connecting>

000b472c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b472c:	6840      	ldr	r0, [r0, #4]
   b472e:	2200      	movs	r2, #0
   b4730:	2102      	movs	r1, #2
   b4732:	f7ff bf55 	b.w	b45e0 <network_disconnect>

000b4736 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4736:	2300      	movs	r3, #0
   b4738:	6840      	ldr	r0, [r0, #4]
   b473a:	461a      	mov	r2, r3
   b473c:	f7ff bf40 	b.w	b45c0 <network_connect>

000b4740 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b4740:	4b08      	ldr	r3, [pc, #32]	; (b4764 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b4742:	b510      	push	{r4, lr}
   b4744:	2428      	movs	r4, #40	; 0x28
   b4746:	4622      	mov	r2, r4
   b4748:	4618      	mov	r0, r3
   b474a:	2100      	movs	r1, #0
   b474c:	f000 fc98 	bl	b5080 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4750:	4b05      	ldr	r3, [pc, #20]	; (b4768 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b4752:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b4754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4758:	6042      	str	r2, [r0, #4]
   b475a:	2204      	movs	r2, #4
   b475c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b475e:	4a03      	ldr	r2, [pc, #12]	; (b476c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b4760:	601a      	str	r2, [r3, #0]
   b4762:	bd10      	pop	{r4, pc}
   b4764:	2003e6a8 	.word	0x2003e6a8
   b4768:	2003e6a0 	.word	0x2003e6a0
   b476c:	000b51fc 	.word	0x000b51fc

000b4770 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4770:	2200      	movs	r2, #0
   b4772:	6840      	ldr	r0, [r0, #4]
   b4774:	4611      	mov	r1, r2
   b4776:	f7ff bf5b 	b.w	b4630 <network_listening>

000b477a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b477a:	2200      	movs	r2, #0
   b477c:	6840      	ldr	r0, [r0, #4]
   b477e:	4611      	mov	r1, r2
   b4780:	f7ff bf66 	b.w	b4650 <network_get_listen_timeout>

000b4784 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4784:	6840      	ldr	r0, [r0, #4]
   b4786:	2200      	movs	r2, #0
   b4788:	f7ff bf5a 	b.w	b4640 <network_set_listen_timeout>

000b478c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b478c:	6840      	ldr	r0, [r0, #4]
   b478e:	2200      	movs	r2, #0
   b4790:	f081 0101 	eor.w	r1, r1, #1
   b4794:	f7ff bf44 	b.w	b4620 <network_listen>

000b4798 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4798:	2300      	movs	r3, #0
   b479a:	6840      	ldr	r0, [r0, #4]
   b479c:	461a      	mov	r2, r3
   b479e:	4619      	mov	r1, r3
   b47a0:	f7ff bf36 	b.w	b4610 <network_off>

000b47a4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b47a4:	2300      	movs	r3, #0
   b47a6:	6840      	ldr	r0, [r0, #4]
   b47a8:	461a      	mov	r2, r3
   b47aa:	4619      	mov	r1, r3
   b47ac:	f7ff bf28 	b.w	b4600 <network_on>

000b47b0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b47b0:	2200      	movs	r2, #0
   b47b2:	6840      	ldr	r0, [r0, #4]
   b47b4:	4611      	mov	r1, r2
   b47b6:	f7ff bf1b 	b.w	b45f0 <network_ready>

000b47ba <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b47ba:	2200      	movs	r2, #0
   b47bc:	6840      	ldr	r0, [r0, #4]
   b47be:	4611      	mov	r1, r2
   b47c0:	f7ff bf06 	b.w	b45d0 <network_connecting>

000b47c4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b47c4:	6840      	ldr	r0, [r0, #4]
   b47c6:	2200      	movs	r2, #0
   b47c8:	2102      	movs	r1, #2
   b47ca:	f7ff bf09 	b.w	b45e0 <network_disconnect>

000b47ce <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b47ce:	2300      	movs	r3, #0
   b47d0:	6840      	ldr	r0, [r0, #4]
   b47d2:	461a      	mov	r2, r3
   b47d4:	f7ff bef4 	b.w	b45c0 <network_connect>

000b47d8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b47d8:	4b02      	ldr	r3, [pc, #8]	; (b47e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b47da:	2203      	movs	r2, #3
   b47dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b47de:	4a02      	ldr	r2, [pc, #8]	; (b47e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b47e0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b47e2:	4770      	bx	lr
   b47e4:	2003e6d0 	.word	0x2003e6d0
   b47e8:	000b5238 	.word	0x000b5238

000b47ec <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b47ec:	4770      	bx	lr

000b47ee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b47ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b47f0:	4606      	mov	r6, r0
   b47f2:	4615      	mov	r5, r2
   b47f4:	460c      	mov	r4, r1
   b47f6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b47f8:	42bc      	cmp	r4, r7
   b47fa:	d006      	beq.n	b480a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b47fc:	6833      	ldr	r3, [r6, #0]
   b47fe:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4802:	689b      	ldr	r3, [r3, #8]
   b4804:	4630      	mov	r0, r6
   b4806:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4808:	e7f6      	b.n	b47f8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b480a:	4628      	mov	r0, r5
   b480c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b480e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b480e:	7c00      	ldrb	r0, [r0, #16]
   b4810:	2200      	movs	r2, #0
   b4812:	f7ff bde9 	b.w	b43e8 <hal_i2c_write>

000b4816 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4816:	7c00      	ldrb	r0, [r0, #16]
   b4818:	2100      	movs	r1, #0
   b481a:	f7ff bded 	b.w	b43f8 <hal_i2c_available>

000b481e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b481e:	7c00      	ldrb	r0, [r0, #16]
   b4820:	2100      	movs	r1, #0
   b4822:	f7ff bdf1 	b.w	b4408 <hal_i2c_read>

000b4826 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4826:	7c00      	ldrb	r0, [r0, #16]
   b4828:	2100      	movs	r1, #0
   b482a:	f7ff bdf5 	b.w	b4418 <hal_i2c_peek>

000b482e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b482e:	7c00      	ldrb	r0, [r0, #16]
   b4830:	2100      	movs	r1, #0
   b4832:	f7ff bdf9 	b.w	b4428 <hal_i2c_flush>

000b4836 <_ZN7TwoWireD0Ev>:
   b4836:	b510      	push	{r4, lr}
   b4838:	2114      	movs	r1, #20
   b483a:	4604      	mov	r4, r0
   b483c:	f7ff fc2b 	bl	b4096 <_ZdlPvj>
   b4840:	4620      	mov	r0, r4
   b4842:	bd10      	pop	{r4, pc}

000b4844 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4844:	b538      	push	{r3, r4, r5, lr}
   b4846:	4604      	mov	r4, r0
   b4848:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b484a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b484e:	2200      	movs	r2, #0
   b4850:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4854:	4b09      	ldr	r3, [pc, #36]	; (b487c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4856:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4858:	4608      	mov	r0, r1
   b485a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b485c:	4629      	mov	r1, r5
   b485e:	f7ff fdeb 	bl	b4438 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4862:	30bf      	adds	r0, #191	; 0xbf
   b4864:	d108      	bne.n	b4878 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4866:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4868:	07db      	lsls	r3, r3, #31
   b486a:	d505      	bpl.n	b4878 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b486c:	6868      	ldr	r0, [r5, #4]
   b486e:	f7ff ff0f 	bl	b4690 <free>
    free(conf.tx_buffer);
   b4872:	68e8      	ldr	r0, [r5, #12]
   b4874:	f7ff ff0c 	bl	b4690 <free>
}
   b4878:	4620      	mov	r0, r4
   b487a:	bd38      	pop	{r3, r4, r5, pc}
   b487c:	000b5274 	.word	0x000b5274

000b4880 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b4880:	7c00      	ldrb	r0, [r0, #16]
   b4882:	2200      	movs	r2, #0
   b4884:	f7ff bd90 	b.w	b43a8 <hal_i2c_set_speed>

000b4888 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b4888:	2300      	movs	r3, #0
   b488a:	7c00      	ldrb	r0, [r0, #16]
   b488c:	461a      	mov	r2, r3
   b488e:	4619      	mov	r1, r3
   b4890:	f7ff bd92 	b.w	b43b8 <hal_i2c_begin>

000b4894 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b4894:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b4896:	2200      	movs	r2, #0
   b4898:	2314      	movs	r3, #20
   b489a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b489e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b48a2:	780b      	ldrb	r3, [r1, #0]
   b48a4:	f88d 3008 	strb.w	r3, [sp, #8]
   b48a8:	684b      	ldr	r3, [r1, #4]
   b48aa:	9303      	str	r3, [sp, #12]
   b48ac:	68cb      	ldr	r3, [r1, #12]
   b48ae:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b48b0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b48b2:	7a0b      	ldrb	r3, [r1, #8]
   b48b4:	9305      	str	r3, [sp, #20]
   b48b6:	a901      	add	r1, sp, #4
   b48b8:	f7ff fdc6 	bl	b4448 <hal_i2c_request_ex>
}
   b48bc:	b007      	add	sp, #28
   b48be:	f85d fb04 	ldr.w	pc, [sp], #4

000b48c2 <_ZN7TwoWire11requestFromEhjh>:
{
   b48c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b48c4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b48c6:	f88d 1000 	strb.w	r1, [sp]
   b48ca:	f04f 0164 	mov.w	r1, #100	; 0x64
   b48ce:	9103      	str	r1, [sp, #12]
   b48d0:	bf18      	it	ne
   b48d2:	2301      	movne	r3, #1
   b48d4:	4669      	mov	r1, sp
    size_ = size;
   b48d6:	9201      	str	r2, [sp, #4]
   b48d8:	f88d 3008 	strb.w	r3, [sp, #8]
   b48dc:	f7ff ffda 	bl	b4894 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b48e0:	b005      	add	sp, #20
   b48e2:	f85d fb04 	ldr.w	pc, [sp], #4

000b48e6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b48e6:	2301      	movs	r3, #1
   b48e8:	f7ff bfeb 	b.w	b48c2 <_ZN7TwoWire11requestFromEhjh>

000b48ec <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b48ec:	7c00      	ldrb	r0, [r0, #16]
   b48ee:	2200      	movs	r2, #0
   b48f0:	f7ff bd6a 	b.w	b43c8 <hal_i2c_begin_transmission>

000b48f4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b48f4:	b2c9      	uxtb	r1, r1
   b48f6:	f7ff bff9 	b.w	b48ec <_ZN7TwoWire17beginTransmissionEh>

000b48fa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b48fa:	7c00      	ldrb	r0, [r0, #16]
   b48fc:	2200      	movs	r2, #0
   b48fe:	f7ff bd6b 	b.w	b43d8 <hal_i2c_end_transmission>

000b4902 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b4902:	2101      	movs	r1, #1
   b4904:	f7ff bff9 	b.w	b48fa <_ZN7TwoWire15endTransmissionEh>

000b4908 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4908:	4770      	bx	lr

000b490a <_ZN9IPAddressD0Ev>:
   b490a:	b510      	push	{r4, lr}
   b490c:	2118      	movs	r1, #24
   b490e:	4604      	mov	r4, r0
   b4910:	f7ff fbc1 	bl	b4096 <_ZdlPvj>
   b4914:	4620      	mov	r0, r4
   b4916:	bd10      	pop	{r4, pc}

000b4918 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4918:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b491a:	7d03      	ldrb	r3, [r0, #20]
   b491c:	2b06      	cmp	r3, #6
{
   b491e:	b08d      	sub	sp, #52	; 0x34
   b4920:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4922:	f100 0704 	add.w	r7, r0, #4
   b4926:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b492a:	d012      	beq.n	b4952 <_ZNK9IPAddress7printToER5Print+0x3a>
   b492c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4930:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4934:	220a      	movs	r2, #10
   b4936:	4630      	mov	r0, r6
   b4938:	f000 f959 	bl	b4bee <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b493c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b493e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4940:	d019      	beq.n	b4976 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4942:	2c00      	cmp	r4, #0
   b4944:	d0f4      	beq.n	b4930 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4946:	212e      	movs	r1, #46	; 0x2e
   b4948:	4630      	mov	r0, r6
   b494a:	f000 f937 	bl	b4bbc <_ZN5Print5printEc>
   b494e:	4404      	add	r4, r0
   b4950:	e7ee      	b.n	b4930 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4952:	232f      	movs	r3, #47	; 0x2f
   b4954:	466a      	mov	r2, sp
   b4956:	4639      	mov	r1, r7
   b4958:	200a      	movs	r0, #10
		buf[0] = 0;
   b495a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b495e:	f7ff fd7b 	bl	b4458 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4962:	4668      	mov	r0, sp
   b4964:	f000 fbc2 	bl	b50ec <strlen>
   b4968:	6833      	ldr	r3, [r6, #0]
   b496a:	4602      	mov	r2, r0
   b496c:	68db      	ldr	r3, [r3, #12]
   b496e:	4669      	mov	r1, sp
   b4970:	4630      	mov	r0, r6
   b4972:	4798      	blx	r3
   b4974:	4604      	mov	r4, r0
    }
    return n;
}
   b4976:	4620      	mov	r0, r4
   b4978:	b00d      	add	sp, #52	; 0x34
   b497a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b497c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b497c:	b510      	push	{r4, lr}
   b497e:	4b05      	ldr	r3, [pc, #20]	; (b4994 <_ZN9IPAddressC1Ev+0x18>)
   b4980:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4982:	2211      	movs	r2, #17
   b4984:	f840 3b04 	str.w	r3, [r0], #4
   b4988:	2100      	movs	r1, #0
   b498a:	f000 fb79 	bl	b5080 <memset>
}
   b498e:	4620      	mov	r0, r4
   b4990:	bd10      	pop	{r4, pc}
   b4992:	bf00      	nop
   b4994:	000b529c 	.word	0x000b529c

000b4998 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4998:	4603      	mov	r3, r0
   b499a:	4a07      	ldr	r2, [pc, #28]	; (b49b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b499c:	b510      	push	{r4, lr}
   b499e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b49a2:	f101 0210 	add.w	r2, r1, #16
   b49a6:	f851 4b04 	ldr.w	r4, [r1], #4
   b49aa:	f843 4b04 	str.w	r4, [r3], #4
   b49ae:	4291      	cmp	r1, r2
   b49b0:	d1f9      	bne.n	b49a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b49b2:	780a      	ldrb	r2, [r1, #0]
   b49b4:	701a      	strb	r2, [r3, #0]
}
   b49b6:	bd10      	pop	{r4, pc}
   b49b8:	000b529c 	.word	0x000b529c

000b49bc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b49bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b49be:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b49c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b49c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b49ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b49ce:	2304      	movs	r3, #4
   b49d0:	6041      	str	r1, [r0, #4]
   b49d2:	7503      	strb	r3, [r0, #20]
}
   b49d4:	bd10      	pop	{r4, pc}
	...

000b49d8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b49d8:	b507      	push	{r0, r1, r2, lr}
   b49da:	4b06      	ldr	r3, [pc, #24]	; (b49f4 <_ZN9IPAddressC1EPKh+0x1c>)
   b49dc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b49de:	78cb      	ldrb	r3, [r1, #3]
   b49e0:	9300      	str	r3, [sp, #0]
   b49e2:	788b      	ldrb	r3, [r1, #2]
   b49e4:	784a      	ldrb	r2, [r1, #1]
   b49e6:	7809      	ldrb	r1, [r1, #0]
   b49e8:	f7ff ffe8 	bl	b49bc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b49ec:	b003      	add	sp, #12
   b49ee:	f85d fb04 	ldr.w	pc, [sp], #4
   b49f2:	bf00      	nop
   b49f4:	000b529c 	.word	0x000b529c

000b49f8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b49f8:	4b01      	ldr	r3, [pc, #4]	; (b4a00 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b49fa:	4a02      	ldr	r2, [pc, #8]	; (b4a04 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b49fc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b49fe:	4770      	bx	lr
   b4a00:	2003e6d8 	.word	0x2003e6d8
   b4a04:	000b52a8 	.word	0x000b52a8

000b4a08 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4a08:	2300      	movs	r3, #0
   b4a0a:	6840      	ldr	r0, [r0, #4]
   b4a0c:	461a      	mov	r2, r3
   b4a0e:	f7ff bdd7 	b.w	b45c0 <network_connect>

000b4a12 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4a12:	6840      	ldr	r0, [r0, #4]
   b4a14:	2200      	movs	r2, #0
   b4a16:	2102      	movs	r1, #2
   b4a18:	f7ff bde2 	b.w	b45e0 <network_disconnect>

000b4a1c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4a1c:	2200      	movs	r2, #0
   b4a1e:	6840      	ldr	r0, [r0, #4]
   b4a20:	4611      	mov	r1, r2
   b4a22:	f7ff bdd5 	b.w	b45d0 <network_connecting>

000b4a26 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4a26:	2200      	movs	r2, #0
   b4a28:	6840      	ldr	r0, [r0, #4]
   b4a2a:	4611      	mov	r1, r2
   b4a2c:	f7ff bde0 	b.w	b45f0 <network_ready>

000b4a30 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4a30:	2300      	movs	r3, #0
   b4a32:	6840      	ldr	r0, [r0, #4]
   b4a34:	461a      	mov	r2, r3
   b4a36:	4619      	mov	r1, r3
   b4a38:	f7ff bde2 	b.w	b4600 <network_on>

000b4a3c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4a3c:	2300      	movs	r3, #0
   b4a3e:	6840      	ldr	r0, [r0, #4]
   b4a40:	461a      	mov	r2, r3
   b4a42:	4619      	mov	r1, r3
   b4a44:	f7ff bde4 	b.w	b4610 <network_off>

000b4a48 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4a48:	6840      	ldr	r0, [r0, #4]
   b4a4a:	2100      	movs	r1, #0
   b4a4c:	f7ff be08 	b.w	b4660 <network_is_on>

000b4a50 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4a50:	6840      	ldr	r0, [r0, #4]
   b4a52:	2100      	movs	r1, #0
   b4a54:	f7ff be0c 	b.w	b4670 <network_is_off>

000b4a58 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4a58:	6840      	ldr	r0, [r0, #4]
   b4a5a:	2200      	movs	r2, #0
   b4a5c:	f081 0101 	eor.w	r1, r1, #1
   b4a60:	f7ff bdde 	b.w	b4620 <network_listen>

000b4a64 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4a64:	6840      	ldr	r0, [r0, #4]
   b4a66:	2200      	movs	r2, #0
   b4a68:	f7ff bdea 	b.w	b4640 <network_set_listen_timeout>

000b4a6c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4a6c:	2200      	movs	r2, #0
   b4a6e:	6840      	ldr	r0, [r0, #4]
   b4a70:	4611      	mov	r1, r2
   b4a72:	f7ff bded 	b.w	b4650 <network_get_listen_timeout>

000b4a76 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4a76:	2200      	movs	r2, #0
   b4a78:	6840      	ldr	r0, [r0, #4]
   b4a7a:	4611      	mov	r1, r2
   b4a7c:	f7ff bdd8 	b.w	b4630 <network_listening>

000b4a80 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4a84:	b095      	sub	sp, #84	; 0x54
   b4a86:	4614      	mov	r4, r2
   b4a88:	460d      	mov	r5, r1
   b4a8a:	4607      	mov	r7, r0
    IPAddress addr;
   b4a8c:	f7ff ff76 	bl	b497c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4a90:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4a92:	221c      	movs	r2, #28
   b4a94:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4a96:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4a98:	f000 faf2 	bl	b5080 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4a9c:	2340      	movs	r3, #64	; 0x40
   b4a9e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4aa0:	4620      	mov	r0, r4
   b4aa2:	466b      	mov	r3, sp
   b4aa4:	aa0c      	add	r2, sp, #48	; 0x30
   b4aa6:	2100      	movs	r1, #0
   b4aa8:	f7ff fce6 	bl	b4478 <netdb_getaddrinfo>
    if (!r) {
   b4aac:	4604      	mov	r4, r0
   b4aae:	2800      	cmp	r0, #0
   b4ab0:	d14b      	bne.n	b4b4a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4ab2:	4602      	mov	r2, r0
   b4ab4:	2101      	movs	r1, #1
   b4ab6:	6868      	ldr	r0, [r5, #4]
   b4ab8:	f7ff fd9a 	bl	b45f0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4abc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4abe:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4ac0:	4622      	mov	r2, r4
   b4ac2:	6868      	ldr	r0, [r5, #4]
   b4ac4:	f7ff fd94 	bl	b45f0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4ac8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4aca:	4681      	mov	r9, r0
        bool ok = false;
   b4acc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4ace:	2e00      	cmp	r6, #0
   b4ad0:	d03b      	beq.n	b4b4a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4ad2:	2900      	cmp	r1, #0
   b4ad4:	d139      	bne.n	b4b4a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4ad6:	6873      	ldr	r3, [r6, #4]
   b4ad8:	2b02      	cmp	r3, #2
   b4ada:	d003      	beq.n	b4ae4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4adc:	2b0a      	cmp	r3, #10
   b4ade:	d011      	beq.n	b4b04 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4ae0:	69f6      	ldr	r6, [r6, #28]
   b4ae2:	e7f4      	b.n	b4ace <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4ae4:	f1b8 0f00 	cmp.w	r8, #0
   b4ae8:	d0fa      	beq.n	b4ae0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4aea:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4aec:	a806      	add	r0, sp, #24
   b4aee:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4af0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4af2:	f7ff ff71 	bl	b49d8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4af8:	1d3c      	adds	r4, r7, #4
   b4afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4afc:	682b      	ldr	r3, [r5, #0]
   b4afe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4b00:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4b02:	e7ed      	b.n	b4ae0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4b04:	f1b9 0f00 	cmp.w	r9, #0
   b4b08:	d0ea      	beq.n	b4ae0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4b0a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4b0c:	2210      	movs	r2, #16
   b4b0e:	a801      	add	r0, sp, #4
   b4b10:	f000 fab6 	bl	b5080 <memset>
                    a.v = 6;
   b4b14:	2306      	movs	r3, #6
   b4b16:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4b1a:	ad01      	add	r5, sp, #4
   b4b1c:	f104 0308 	add.w	r3, r4, #8
   b4b20:	3418      	adds	r4, #24
   b4b22:	6818      	ldr	r0, [r3, #0]
   b4b24:	6859      	ldr	r1, [r3, #4]
   b4b26:	462a      	mov	r2, r5
   b4b28:	c203      	stmia	r2!, {r0, r1}
   b4b2a:	3308      	adds	r3, #8
   b4b2c:	42a3      	cmp	r3, r4
   b4b2e:	4615      	mov	r5, r2
   b4b30:	d1f7      	bne.n	b4b22 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4b32:	a901      	add	r1, sp, #4
   b4b34:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4b36:	ad07      	add	r5, sp, #28
   b4b38:	f7ff ff2e 	bl	b4998 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4b3e:	1d3c      	adds	r4, r7, #4
   b4b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4b42:	682b      	ldr	r3, [r5, #0]
   b4b44:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4b46:	4649      	mov	r1, r9
   b4b48:	e7ca      	b.n	b4ae0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4b4a:	9800      	ldr	r0, [sp, #0]
   b4b4c:	f7ff fc8c 	bl	b4468 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4b50:	4638      	mov	r0, r7
   b4b52:	b015      	add	sp, #84	; 0x54
   b4b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4b58 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4b58:	4b02      	ldr	r3, [pc, #8]	; (b4b64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4b5a:	4a03      	ldr	r2, [pc, #12]	; (b4b68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4b5c:	601a      	str	r2, [r3, #0]
   b4b5e:	2200      	movs	r2, #0
   b4b60:	605a      	str	r2, [r3, #4]

} // spark
   b4b62:	4770      	bx	lr
   b4b64:	2003e6dc 	.word	0x2003e6dc
   b4b68:	000b52b4 	.word	0x000b52b4

000b4b6c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4b6e:	4606      	mov	r6, r0
   b4b70:	460d      	mov	r5, r1
  size_t n = 0;
   b4b72:	188f      	adds	r7, r1, r2
   b4b74:	2400      	movs	r4, #0
  while (size--) {
   b4b76:	42bd      	cmp	r5, r7
   b4b78:	d00c      	beq.n	b4b94 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4b7a:	6833      	ldr	r3, [r6, #0]
   b4b7c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4b80:	689b      	ldr	r3, [r3, #8]
   b4b82:	4630      	mov	r0, r6
   b4b84:	4798      	blx	r3
     if (chunk>=0)
   b4b86:	1e03      	subs	r3, r0, #0
   b4b88:	db01      	blt.n	b4b8e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4b8a:	441c      	add	r4, r3
  while (size--) {
   b4b8c:	e7f3      	b.n	b4b76 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4b8e:	2c00      	cmp	r4, #0
   b4b90:	bf08      	it	eq
   b4b92:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4b94:	4620      	mov	r0, r4
   b4b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4b98 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4b98:	b513      	push	{r0, r1, r4, lr}
   b4b9a:	4604      	mov	r4, r0
    }
   b4b9c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4b9e:	b159      	cbz	r1, b4bb8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4ba0:	9101      	str	r1, [sp, #4]
   b4ba2:	f000 faa3 	bl	b50ec <strlen>
   b4ba6:	6823      	ldr	r3, [r4, #0]
   b4ba8:	9901      	ldr	r1, [sp, #4]
   b4baa:	68db      	ldr	r3, [r3, #12]
   b4bac:	4602      	mov	r2, r0
   b4bae:	4620      	mov	r0, r4
    }
   b4bb0:	b002      	add	sp, #8
   b4bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4bb6:	4718      	bx	r3
    }
   b4bb8:	b002      	add	sp, #8
   b4bba:	bd10      	pop	{r4, pc}

000b4bbc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4bbc:	6803      	ldr	r3, [r0, #0]
   b4bbe:	689b      	ldr	r3, [r3, #8]
   b4bc0:	4718      	bx	r3

000b4bc2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4bc2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4bc4:	210d      	movs	r1, #13
{
   b4bc6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4bc8:	f7ff fff8 	bl	b4bbc <_ZN5Print5printEc>
  n += print('\n');
   b4bcc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4bce:	4604      	mov	r4, r0
  n += print('\n');
   b4bd0:	4628      	mov	r0, r5
   b4bd2:	f7ff fff3 	bl	b4bbc <_ZN5Print5printEc>
  return n;
}
   b4bd6:	4420      	add	r0, r4
   b4bd8:	bd38      	pop	{r3, r4, r5, pc}

000b4bda <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b4bda:	b538      	push	{r3, r4, r5, lr}
   b4bdc:	4605      	mov	r5, r0
  return write(str);
   b4bde:	f7ff ffdb 	bl	b4b98 <_ZN5Print5writeEPKc>
   b4be2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b4be4:	4628      	mov	r0, r5
   b4be6:	f7ff ffec 	bl	b4bc2 <_ZN5Print7printlnEv>
  return n;
}
   b4bea:	4420      	add	r0, r4
   b4bec:	bd38      	pop	{r3, r4, r5, pc}

000b4bee <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4bee:	b530      	push	{r4, r5, lr}
   b4bf0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4bf2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4bf4:	2a01      	cmp	r2, #1
  *str = '\0';
   b4bf6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4bfa:	bf98      	it	ls
   b4bfc:	220a      	movls	r2, #10
   b4bfe:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4c00:	460d      	mov	r5, r1
   b4c02:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4c06:	fb01 5312 	mls	r3, r1, r2, r5
   b4c0a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4c0e:	2b09      	cmp	r3, #9
   b4c10:	bf94      	ite	ls
   b4c12:	3330      	addls	r3, #48	; 0x30
   b4c14:	3337      	addhi	r3, #55	; 0x37
   b4c16:	b2db      	uxtb	r3, r3
  } while(n);
   b4c18:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4c1a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4c1e:	d9ef      	bls.n	b4c00 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4c20:	4621      	mov	r1, r4
   b4c22:	f7ff ffb9 	bl	b4b98 <_ZN5Print5writeEPKc>
}
   b4c26:	b00b      	add	sp, #44	; 0x2c
   b4c28:	bd30      	pop	{r4, r5, pc}
	...

000b4c2c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4c2c:	4b01      	ldr	r3, [pc, #4]	; (b4c34 <_GLOBAL__sub_I_RGB+0x8>)
   b4c2e:	2200      	movs	r2, #0
   b4c30:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4c32:	4770      	bx	lr
   b4c34:	2003e6e4 	.word	0x2003e6e4

000b4c38 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4c38:	4b05      	ldr	r3, [pc, #20]	; (b4c50 <_GLOBAL__sub_I_System+0x18>)
   b4c3a:	2202      	movs	r2, #2
   b4c3c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4c3e:	4b05      	ldr	r3, [pc, #20]	; (b4c54 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4c40:	4a05      	ldr	r2, [pc, #20]	; (b4c58 <_GLOBAL__sub_I_System+0x20>)
   b4c42:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4c44:	2000      	movs	r0, #0
   b4c46:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4c4a:	f7ff bc8d 	b.w	b4568 <set_system_mode>
   b4c4e:	bf00      	nop
   b4c50:	2003e700 	.word	0x2003e700
   b4c54:	2003e6f4 	.word	0x2003e6f4
   b4c58:	ffff0000 	.word	0xffff0000

000b4c5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4c5c:	4b02      	ldr	r3, [pc, #8]	; (b4c68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4c5e:	681a      	ldr	r2, [r3, #0]
   b4c60:	4b02      	ldr	r3, [pc, #8]	; (b4c6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4c62:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4c64:	4770      	bx	lr
   b4c66:	bf00      	nop
   b4c68:	2003e624 	.word	0x2003e624
   b4c6c:	2003e704 	.word	0x2003e704

000b4c70 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4c70:	4770      	bx	lr

000b4c72 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4c72:	7441      	strb	r1, [r0, #17]
}
   b4c74:	4770      	bx	lr

000b4c76 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4c76:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4c78:	7c00      	ldrb	r0, [r0, #16]
   b4c7a:	f7ff fc2d 	bl	b44d8 <hal_usart_available_data_for_write>
}
   b4c7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4c82:	bd08      	pop	{r3, pc}

000b4c84 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4c84:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4c86:	7c00      	ldrb	r0, [r0, #16]
   b4c88:	f7ff fc06 	bl	b4498 <hal_usart_available>
}
   b4c8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4c90:	bd08      	pop	{r3, pc}

000b4c92 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4c92:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4c94:	7c00      	ldrb	r0, [r0, #16]
   b4c96:	f7ff fc0f 	bl	b44b8 <hal_usart_peek>
}
   b4c9a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c9e:	bd08      	pop	{r3, pc}

000b4ca0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4ca0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4ca2:	7c00      	ldrb	r0, [r0, #16]
   b4ca4:	f7ff fc00 	bl	b44a8 <hal_usart_read>
}
   b4ca8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4cac:	bd08      	pop	{r3, pc}

000b4cae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4cae:	7c00      	ldrb	r0, [r0, #16]
   b4cb0:	f7ff bc0a 	b.w	b44c8 <hal_usart_flush>

000b4cb4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4cb6:	7c45      	ldrb	r5, [r0, #17]
{
   b4cb8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4cba:	b12d      	cbz	r5, b4cc8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4cbc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4cbe:	b003      	add	sp, #12
   b4cc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4cc4:	f7ff bbe0 	b.w	b4488 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4cc8:	7c00      	ldrb	r0, [r0, #16]
   b4cca:	9101      	str	r1, [sp, #4]
   b4ccc:	f7ff fc04 	bl	b44d8 <hal_usart_available_data_for_write>
   b4cd0:	2800      	cmp	r0, #0
   b4cd2:	9901      	ldr	r1, [sp, #4]
   b4cd4:	dcf2      	bgt.n	b4cbc <_ZN11USARTSerial5writeEh+0x8>
}
   b4cd6:	4628      	mov	r0, r5
   b4cd8:	b003      	add	sp, #12
   b4cda:	bd30      	pop	{r4, r5, pc}

000b4cdc <_ZN11USARTSerialD0Ev>:
   b4cdc:	b510      	push	{r4, lr}
   b4cde:	2114      	movs	r1, #20
   b4ce0:	4604      	mov	r4, r0
   b4ce2:	f7ff f9d8 	bl	b4096 <_ZdlPvj>
   b4ce6:	4620      	mov	r0, r4
   b4ce8:	bd10      	pop	{r4, pc}
	...

000b4cec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4cec:	b510      	push	{r4, lr}
   b4cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4cf2:	4604      	mov	r4, r0
   b4cf4:	4608      	mov	r0, r1
   b4cf6:	4611      	mov	r1, r2
   b4cf8:	2200      	movs	r2, #0
   b4cfa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4cfe:	4b04      	ldr	r3, [pc, #16]	; (b4d10 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4d00:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4d02:	2301      	movs	r3, #1
  _serial = serial;
   b4d04:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4d06:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4d08:	f7ff fbee 	bl	b44e8 <hal_usart_init_ex>
}
   b4d0c:	4620      	mov	r0, r4
   b4d0e:	bd10      	pop	{r4, pc}
   b4d10:	000b530c 	.word	0x000b530c

000b4d14 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4d14:	7441      	strb	r1, [r0, #17]
}
   b4d16:	4770      	bx	lr

000b4d18 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4d18:	4770      	bx	lr

000b4d1a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4d1a:	4770      	bx	lr

000b4d1c <_ZN9USBSerial4readEv>:
{
   b4d1c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4d1e:	2100      	movs	r1, #0
   b4d20:	7c00      	ldrb	r0, [r0, #16]
   b4d22:	f7ff fc09 	bl	b4538 <HAL_USB_USART_Receive_Data>
}
   b4d26:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4d2a:	bd08      	pop	{r3, pc}

000b4d2c <_ZN9USBSerial4peekEv>:
{
   b4d2c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4d2e:	2101      	movs	r1, #1
   b4d30:	7c00      	ldrb	r0, [r0, #16]
   b4d32:	f7ff fc01 	bl	b4538 <HAL_USB_USART_Receive_Data>
}
   b4d36:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4d3a:	bd08      	pop	{r3, pc}

000b4d3c <_ZN9USBSerial17availableForWriteEv>:
{
   b4d3c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4d3e:	7c00      	ldrb	r0, [r0, #16]
   b4d40:	f7ff fbf2 	bl	b4528 <HAL_USB_USART_Available_Data_For_Write>
}
   b4d44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4d48:	bd08      	pop	{r3, pc}

000b4d4a <_ZN9USBSerial9availableEv>:
{
   b4d4a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4d4c:	7c00      	ldrb	r0, [r0, #16]
   b4d4e:	f7ff fbe3 	bl	b4518 <HAL_USB_USART_Available_Data>
}
   b4d52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4d56:	bd08      	pop	{r3, pc}

000b4d58 <_ZN9USBSerial5writeEh>:
{
   b4d58:	b513      	push	{r0, r1, r4, lr}
   b4d5a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4d5c:	7c00      	ldrb	r0, [r0, #16]
{
   b4d5e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4d60:	f7ff fbe2 	bl	b4528 <HAL_USB_USART_Available_Data_For_Write>
   b4d64:	2800      	cmp	r0, #0
   b4d66:	9901      	ldr	r1, [sp, #4]
   b4d68:	dc01      	bgt.n	b4d6e <_ZN9USBSerial5writeEh+0x16>
   b4d6a:	7c60      	ldrb	r0, [r4, #17]
   b4d6c:	b120      	cbz	r0, b4d78 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4d6e:	7c20      	ldrb	r0, [r4, #16]
   b4d70:	f7ff fbea 	bl	b4548 <HAL_USB_USART_Send_Data>
   b4d74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4d78:	b002      	add	sp, #8
   b4d7a:	bd10      	pop	{r4, pc}

000b4d7c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4d7c:	7c00      	ldrb	r0, [r0, #16]
   b4d7e:	f7ff bbeb 	b.w	b4558 <HAL_USB_USART_Flush_Data>

000b4d82 <_ZN9USBSerialD0Ev>:
   b4d82:	b510      	push	{r4, lr}
   b4d84:	2114      	movs	r1, #20
   b4d86:	4604      	mov	r4, r0
   b4d88:	f7ff f985 	bl	b4096 <_ZdlPvj>
   b4d8c:	4620      	mov	r0, r4
   b4d8e:	bd10      	pop	{r4, pc}

000b4d90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4d90:	b510      	push	{r4, lr}
   b4d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4d96:	4604      	mov	r4, r0
   b4d98:	4608      	mov	r0, r1
   b4d9a:	2100      	movs	r1, #0
   b4d9c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4da0:	4b04      	ldr	r3, [pc, #16]	; (b4db4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4da2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4da4:	2301      	movs	r3, #1
  _serial = serial;
   b4da6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4da8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4daa:	4611      	mov	r1, r2
   b4dac:	f7ff fba4 	bl	b44f8 <HAL_USB_USART_Init>
}
   b4db0:	4620      	mov	r0, r4
   b4db2:	bd10      	pop	{r4, pc}
   b4db4:	000b533c 	.word	0x000b533c

000b4db8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4db8:	7c00      	ldrb	r0, [r0, #16]
   b4dba:	2200      	movs	r2, #0
   b4dbc:	f7ff bba4 	b.w	b4508 <HAL_USB_USART_Begin>

000b4dc0 <_Z19acquireSerialBufferv>:
{
   b4dc0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4dc2:	2214      	movs	r2, #20
{
   b4dc4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4dc6:	2100      	movs	r1, #0
   b4dc8:	f000 f95a 	bl	b5080 <memset>
}
   b4dcc:	4620      	mov	r0, r4
   b4dce:	bd10      	pop	{r4, pc}

000b4dd0 <_Z16_fetch_usbserialv>:
{
   b4dd0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4dd2:	4c0f      	ldr	r4, [pc, #60]	; (b4e10 <_Z16_fetch_usbserialv+0x40>)
{
   b4dd4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4dd6:	a803      	add	r0, sp, #12
   b4dd8:	f7ff fff2 	bl	b4dc0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4ddc:	7821      	ldrb	r1, [r4, #0]
   b4dde:	f3bf 8f5b 	dmb	ish
   b4de2:	f011 0101 	ands.w	r1, r1, #1
   b4de6:	d10f      	bne.n	b4e08 <_Z16_fetch_usbserialv+0x38>
   b4de8:	4620      	mov	r0, r4
   b4dea:	9101      	str	r1, [sp, #4]
   b4dec:	f7ff f955 	bl	b409a <__cxa_guard_acquire>
   b4df0:	9901      	ldr	r1, [sp, #4]
   b4df2:	b148      	cbz	r0, b4e08 <_Z16_fetch_usbserialv+0x38>
   b4df4:	aa03      	add	r2, sp, #12
   b4df6:	4807      	ldr	r0, [pc, #28]	; (b4e14 <_Z16_fetch_usbserialv+0x44>)
   b4df8:	f7ff ffca 	bl	b4d90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4dfc:	4620      	mov	r0, r4
   b4dfe:	f7ff f951 	bl	b40a4 <__cxa_guard_release>
   b4e02:	4805      	ldr	r0, [pc, #20]	; (b4e18 <_Z16_fetch_usbserialv+0x48>)
   b4e04:	f000 f928 	bl	b5058 <atexit>
	return _usbserial;
}
   b4e08:	4802      	ldr	r0, [pc, #8]	; (b4e14 <_Z16_fetch_usbserialv+0x44>)
   b4e0a:	b008      	add	sp, #32
   b4e0c:	bd10      	pop	{r4, pc}
   b4e0e:	bf00      	nop
   b4e10:	2003e708 	.word	0x2003e708
   b4e14:	2003e70c 	.word	0x2003e70c
   b4e18:	000b4d19 	.word	0x000b4d19

000b4e1c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4e1c:	4b01      	ldr	r3, [pc, #4]	; (b4e24 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4e1e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4e20:	4770      	bx	lr
   b4e22:	bf00      	nop
   b4e24:	2003e628 	.word	0x2003e628

000b4e28 <serialEventRun>:
{
   b4e28:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4e2a:	4b0b      	ldr	r3, [pc, #44]	; (b4e58 <serialEventRun+0x30>)
   b4e2c:	b143      	cbz	r3, b4e40 <serialEventRun+0x18>
   b4e2e:	f7ff ffcf 	bl	b4dd0 <_Z16_fetch_usbserialv>
   b4e32:	6803      	ldr	r3, [r0, #0]
   b4e34:	691b      	ldr	r3, [r3, #16]
   b4e36:	4798      	blx	r3
   b4e38:	2800      	cmp	r0, #0
   b4e3a:	dd01      	ble.n	b4e40 <serialEventRun+0x18>
        serialEvent();
   b4e3c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4e40:	4b06      	ldr	r3, [pc, #24]	; (b4e5c <serialEventRun+0x34>)
   b4e42:	b143      	cbz	r3, b4e56 <serialEventRun+0x2e>
   b4e44:	f000 f8e2 	bl	b500c <_Z22__fetch_global_Serial1v>
   b4e48:	6803      	ldr	r3, [r0, #0]
   b4e4a:	691b      	ldr	r3, [r3, #16]
   b4e4c:	4798      	blx	r3
   b4e4e:	2800      	cmp	r0, #0
   b4e50:	dd01      	ble.n	b4e56 <serialEventRun+0x2e>
        serialEvent1();
   b4e52:	f3af 8000 	nop.w
}
   b4e56:	bd08      	pop	{r3, pc}
	...

000b4e60 <_post_loop>:
{
   b4e60:	b508      	push	{r3, lr}
	serialEventRun();
   b4e62:	f7ff ffe1 	bl	b4e28 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4e66:	f7ff fa97 	bl	b4398 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4e6a:	4b01      	ldr	r3, [pc, #4]	; (b4e70 <_post_loop+0x10>)
   b4e6c:	6018      	str	r0, [r3, #0]
}
   b4e6e:	bd08      	pop	{r3, pc}
   b4e70:	2003e728 	.word	0x2003e728

000b4e74 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4e74:	4805      	ldr	r0, [pc, #20]	; (b4e8c <_Z33system_initialize_user_backup_ramv+0x18>)
   b4e76:	4a06      	ldr	r2, [pc, #24]	; (b4e90 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4e78:	4906      	ldr	r1, [pc, #24]	; (b4e94 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4e7a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4e7c:	1a12      	subs	r2, r2, r0
   b4e7e:	f000 f8f1 	bl	b5064 <memcpy>
    __backup_sram_signature = signature;
   b4e82:	4b05      	ldr	r3, [pc, #20]	; (b4e98 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4e84:	4a05      	ldr	r2, [pc, #20]	; (b4e9c <_Z33system_initialize_user_backup_ramv+0x28>)
   b4e86:	601a      	str	r2, [r3, #0]
}
   b4e88:	bd08      	pop	{r3, pc}
   b4e8a:	bf00      	nop
   b4e8c:	2003f400 	.word	0x2003f400
   b4e90:	2003f404 	.word	0x2003f404
   b4e94:	000b5424 	.word	0x000b5424
   b4e98:	2003f400 	.word	0x2003f400
   b4e9c:	9a271c1e 	.word	0x9a271c1e

000b4ea0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4ea0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4ea2:	2300      	movs	r3, #0
   b4ea4:	9300      	str	r3, [sp, #0]
   b4ea6:	461a      	mov	r2, r3
   b4ea8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4eac:	f7ff fb76 	bl	b459c <system_ctrl_set_result>
}
   b4eb0:	b003      	add	sp, #12
   b4eb2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4eb8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4eb8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4eba:	8843      	ldrh	r3, [r0, #2]
   b4ebc:	2b0a      	cmp	r3, #10
   b4ebe:	d008      	beq.n	b4ed2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4ec0:	2b50      	cmp	r3, #80	; 0x50
   b4ec2:	d10b      	bne.n	b4edc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4ec4:	4b09      	ldr	r3, [pc, #36]	; (b4eec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4ec6:	681b      	ldr	r3, [r3, #0]
   b4ec8:	b14b      	cbz	r3, b4ede <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4eca:	b003      	add	sp, #12
   b4ecc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4ed0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4ed2:	f7ff ffe5 	bl	b4ea0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4ed6:	b003      	add	sp, #12
   b4ed8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4edc:	2300      	movs	r3, #0
   b4ede:	9300      	str	r3, [sp, #0]
   b4ee0:	461a      	mov	r2, r3
   b4ee2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4ee6:	f7ff fb59 	bl	b459c <system_ctrl_set_result>
}
   b4eea:	e7f4      	b.n	b4ed6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4eec:	2003e724 	.word	0x2003e724

000b4ef0 <module_user_init_hook>:
{
   b4ef0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4ef2:	4812      	ldr	r0, [pc, #72]	; (b4f3c <module_user_init_hook+0x4c>)
   b4ef4:	2100      	movs	r1, #0
   b4ef6:	f7ff fbdb 	bl	b46b0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4efa:	4b11      	ldr	r3, [pc, #68]	; (b4f40 <module_user_init_hook+0x50>)
   b4efc:	681a      	ldr	r2, [r3, #0]
   b4efe:	4b11      	ldr	r3, [pc, #68]	; (b4f44 <module_user_init_hook+0x54>)
   b4f00:	429a      	cmp	r2, r3
   b4f02:	4b11      	ldr	r3, [pc, #68]	; (b4f48 <module_user_init_hook+0x58>)
   b4f04:	bf0c      	ite	eq
   b4f06:	2201      	moveq	r2, #1
   b4f08:	2200      	movne	r2, #0
   b4f0a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4f0c:	d001      	beq.n	b4f12 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4f0e:	f7ff ffb1 	bl	b4e74 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4f12:	f7ff fa39 	bl	b4388 <HAL_RNG_GetRandomNumber>
   b4f16:	4604      	mov	r4, r0
    srand(seed);
   b4f18:	f000 f8ba 	bl	b5090 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4f1c:	4b0b      	ldr	r3, [pc, #44]	; (b4f4c <module_user_init_hook+0x5c>)
   b4f1e:	b113      	cbz	r3, b4f26 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4f20:	4620      	mov	r0, r4
   b4f22:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4f26:	2100      	movs	r1, #0
   b4f28:	4808      	ldr	r0, [pc, #32]	; (b4f4c <module_user_init_hook+0x5c>)
   b4f2a:	f7ff fb41 	bl	b45b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4f32:	4807      	ldr	r0, [pc, #28]	; (b4f50 <module_user_init_hook+0x60>)
   b4f34:	2100      	movs	r1, #0
   b4f36:	f7ff bb27 	b.w	b4588 <system_ctrl_set_app_request_handler>
   b4f3a:	bf00      	nop
   b4f3c:	000b4e1d 	.word	0x000b4e1d
   b4f40:	2003f400 	.word	0x2003f400
   b4f44:	9a271c1e 	.word	0x9a271c1e
   b4f48:	2003e720 	.word	0x2003e720
   b4f4c:	00000000 	.word	0x00000000
   b4f50:	000b4eb9 	.word	0x000b4eb9

000b4f54 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4f54:	4770      	bx	lr
	...

000b4f58 <_Z17acquireWireBufferv>:
{
   b4f58:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b4f5a:	4b0a      	ldr	r3, [pc, #40]	; (b4f84 <_Z17acquireWireBufferv+0x2c>)
   b4f5c:	6003      	str	r3, [r0, #0]
   b4f5e:	2301      	movs	r3, #1
{
   b4f60:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b4f62:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b4f64:	4908      	ldr	r1, [pc, #32]	; (b4f88 <_Z17acquireWireBufferv+0x30>)
   b4f66:	2020      	movs	r0, #32
   b4f68:	f000 f874 	bl	b5054 <_ZnajRKSt9nothrow_t>
	};
   b4f6c:	2520      	movs	r5, #32
   b4f6e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b4f70:	4905      	ldr	r1, [pc, #20]	; (b4f88 <_Z17acquireWireBufferv+0x30>)
	};
   b4f72:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b4f74:	4628      	mov	r0, r5
   b4f76:	f000 f86d 	bl	b5054 <_ZnajRKSt9nothrow_t>
	};
   b4f7a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b4f7e:	4620      	mov	r0, r4
   b4f80:	bd38      	pop	{r3, r4, r5, pc}
   b4f82:	bf00      	nop
   b4f84:	00010018 	.word	0x00010018
   b4f88:	000b5364 	.word	0x000b5364

000b4f8c <_Z19__fetch_global_Wirev>:
{
   b4f8c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4f8e:	4d0e      	ldr	r5, [pc, #56]	; (b4fc8 <_Z19__fetch_global_Wirev+0x3c>)
   b4f90:	7829      	ldrb	r1, [r5, #0]
   b4f92:	f3bf 8f5b 	dmb	ish
   b4f96:	f011 0401 	ands.w	r4, r1, #1
{
   b4f9a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4f9c:	d111      	bne.n	b4fc2 <_Z19__fetch_global_Wirev+0x36>
   b4f9e:	4628      	mov	r0, r5
   b4fa0:	f7ff f87b 	bl	b409a <__cxa_guard_acquire>
   b4fa4:	b168      	cbz	r0, b4fc2 <_Z19__fetch_global_Wirev+0x36>
   b4fa6:	4668      	mov	r0, sp
   b4fa8:	f7ff ffd6 	bl	b4f58 <_Z17acquireWireBufferv>
   b4fac:	466a      	mov	r2, sp
   b4fae:	4621      	mov	r1, r4
   b4fb0:	4806      	ldr	r0, [pc, #24]	; (b4fcc <_Z19__fetch_global_Wirev+0x40>)
   b4fb2:	f7ff fc47 	bl	b4844 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b4fb6:	4628      	mov	r0, r5
   b4fb8:	f7ff f874 	bl	b40a4 <__cxa_guard_release>
   b4fbc:	4804      	ldr	r0, [pc, #16]	; (b4fd0 <_Z19__fetch_global_Wirev+0x44>)
   b4fbe:	f000 f84b 	bl	b5058 <atexit>
	return wire;
}
   b4fc2:	4802      	ldr	r0, [pc, #8]	; (b4fcc <_Z19__fetch_global_Wirev+0x40>)
   b4fc4:	b007      	add	sp, #28
   b4fc6:	bd30      	pop	{r4, r5, pc}
   b4fc8:	2003e72c 	.word	0x2003e72c
   b4fcc:	2003e730 	.word	0x2003e730
   b4fd0:	000b4f55 	.word	0x000b4f55

000b4fd4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4fd4:	4770      	bx	lr
	...

000b4fd8 <_Z20acquireSerial1Bufferv>:
{
   b4fd8:	b538      	push	{r3, r4, r5, lr}
   b4fda:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b4fdc:	2514      	movs	r5, #20
   b4fde:	462a      	mov	r2, r5
   b4fe0:	2100      	movs	r1, #0
   b4fe2:	f000 f84d 	bl	b5080 <memset>
   b4fe6:	8025      	strh	r5, [r4, #0]
   b4fe8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4fea:	4907      	ldr	r1, [pc, #28]	; (b5008 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b4fec:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4fee:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b4ff0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4ff2:	f000 f82f 	bl	b5054 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4ff6:	4904      	ldr	r1, [pc, #16]	; (b5008 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b4ff8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4ffa:	4628      	mov	r0, r5
   b4ffc:	f000 f82a 	bl	b5054 <_ZnajRKSt9nothrow_t>
    };
   b5000:	60e0      	str	r0, [r4, #12]
}
   b5002:	4620      	mov	r0, r4
   b5004:	bd38      	pop	{r3, r4, r5, pc}
   b5006:	bf00      	nop
   b5008:	000b5364 	.word	0x000b5364

000b500c <_Z22__fetch_global_Serial1v>:
{
   b500c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b500e:	4d0e      	ldr	r5, [pc, #56]	; (b5048 <_Z22__fetch_global_Serial1v+0x3c>)
   b5010:	7829      	ldrb	r1, [r5, #0]
   b5012:	f3bf 8f5b 	dmb	ish
   b5016:	f011 0401 	ands.w	r4, r1, #1
{
   b501a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b501c:	d111      	bne.n	b5042 <_Z22__fetch_global_Serial1v+0x36>
   b501e:	4628      	mov	r0, r5
   b5020:	f7ff f83b 	bl	b409a <__cxa_guard_acquire>
   b5024:	b168      	cbz	r0, b5042 <_Z22__fetch_global_Serial1v+0x36>
   b5026:	a801      	add	r0, sp, #4
   b5028:	f7ff ffd6 	bl	b4fd8 <_Z20acquireSerial1Bufferv>
   b502c:	aa01      	add	r2, sp, #4
   b502e:	4621      	mov	r1, r4
   b5030:	4806      	ldr	r0, [pc, #24]	; (b504c <_Z22__fetch_global_Serial1v+0x40>)
   b5032:	f7ff fe5b 	bl	b4cec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5036:	4628      	mov	r0, r5
   b5038:	f7ff f834 	bl	b40a4 <__cxa_guard_release>
   b503c:	4804      	ldr	r0, [pc, #16]	; (b5050 <_Z22__fetch_global_Serial1v+0x44>)
   b503e:	f000 f80b 	bl	b5058 <atexit>
    return serial1;
}
   b5042:	4802      	ldr	r0, [pc, #8]	; (b504c <_Z22__fetch_global_Serial1v+0x40>)
   b5044:	b007      	add	sp, #28
   b5046:	bd30      	pop	{r4, r5, pc}
   b5048:	2003e744 	.word	0x2003e744
   b504c:	2003e748 	.word	0x2003e748
   b5050:	000b4fd5 	.word	0x000b4fd5

000b5054 <_ZnajRKSt9nothrow_t>:
   b5054:	f7ff b81d 	b.w	b4092 <_Znaj>

000b5058 <atexit>:
   b5058:	2300      	movs	r3, #0
   b505a:	4601      	mov	r1, r0
   b505c:	461a      	mov	r2, r3
   b505e:	4618      	mov	r0, r3
   b5060:	f000 b84c 	b.w	b50fc <__register_exitproc>

000b5064 <memcpy>:
   b5064:	440a      	add	r2, r1
   b5066:	4291      	cmp	r1, r2
   b5068:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b506c:	d100      	bne.n	b5070 <memcpy+0xc>
   b506e:	4770      	bx	lr
   b5070:	b510      	push	{r4, lr}
   b5072:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5076:	f803 4f01 	strb.w	r4, [r3, #1]!
   b507a:	4291      	cmp	r1, r2
   b507c:	d1f9      	bne.n	b5072 <memcpy+0xe>
   b507e:	bd10      	pop	{r4, pc}

000b5080 <memset>:
   b5080:	4402      	add	r2, r0
   b5082:	4603      	mov	r3, r0
   b5084:	4293      	cmp	r3, r2
   b5086:	d100      	bne.n	b508a <memset+0xa>
   b5088:	4770      	bx	lr
   b508a:	f803 1b01 	strb.w	r1, [r3], #1
   b508e:	e7f9      	b.n	b5084 <memset+0x4>

000b5090 <srand>:
   b5090:	b538      	push	{r3, r4, r5, lr}
   b5092:	4b10      	ldr	r3, [pc, #64]	; (b50d4 <srand+0x44>)
   b5094:	681d      	ldr	r5, [r3, #0]
   b5096:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5098:	4604      	mov	r4, r0
   b509a:	b9b3      	cbnz	r3, b50ca <srand+0x3a>
   b509c:	2018      	movs	r0, #24
   b509e:	f7ff faef 	bl	b4680 <malloc>
   b50a2:	4602      	mov	r2, r0
   b50a4:	63a8      	str	r0, [r5, #56]	; 0x38
   b50a6:	b920      	cbnz	r0, b50b2 <srand+0x22>
   b50a8:	4b0b      	ldr	r3, [pc, #44]	; (b50d8 <srand+0x48>)
   b50aa:	480c      	ldr	r0, [pc, #48]	; (b50dc <srand+0x4c>)
   b50ac:	2142      	movs	r1, #66	; 0x42
   b50ae:	f7ff faf7 	bl	b46a0 <__assert_func>
   b50b2:	490b      	ldr	r1, [pc, #44]	; (b50e0 <srand+0x50>)
   b50b4:	4b0b      	ldr	r3, [pc, #44]	; (b50e4 <srand+0x54>)
   b50b6:	e9c0 1300 	strd	r1, r3, [r0]
   b50ba:	4b0b      	ldr	r3, [pc, #44]	; (b50e8 <srand+0x58>)
   b50bc:	6083      	str	r3, [r0, #8]
   b50be:	230b      	movs	r3, #11
   b50c0:	8183      	strh	r3, [r0, #12]
   b50c2:	2100      	movs	r1, #0
   b50c4:	2001      	movs	r0, #1
   b50c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b50ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b50cc:	2200      	movs	r2, #0
   b50ce:	611c      	str	r4, [r3, #16]
   b50d0:	615a      	str	r2, [r3, #20]
   b50d2:	bd38      	pop	{r3, r4, r5, pc}
   b50d4:	2003e628 	.word	0x2003e628
   b50d8:	000b5365 	.word	0x000b5365
   b50dc:	000b537c 	.word	0x000b537c
   b50e0:	abcd330e 	.word	0xabcd330e
   b50e4:	e66d1234 	.word	0xe66d1234
   b50e8:	0005deec 	.word	0x0005deec

000b50ec <strlen>:
   b50ec:	4603      	mov	r3, r0
   b50ee:	f813 2b01 	ldrb.w	r2, [r3], #1
   b50f2:	2a00      	cmp	r2, #0
   b50f4:	d1fb      	bne.n	b50ee <strlen+0x2>
   b50f6:	1a18      	subs	r0, r3, r0
   b50f8:	3801      	subs	r0, #1
   b50fa:	4770      	bx	lr

000b50fc <__register_exitproc>:
   b50fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5100:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b51bc <__register_exitproc+0xc0>
   b5104:	4606      	mov	r6, r0
   b5106:	f8d8 0000 	ldr.w	r0, [r8]
   b510a:	461f      	mov	r7, r3
   b510c:	460d      	mov	r5, r1
   b510e:	4691      	mov	r9, r2
   b5110:	f000 f856 	bl	b51c0 <__retarget_lock_acquire_recursive>
   b5114:	4b25      	ldr	r3, [pc, #148]	; (b51ac <__register_exitproc+0xb0>)
   b5116:	681c      	ldr	r4, [r3, #0]
   b5118:	b934      	cbnz	r4, b5128 <__register_exitproc+0x2c>
   b511a:	4c25      	ldr	r4, [pc, #148]	; (b51b0 <__register_exitproc+0xb4>)
   b511c:	601c      	str	r4, [r3, #0]
   b511e:	4b25      	ldr	r3, [pc, #148]	; (b51b4 <__register_exitproc+0xb8>)
   b5120:	b113      	cbz	r3, b5128 <__register_exitproc+0x2c>
   b5122:	681b      	ldr	r3, [r3, #0]
   b5124:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5128:	6863      	ldr	r3, [r4, #4]
   b512a:	2b1f      	cmp	r3, #31
   b512c:	dd07      	ble.n	b513e <__register_exitproc+0x42>
   b512e:	f8d8 0000 	ldr.w	r0, [r8]
   b5132:	f000 f847 	bl	b51c4 <__retarget_lock_release_recursive>
   b5136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b513a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b513e:	b34e      	cbz	r6, b5194 <__register_exitproc+0x98>
   b5140:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5144:	b988      	cbnz	r0, b516a <__register_exitproc+0x6e>
   b5146:	4b1c      	ldr	r3, [pc, #112]	; (b51b8 <__register_exitproc+0xbc>)
   b5148:	b923      	cbnz	r3, b5154 <__register_exitproc+0x58>
   b514a:	f8d8 0000 	ldr.w	r0, [r8]
   b514e:	f000 f838 	bl	b51c2 <__retarget_lock_release>
   b5152:	e7f0      	b.n	b5136 <__register_exitproc+0x3a>
   b5154:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5158:	f7ff fa92 	bl	b4680 <malloc>
   b515c:	2800      	cmp	r0, #0
   b515e:	d0f4      	beq.n	b514a <__register_exitproc+0x4e>
   b5160:	2300      	movs	r3, #0
   b5162:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5166:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b516a:	6863      	ldr	r3, [r4, #4]
   b516c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5170:	2201      	movs	r2, #1
   b5172:	409a      	lsls	r2, r3
   b5174:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5178:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b517c:	4313      	orrs	r3, r2
   b517e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5182:	2e02      	cmp	r6, #2
   b5184:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5188:	bf02      	ittt	eq
   b518a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b518e:	4313      	orreq	r3, r2
   b5190:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5194:	6863      	ldr	r3, [r4, #4]
   b5196:	f8d8 0000 	ldr.w	r0, [r8]
   b519a:	1c5a      	adds	r2, r3, #1
   b519c:	3302      	adds	r3, #2
   b519e:	6062      	str	r2, [r4, #4]
   b51a0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b51a4:	f000 f80e 	bl	b51c4 <__retarget_lock_release_recursive>
   b51a8:	2000      	movs	r0, #0
   b51aa:	e7c6      	b.n	b513a <__register_exitproc+0x3e>
   b51ac:	2003e7e8 	.word	0x2003e7e8
   b51b0:	2003e75c 	.word	0x2003e75c
   b51b4:	00000000 	.word	0x00000000
   b51b8:	000b4681 	.word	0x000b4681
   b51bc:	2003e68c 	.word	0x2003e68c

000b51c0 <__retarget_lock_acquire_recursive>:
   b51c0:	4770      	bx	lr

000b51c2 <__retarget_lock_release>:
   b51c2:	4770      	bx	lr

000b51c4 <__retarget_lock_release_recursive>:
   b51c4:	4770      	bx	lr

000b51c6 <link_code_end>:
	...

000b51c8 <dynalib_user>:
   b51c8:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b51d8:	0000 0000 203e 616e 6b63 3e00 7220 6165     ....> nack.> rea
   b51e8:	2064 6166 6c69 6465 0000 0000               d failed....

000b51f4 <_ZTVN5spark13CellularClassE>:
	...
   b51fc:	4737 000b 472d 000b 4723 000b 46d9 000b     7G..-G..#G...F..
   b520c:	4717 000b 470b 000b 4a49 000b 4a51 000b     .G...G..IJ..QJ..
   b521c:	46ff 000b 46f7 000b 46ed 000b 46e3 000b     .F...F...F...F..
   b522c:	4a81 000b                                   .J..

000b5230 <_ZTVN5spark13EthernetClassE>:
	...
   b5238:	47cf 000b 47c5 000b 47bb 000b 47b1 000b     .G...G...G...G..
   b5248:	47a5 000b 4799 000b 4a49 000b 4a51 000b     .G...G..IJ..QJ..
   b5258:	478d 000b 4785 000b 477b 000b 4771 000b     .G...G..{G..qG..
   b5268:	4a81 000b                                   .J..

000b526c <_ZTV7TwoWire>:
	...
   b5274:	47ed 000b 4837 000b 480f 000b 47ef 000b     .G..7H...H...G..
   b5284:	4817 000b 481f 000b 4827 000b 482f 000b     .H...H..'H../H..

000b5294 <_ZTV9IPAddress>:
	...
   b529c:	4919 000b 4909 000b 490b 000b 7061 0070     .I...I...I..app.

000b52ac <_ZTVN5spark12NetworkClassE>:
	...
   b52b4:	4a09 000b 4a13 000b 4a1d 000b 4a27 000b     .J...J...J..'J..
   b52c4:	4a31 000b 4a3d 000b 4a49 000b 4a51 000b     1J..=J..IJ..QJ..
   b52d4:	4a59 000b 4a65 000b 4a6d 000b 4a77 000b     YJ..eJ..mJ..wJ..
   b52e4:	4a81 000b 5925 252d 2d6d 6425 2554 3a48     .J..%Y-%m-%dT%H:
   b52f4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b5304 <_ZTV11USARTSerial>:
	...
   b530c:	4c71 000b 4cdd 000b 4cb5 000b 4b6d 000b     qL...L...L..mK..
   b531c:	4c85 000b 4ca1 000b 4c93 000b 4caf 000b     .L...L...L...L..
   b532c:	4c73 000b 4c77 000b                         sL..wL..

000b5334 <_ZTV9USBSerial>:
	...
   b533c:	4d1b 000b 4d83 000b 4d59 000b 4b6d 000b     .M...M..YM..mK..
   b534c:	4d4b 000b 4d1d 000b 4d2d 000b 4d7d 000b     KM...M..-M..}M..
   b535c:	4d3d 000b 4d15 000b                         =M...M..

000b5364 <_ZSt7nothrow>:
   b5364:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5374:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b5384:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b5394:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b53a4:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b53b4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b53c4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b53d5 <link_const_variable_data_end>:
   b53d5:	00          	.byte	0x00
	...

000b53d8 <link_constructors_location>:
   b53d8:	000b412d 	.word	0x000b412d
   b53dc:	000b46c9 	.word	0x000b46c9
   b53e0:	000b4741 	.word	0x000b4741
   b53e4:	000b47d9 	.word	0x000b47d9
   b53e8:	000b49f9 	.word	0x000b49f9
   b53ec:	000b4b59 	.word	0x000b4b59
   b53f0:	000b4c2d 	.word	0x000b4c2d
   b53f4:	000b4c39 	.word	0x000b4c39
   b53f8:	000b4c5d 	.word	0x000b4c5d

000b53fc <link_constructors_end>:
   b53fc:	00000000 	.word	0x00000000
