
/Users/kdneeley/Documents/IoT/NMParkBenchTests/LIDARmotionSensorTest/target/4.1.0/boron/LIDARmotionSensorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001484  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b54a0  000b54a0  000054a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b54c4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e5ec  000b54c8  0001e5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000198  2003e658  2003e658  0002e658  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b5534  000b5534  00025534  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b555c  000b555c  0002555c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000dd9ea  00000000  00000000  00025560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000e5db  00000000  00000000  00102f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0002ee9e  00000000  00000000  00111525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002258  00000000  00000000  001403c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00008a88  00000000  00000000  0014261b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033db1  00000000  00000000  0014b0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00031c67  00000000  00000000  0017ee54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012f6c8  00000000  00000000  001b0abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005f20  00000000  00000000  002e0184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 f85b 	bl	b50e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 f863 	bl	b5104 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5ec 	.word	0x2003e5ec
   b4048:	000b54c8 	.word	0x000b54c8
   b404c:	2003e658 	.word	0x2003e658
   b4050:	2003e658 	.word	0x2003e658
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 ff89 	bl	b4f74 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b5474 	.word	0x000b5474
   b407c:	000b5498 	.word	0x000b5498

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b822 	b.w	b40c8 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f835 	bl	b40f4 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 bf29 	b.w	b4ee4 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 baff 	b.w	b4694 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f000 bb05 	b.w	b46a4 <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr

000b40aa <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40aa:	b40e      	push	{r1, r2, r3}
   b40ac:	b503      	push	{r0, r1, lr}
   b40ae:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40b6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40b8:	f000 fdc9 	bl	b4c4e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40bc:	b002      	add	sp, #8
   b40be:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c2:	b003      	add	sp, #12
   b40c4:	4770      	bx	lr
	...

000b40c8 <setup>:

byte * arrayToSave[16];
LIDARLite L1;


void setup() {
   b40c8:	b510      	push	{r4, lr}
 // Initialize Arduino serial port (for display of ASCII output to PC)
    Serial.begin(9600);
   b40ca:	f000 fec3 	bl	b4e54 <_Z16_fetch_usbserialv>
   b40ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40d2:	f000 feb3 	bl	b4e3c <_ZN9USBSerial5beginEl>
    Wire.begin();
   b40d6:	f000 ff9b 	bl	b5010 <_Z19__fetch_global_Wirev>
   b40da:	f000 fbe7 	bl	b48ac <_ZN7TwoWire5beginEv>
    L1.begin(0, true);
}
   b40de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    L1.begin(0, true);
   b40e2:	4803      	ldr	r0, [pc, #12]	; (b40f0 <setup+0x28>)
   b40e4:	2362      	movs	r3, #98	; 0x62
   b40e6:	2201      	movs	r2, #1
   b40e8:	2100      	movs	r1, #0
   b40ea:	f000 b8a9 	b.w	b4240 <_ZN9LIDARLite5beginEibc>
   b40ee:	bf00      	nop
   b40f0:	2003e658 	.word	0x2003e658

000b40f4 <loop>:

void loop() {
   b40f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int dist;
    L1.write(0x03, 0x00, I2CADDRESS);
   b40f6:	480f      	ldr	r0, [pc, #60]	; (b4134 <loop+0x40>)
   b40f8:	2362      	movs	r3, #98	; 0x62
   b40fa:	2200      	movs	r2, #0
   b40fc:	2103      	movs	r1, #3
   b40fe:	f000 f82b 	bl	b4158 <_ZN9LIDARLite5writeEccc>
    L1.read(0x01, 1, arrayToSave[0], true, I2CADDRESS);
   b4102:	2462      	movs	r4, #98	; 0x62
   b4104:	2101      	movs	r1, #1
   b4106:	e9cd 1400 	strd	r1, r4, [sp]
   b410a:	4b0b      	ldr	r3, [pc, #44]	; (b4138 <loop+0x44>)
   b410c:	4809      	ldr	r0, [pc, #36]	; (b4134 <loop+0x40>)
   b410e:	681b      	ldr	r3, [r3, #0]
   b4110:	460a      	mov	r2, r1
   b4112:	f000 f8ad 	bl	b4270 <_ZN9LIDARLite4readEciPhbc>
    dist = L1.distance(true, I2CADDRESS);
   b4116:	4622      	mov	r2, r4
   b4118:	2101      	movs	r1, #1
   b411a:	4806      	ldr	r0, [pc, #24]	; (b4134 <loop+0x40>)
   b411c:	f000 f918 	bl	b4350 <_ZN9LIDARLite8distanceEbc>
   b4120:	9003      	str	r0, [sp, #12]
    // Display distance
    Serial.printf("Distance Measured = %i\n", dist);
   b4122:	f000 fe97 	bl	b4e54 <_Z16_fetch_usbserialv>
   b4126:	9a03      	ldr	r2, [sp, #12]
   b4128:	4904      	ldr	r1, [pc, #16]	; (b413c <loop+0x48>)
   b412a:	f7ff ffbe 	bl	b40aa <_ZN5Print6printfEPKcz>

   b412e:	b004      	add	sp, #16
   b4130:	bd10      	pop	{r4, pc}
   b4132:	bf00      	nop
   b4134:	2003e658 	.word	0x2003e658
   b4138:	2003e65c 	.word	0x2003e65c
   b413c:	000b5260 	.word	0x000b5260

000b4140 <_GLOBAL__sub_I_arrayToSave>:
LIDARLite L1;
   b4140:	4801      	ldr	r0, [pc, #4]	; (b4148 <_GLOBAL__sub_I_arrayToSave+0x8>)
   b4142:	f000 b807 	b.w	b4154 <_ZN9LIDARLiteC1Ev>
   b4146:	bf00      	nop
   b4148:	2003e658 	.word	0x2003e658

000b414c <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b414c:	6803      	ldr	r3, [r0, #0]
   b414e:	b2c9      	uxtb	r1, r1
   b4150:	689b      	ldr	r3, [r3, #8]
   b4152:	4718      	bx	r3

000b4154 <_ZN9LIDARLiteC1Ev>:
/*------------------------------------------------------------------------------
  Constructor

  Use LIDARLite::begin to initialize.
------------------------------------------------------------------------------*/
LIDARLite::LIDARLite(){}
   b4154:	4770      	bx	lr
	...

000b4158 <_ZN9LIDARLite5writeEccc>:
  myValue: value to write.
  lidarliteAddress: Default 0x62. Fill in new address here if changed. See
    operating manual for instructions.
------------------------------------------------------------------------------*/
void LIDARLite::write(char myAddress, char myValue, char lidarliteAddress)
{
   b4158:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b415a:	4614      	mov	r4, r2
   b415c:	9301      	str	r3, [sp, #4]
   b415e:	460d      	mov	r5, r1
  Wire.beginTransmission((int)lidarliteAddress);
   b4160:	f000 ff56 	bl	b5010 <_Z19__fetch_global_Wirev>
   b4164:	9901      	ldr	r1, [sp, #4]
   b4166:	f000 fbd7 	bl	b4918 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((int)myAddress); // Set register for write
   b416a:	f000 ff51 	bl	b5010 <_Z19__fetch_global_Wirev>
   b416e:	4629      	mov	r1, r5
   b4170:	f7ff ffec 	bl	b414c <_ZN7TwoWire5writeEi.isra.0>
  Wire.write((int)myValue); // Write myValue to register
   b4174:	f000 ff4c 	bl	b5010 <_Z19__fetch_global_Wirev>
   b4178:	4621      	mov	r1, r4
   b417a:	f7ff ffe7 	bl	b414c <_ZN7TwoWire5writeEi.isra.0>

  // A nack means the device is not responding, report the error over serial
  int nackCatcher = Wire.endTransmission();
   b417e:	f000 ff47 	bl	b5010 <_Z19__fetch_global_Wirev>
   b4182:	f000 fbd0 	bl	b4926 <_ZN7TwoWire15endTransmissionEv>
  if(nackCatcher != 0)
   b4186:	b120      	cbz	r0, b4192 <_ZN9LIDARLite5writeEccc+0x3a>
  {
    Serial.println("> nack");
   b4188:	f000 fe64 	bl	b4e54 <_Z16_fetch_usbserialv>
   b418c:	4904      	ldr	r1, [pc, #16]	; (b41a0 <_ZN9LIDARLite5writeEccc+0x48>)
   b418e:	f000 fd36 	bl	b4bfe <_ZN5Print7printlnEPKc>
  }

  delay(1); // 1 ms delay for robustness with successive reads and writes
   b4192:	2001      	movs	r0, #1
} /* LIDARLite::write */
   b4194:	b003      	add	sp, #12
   b4196:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  delay(1); // 1 ms delay for robustness with successive reads and writes
   b419a:	f000 baa3 	b.w	b46e4 <delay>
   b419e:	bf00      	nop
   b41a0:	000b5278 	.word	0x000b5278

000b41a4 <_ZN9LIDARLite9configureEic>:
{
   b41a4:	b507      	push	{r0, r1, r2, lr}
   b41a6:	4613      	mov	r3, r2
   b41a8:	2905      	cmp	r1, #5
   b41aa:	d846      	bhi.n	b423a <_ZN9LIDARLite9configureEic+0x96>
   b41ac:	e8df f001 	tbb	[pc, r1]
   b41b0:	241b1803 	.word	0x241b1803
   b41b4:	3627      	.short	0x3627
      write(0x02,0x80,lidarliteAddress); // Default
   b41b6:	9301      	str	r3, [sp, #4]
   b41b8:	2280      	movs	r2, #128	; 0x80
      write(0x02,0x1d,lidarliteAddress);
   b41ba:	2102      	movs	r1, #2
   b41bc:	9000      	str	r0, [sp, #0]
   b41be:	f7ff ffcb 	bl	b4158 <_ZN9LIDARLite5writeEccc>
      write(0x04,0x08,lidarliteAddress); // Default
   b41c2:	9b01      	ldr	r3, [sp, #4]
   b41c4:	2208      	movs	r2, #8
   b41c6:	9800      	ldr	r0, [sp, #0]
   b41c8:	2104      	movs	r1, #4
   b41ca:	f7ff ffc5 	bl	b4158 <_ZN9LIDARLite5writeEccc>
      write(0x1c,0x00,lidarliteAddress); // Default
   b41ce:	9b01      	ldr	r3, [sp, #4]
   b41d0:	2200      	movs	r2, #0
      write(0x1c,0xb0,lidarliteAddress);
   b41d2:	9800      	ldr	r0, [sp, #0]
   b41d4:	211c      	movs	r1, #28
} /* LIDARLite::configure */
   b41d6:	b003      	add	sp, #12
   b41d8:	f85d eb04 	ldr.w	lr, [sp], #4
      write(0x1c,0xb0,lidarliteAddress);
   b41dc:	f7ff bfbc 	b.w	b4158 <_ZN9LIDARLite5writeEccc>
      write(0x02,0x1d,lidarliteAddress);
   b41e0:	9301      	str	r3, [sp, #4]
   b41e2:	221d      	movs	r2, #29
   b41e4:	e7e9      	b.n	b41ba <_ZN9LIDARLite9configureEic+0x16>
      write(0x02,0x80,lidarliteAddress); // Default
   b41e6:	2280      	movs	r2, #128	; 0x80
   b41e8:	2102      	movs	r1, #2
   b41ea:	9301      	str	r3, [sp, #4]
   b41ec:	9000      	str	r0, [sp, #0]
   b41ee:	f7ff ffb3 	bl	b4158 <_ZN9LIDARLite5writeEccc>
      write(0x04,0x00,lidarliteAddress);
   b41f2:	9b01      	ldr	r3, [sp, #4]
   b41f4:	2200      	movs	r2, #0
   b41f6:	e7e6      	b.n	b41c6 <_ZN9LIDARLite9configureEic+0x22>
      write(0x02,0xff,lidarliteAddress);
   b41f8:	9301      	str	r3, [sp, #4]
   b41fa:	22ff      	movs	r2, #255	; 0xff
   b41fc:	e7dd      	b.n	b41ba <_ZN9LIDARLite9configureEic+0x16>
      write(0x02,0x80,lidarliteAddress); // Default
   b41fe:	2280      	movs	r2, #128	; 0x80
   b4200:	2102      	movs	r1, #2
   b4202:	9301      	str	r3, [sp, #4]
   b4204:	9000      	str	r0, [sp, #0]
   b4206:	f7ff ffa7 	bl	b4158 <_ZN9LIDARLite5writeEccc>
      write(0x04,0x08,lidarliteAddress); // Default
   b420a:	9b01      	ldr	r3, [sp, #4]
   b420c:	9800      	ldr	r0, [sp, #0]
   b420e:	2208      	movs	r2, #8
   b4210:	2104      	movs	r1, #4
   b4212:	f7ff ffa1 	bl	b4158 <_ZN9LIDARLite5writeEccc>
      write(0x1c,0x80,lidarliteAddress);
   b4216:	9b01      	ldr	r3, [sp, #4]
   b4218:	2280      	movs	r2, #128	; 0x80
   b421a:	e7da      	b.n	b41d2 <_ZN9LIDARLite9configureEic+0x2e>
      write(0x02,0x80,lidarliteAddress); // Default
   b421c:	2280      	movs	r2, #128	; 0x80
   b421e:	2102      	movs	r1, #2
   b4220:	9301      	str	r3, [sp, #4]
   b4222:	9000      	str	r0, [sp, #0]
   b4224:	f7ff ff98 	bl	b4158 <_ZN9LIDARLite5writeEccc>
      write(0x04,0x08,lidarliteAddress); // Default
   b4228:	9b01      	ldr	r3, [sp, #4]
   b422a:	9800      	ldr	r0, [sp, #0]
   b422c:	2208      	movs	r2, #8
   b422e:	2104      	movs	r1, #4
   b4230:	f7ff ff92 	bl	b4158 <_ZN9LIDARLite5writeEccc>
      write(0x1c,0xb0,lidarliteAddress);
   b4234:	9b01      	ldr	r3, [sp, #4]
   b4236:	22b0      	movs	r2, #176	; 0xb0
   b4238:	e7cb      	b.n	b41d2 <_ZN9LIDARLite9configureEic+0x2e>
} /* LIDARLite::configure */
   b423a:	b003      	add	sp, #12
   b423c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4240 <_ZN9LIDARLite5beginEibc>:
{
   b4240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4242:	4617      	mov	r7, r2
   b4244:	460d      	mov	r5, r1
   b4246:	461e      	mov	r6, r3
   b4248:	4604      	mov	r4, r0
  Wire.begin(); // Start I2C
   b424a:	f000 fee1 	bl	b5010 <_Z19__fetch_global_Wirev>
   b424e:	f000 fb2d 	bl	b48ac <_ZN7TwoWire5beginEv>
  if(fasti2c)
   b4252:	b127      	cbz	r7, b425e <_ZN9LIDARLite5beginEibc+0x1e>
      Wire.setClock(400000UL); // Set I2C frequency to 400kHz, for Arduino Due
   b4254:	f000 fedc 	bl	b5010 <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4258:	4904      	ldr	r1, [pc, #16]	; (b426c <_ZN9LIDARLite5beginEibc+0x2c>)
   b425a:	f000 fb23 	bl	b48a4 <_ZN7TwoWire8setSpeedEm>
  configure(configuration, lidarliteAddress); // Configuration settings
   b425e:	4632      	mov	r2, r6
   b4260:	4629      	mov	r1, r5
   b4262:	4620      	mov	r0, r4
} /* LIDARLite::begin */
   b4264:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  configure(configuration, lidarliteAddress); // Configuration settings
   b4268:	f7ff bf9c 	b.w	b41a4 <_ZN9LIDARLite9configureEic>
   b426c:	00061a80 	.word	0x00061a80

000b4270 <_ZN9LIDARLite4readEciPhbc>:
  arrayToSave: an array to store the read values.
  monitorBusyFlag: if true, the routine will repeatedly read the status
    register until the busy flag (LSB) is 0.
------------------------------------------------------------------------------*/
void LIDARLite::read(char myAddress, int numOfBytes, byte arrayToSave[2], bool monitorBusyFlag, char lidarliteAddress)
{
   b4270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4274:	461e      	mov	r6, r3
   b4276:	f89d 3020 	ldrb.w	r3, [sp, #32]
   b427a:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
   b427e:	460f      	mov	r7, r1
   b4280:	4614      	mov	r4, r2
  int busyFlag = 0; // busyFlag monitors when the device is done with a measurement
  if(monitorBusyFlag)
   b4282:	2b00      	cmp	r3, #0
   b4284:	d158      	bne.n	b4338 <_ZN9LIDARLite4readEciPhbc+0xc8>
  }

  // Device is not busy, begin read
  if(busyFlag == 0)
  {
    Wire.beginTransmission((int)lidarliteAddress);
   b4286:	f000 fec3 	bl	b5010 <_Z19__fetch_global_Wirev>
   b428a:	4629      	mov	r1, r5
   b428c:	f000 fb44 	bl	b4918 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((int)myAddress); // Set the register to be read
   b4290:	f000 febe 	bl	b5010 <_Z19__fetch_global_Wirev>
   b4294:	4639      	mov	r1, r7
   b4296:	f7ff ff59 	bl	b414c <_ZN7TwoWire5writeEi.isra.0>

    // A nack means the device is not responding, report the error over serial
    int nackCatcher = Wire.endTransmission();
   b429a:	f000 feb9 	bl	b5010 <_Z19__fetch_global_Wirev>
   b429e:	f000 fb42 	bl	b4926 <_ZN7TwoWire15endTransmissionEv>
    if(nackCatcher != 0)
   b42a2:	b120      	cbz	r0, b42ae <_ZN9LIDARLite4readEciPhbc+0x3e>
    {
      Serial.println("> nack");
   b42a4:	f000 fdd6 	bl	b4e54 <_Z16_fetch_usbserialv>
   b42a8:	4927      	ldr	r1, [pc, #156]	; (b4348 <_ZN9LIDARLite4readEciPhbc+0xd8>)
   b42aa:	f000 fca8 	bl	b4bfe <_ZN5Print7printlnEPKc>
    }

    // Perform read of 1 or 2 bytes, save in arrayToSave
    Wire.requestFrom((int)lidarliteAddress, numOfBytes);
   b42ae:	f000 feaf 	bl	b5010 <_Z19__fetch_global_Wirev>
   b42b2:	4622      	mov	r2, r4
   b42b4:	4629      	mov	r1, r5
   b42b6:	f000 fb28 	bl	b490a <_ZN7TwoWire11requestFromEhj>
    int i = 0;
    if(numOfBytes <= Wire.available())
   b42ba:	f000 fea9 	bl	b5010 <_Z19__fetch_global_Wirev>
   b42be:	6803      	ldr	r3, [r0, #0]
   b42c0:	691b      	ldr	r3, [r3, #16]
   b42c2:	4798      	blx	r3
   b42c4:	42a0      	cmp	r0, r4
   b42c6:	db3c      	blt.n	b4342 <_ZN9LIDARLite4readEciPhbc+0xd2>
    int i = 0;
   b42c8:	2500      	movs	r5, #0
    {
      while(i < numOfBytes)
   b42ca:	42a5      	cmp	r5, r4
   b42cc:	da39      	bge.n	b4342 <_ZN9LIDARLite4readEciPhbc+0xd2>
      {
        arrayToSave[i] = Wire.read();
   b42ce:	f000 fe9f 	bl	b5010 <_Z19__fetch_global_Wirev>
   b42d2:	6803      	ldr	r3, [r0, #0]
   b42d4:	695b      	ldr	r3, [r3, #20]
   b42d6:	4798      	blx	r3
   b42d8:	5570      	strb	r0, [r6, r5]
        i++;
   b42da:	3501      	adds	r5, #1
      while(i < numOfBytes)
   b42dc:	e7f5      	b.n	b42ca <_ZN9LIDARLite4readEciPhbc+0x5a>
  while(busyFlag != 0) // Loop until device is not busy
   b42de:	2800      	cmp	r0, #0
   b42e0:	d0d1      	beq.n	b4286 <_ZN9LIDARLite4readEciPhbc+0x16>
    Wire.beginTransmission((int)lidarliteAddress);
   b42e2:	f000 fe95 	bl	b5010 <_Z19__fetch_global_Wirev>
   b42e6:	4629      	mov	r1, r5
   b42e8:	f000 fb16 	bl	b4918 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(0x01); // Set the status register to be read
   b42ec:	f000 fe90 	bl	b5010 <_Z19__fetch_global_Wirev>
   b42f0:	2101      	movs	r1, #1
   b42f2:	f7ff ff2b 	bl	b414c <_ZN7TwoWire5writeEi.isra.0>
    int nackCatcher = Wire.endTransmission();
   b42f6:	f000 fe8b 	bl	b5010 <_Z19__fetch_global_Wirev>
   b42fa:	f000 fb14 	bl	b4926 <_ZN7TwoWire15endTransmissionEv>
    if(nackCatcher != 0)
   b42fe:	b120      	cbz	r0, b430a <_ZN9LIDARLite4readEciPhbc+0x9a>
      Serial.println("> nack");
   b4300:	f000 fda8 	bl	b4e54 <_Z16_fetch_usbserialv>
   b4304:	4649      	mov	r1, r9
   b4306:	f000 fc7a 	bl	b4bfe <_ZN5Print7printlnEPKc>
    Wire.requestFrom((int)lidarliteAddress,1); // Read register 0x01
   b430a:	f000 fe81 	bl	b5010 <_Z19__fetch_global_Wirev>
   b430e:	2201      	movs	r2, #1
   b4310:	4629      	mov	r1, r5
   b4312:	f000 fafa 	bl	b490a <_ZN7TwoWire11requestFromEhj>
    busyFlag = bitRead(Wire.read(),0); // Assign the LSB of the status register to busyFlag
   b4316:	f000 fe7b 	bl	b5010 <_Z19__fetch_global_Wirev>
   b431a:	6803      	ldr	r3, [r0, #0]
   b431c:	695b      	ldr	r3, [r3, #20]
   b431e:	4798      	blx	r3
    if(busyCounter > 9999)
   b4320:	f1b8 0801 	subs.w	r8, r8, #1
    busyFlag = bitRead(Wire.read(),0); // Assign the LSB of the status register to busyFlag
   b4324:	f000 0001 	and.w	r0, r0, #1
    if(busyCounter > 9999)
   b4328:	d1d9      	bne.n	b42de <_ZN9LIDARLite4readEciPhbc+0x6e>
  // bailout reports error over serial
  if(busyCounter > 9999)
  {
    bailout:
      busyCounter = 0;
      Serial.println("> read failed");
   b432a:	f000 fd93 	bl	b4e54 <_Z16_fetch_usbserialv>
  }
} /* LIDARLite::read */
   b432e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      Serial.println("> read failed");
   b4332:	4906      	ldr	r1, [pc, #24]	; (b434c <_ZN9LIDARLite4readEciPhbc+0xdc>)
   b4334:	f000 bc63 	b.w	b4bfe <_ZN5Print7printlnEPKc>
      Serial.println("> nack");
   b4338:	f8df 900c 	ldr.w	r9, [pc, #12]	; b4348 <_ZN9LIDARLite4readEciPhbc+0xd8>
   b433c:	f242 7810 	movw	r8, #10000	; 0x2710
   b4340:	e7cf      	b.n	b42e2 <_ZN9LIDARLite4readEciPhbc+0x72>
} /* LIDARLite::read */
   b4342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4346:	bf00      	nop
   b4348:	000b5278 	.word	0x000b5278
   b434c:	000b527f 	.word	0x000b527f

000b4350 <_ZN9LIDARLite8distanceEbc>:
{
   b4350:	b530      	push	{r4, r5, lr}
    write(0x00,0x04,lidarliteAddress);
   b4352:	4613      	mov	r3, r2
{
   b4354:	b085      	sub	sp, #20
   b4356:	4605      	mov	r5, r0
   b4358:	4614      	mov	r4, r2
  if(biasCorrection)
   b435a:	b1a1      	cbz	r1, b4386 <_ZN9LIDARLite8distanceEbc+0x36>
    write(0x00,0x04,lidarliteAddress);
   b435c:	2204      	movs	r2, #4
   b435e:	2100      	movs	r1, #0
    write(0x00,0x03,lidarliteAddress);
   b4360:	f7ff fefa 	bl	b4158 <_ZN9LIDARLite5writeEccc>
  read(0x8f,2,distanceArray,true,lidarliteAddress);
   b4364:	2301      	movs	r3, #1
   b4366:	9300      	str	r3, [sp, #0]
   b4368:	4628      	mov	r0, r5
   b436a:	ab03      	add	r3, sp, #12
   b436c:	9401      	str	r4, [sp, #4]
   b436e:	2202      	movs	r2, #2
   b4370:	218f      	movs	r1, #143	; 0x8f
   b4372:	f7ff ff7d 	bl	b4270 <_ZN9LIDARLite4readEciPhbc>
  int distance = (distanceArray[0] << 8) + distanceArray[1];
   b4376:	f89d 000c 	ldrb.w	r0, [sp, #12]
   b437a:	f89d 300d 	ldrb.w	r3, [sp, #13]
} /* LIDARLite::distance */
   b437e:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   b4382:	b005      	add	sp, #20
   b4384:	bd30      	pop	{r4, r5, pc}
    write(0x00,0x03,lidarliteAddress);
   b4386:	2203      	movs	r2, #3
   b4388:	e7ea      	b.n	b4360 <_ZN9LIDARLite8distanceEbc+0x10>
	...

000b438c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b438c:	b508      	push	{r3, lr}
   b438e:	4b02      	ldr	r3, [pc, #8]	; (b4398 <os_mutex_recursive_create+0xc>)
   b4390:	681b      	ldr	r3, [r3, #0]
   b4392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4394:	9301      	str	r3, [sp, #4]
   b4396:	bd08      	pop	{r3, pc}
   b4398:	00030248 	.word	0x00030248

000b439c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b439c:	b508      	push	{r3, lr}
   b439e:	4b02      	ldr	r3, [pc, #8]	; (b43a8 <HAL_RNG_GetRandomNumber+0xc>)
   b43a0:	681b      	ldr	r3, [r3, #0]
   b43a2:	685b      	ldr	r3, [r3, #4]
   b43a4:	9301      	str	r3, [sp, #4]
   b43a6:	bd08      	pop	{r3, pc}
   b43a8:	00030218 	.word	0x00030218

000b43ac <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b43ac:	b508      	push	{r3, lr}
   b43ae:	4b02      	ldr	r3, [pc, #8]	; (b43b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b43b0:	681b      	ldr	r3, [r3, #0]
   b43b2:	695b      	ldr	r3, [r3, #20]
   b43b4:	9301      	str	r3, [sp, #4]
   b43b6:	bd08      	pop	{r3, pc}
   b43b8:	00030218 	.word	0x00030218

000b43bc <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b43bc:	b508      	push	{r3, lr}
   b43be:	4b02      	ldr	r3, [pc, #8]	; (b43c8 <hal_i2c_set_speed+0xc>)
   b43c0:	681b      	ldr	r3, [r3, #0]
   b43c2:	681b      	ldr	r3, [r3, #0]
   b43c4:	9301      	str	r3, [sp, #4]
   b43c6:	bd08      	pop	{r3, pc}
   b43c8:	00030228 	.word	0x00030228

000b43cc <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b43cc:	b508      	push	{r3, lr}
   b43ce:	4b02      	ldr	r3, [pc, #8]	; (b43d8 <hal_i2c_begin+0xc>)
   b43d0:	681b      	ldr	r3, [r3, #0]
   b43d2:	68db      	ldr	r3, [r3, #12]
   b43d4:	9301      	str	r3, [sp, #4]
   b43d6:	bd08      	pop	{r3, pc}
   b43d8:	00030228 	.word	0x00030228

000b43dc <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b43dc:	b508      	push	{r3, lr}
   b43de:	4b02      	ldr	r3, [pc, #8]	; (b43e8 <hal_i2c_begin_transmission+0xc>)
   b43e0:	681b      	ldr	r3, [r3, #0]
   b43e2:	699b      	ldr	r3, [r3, #24]
   b43e4:	9301      	str	r3, [sp, #4]
   b43e6:	bd08      	pop	{r3, pc}
   b43e8:	00030228 	.word	0x00030228

000b43ec <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b43ec:	b508      	push	{r3, lr}
   b43ee:	4b02      	ldr	r3, [pc, #8]	; (b43f8 <hal_i2c_end_transmission+0xc>)
   b43f0:	681b      	ldr	r3, [r3, #0]
   b43f2:	69db      	ldr	r3, [r3, #28]
   b43f4:	9301      	str	r3, [sp, #4]
   b43f6:	bd08      	pop	{r3, pc}
   b43f8:	00030228 	.word	0x00030228

000b43fc <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b43fc:	b508      	push	{r3, lr}
   b43fe:	4b02      	ldr	r3, [pc, #8]	; (b4408 <hal_i2c_write+0xc>)
   b4400:	681b      	ldr	r3, [r3, #0]
   b4402:	6a1b      	ldr	r3, [r3, #32]
   b4404:	9301      	str	r3, [sp, #4]
   b4406:	bd08      	pop	{r3, pc}
   b4408:	00030228 	.word	0x00030228

000b440c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b440c:	b508      	push	{r3, lr}
   b440e:	4b02      	ldr	r3, [pc, #8]	; (b4418 <hal_i2c_available+0xc>)
   b4410:	681b      	ldr	r3, [r3, #0]
   b4412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4414:	9301      	str	r3, [sp, #4]
   b4416:	bd08      	pop	{r3, pc}
   b4418:	00030228 	.word	0x00030228

000b441c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b441c:	b508      	push	{r3, lr}
   b441e:	4b02      	ldr	r3, [pc, #8]	; (b4428 <hal_i2c_read+0xc>)
   b4420:	681b      	ldr	r3, [r3, #0]
   b4422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4424:	9301      	str	r3, [sp, #4]
   b4426:	bd08      	pop	{r3, pc}
   b4428:	00030228 	.word	0x00030228

000b442c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b442c:	b508      	push	{r3, lr}
   b442e:	4b02      	ldr	r3, [pc, #8]	; (b4438 <hal_i2c_peek+0xc>)
   b4430:	681b      	ldr	r3, [r3, #0]
   b4432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4434:	9301      	str	r3, [sp, #4]
   b4436:	bd08      	pop	{r3, pc}
   b4438:	00030228 	.word	0x00030228

000b443c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b443c:	b508      	push	{r3, lr}
   b443e:	4b02      	ldr	r3, [pc, #8]	; (b4448 <hal_i2c_flush+0xc>)
   b4440:	681b      	ldr	r3, [r3, #0]
   b4442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4444:	9301      	str	r3, [sp, #4]
   b4446:	bd08      	pop	{r3, pc}
   b4448:	00030228 	.word	0x00030228

000b444c <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b444c:	b508      	push	{r3, lr}
   b444e:	4b02      	ldr	r3, [pc, #8]	; (b4458 <hal_i2c_init+0xc>)
   b4450:	681b      	ldr	r3, [r3, #0]
   b4452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4454:	9301      	str	r3, [sp, #4]
   b4456:	bd08      	pop	{r3, pc}
   b4458:	00030228 	.word	0x00030228

000b445c <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b445c:	b508      	push	{r3, lr}
   b445e:	4b02      	ldr	r3, [pc, #8]	; (b4468 <hal_i2c_request_ex+0xc>)
   b4460:	681b      	ldr	r3, [r3, #0]
   b4462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4464:	9301      	str	r3, [sp, #4]
   b4466:	bd08      	pop	{r3, pc}
   b4468:	00030228 	.word	0x00030228

000b446c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b446c:	b508      	push	{r3, lr}
   b446e:	4b02      	ldr	r3, [pc, #8]	; (b4478 <inet_inet_ntop+0xc>)
   b4470:	681b      	ldr	r3, [r3, #0]
   b4472:	695b      	ldr	r3, [r3, #20]
   b4474:	9301      	str	r3, [sp, #4]
   b4476:	bd08      	pop	{r3, pc}
   b4478:	00030264 	.word	0x00030264

000b447c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b447c:	b508      	push	{r3, lr}
   b447e:	4b02      	ldr	r3, [pc, #8]	; (b4488 <netdb_freeaddrinfo+0xc>)
   b4480:	681b      	ldr	r3, [r3, #0]
   b4482:	689b      	ldr	r3, [r3, #8]
   b4484:	9301      	str	r3, [sp, #4]
   b4486:	bd08      	pop	{r3, pc}
   b4488:	00030268 	.word	0x00030268

000b448c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b448c:	b508      	push	{r3, lr}
   b448e:	4b02      	ldr	r3, [pc, #8]	; (b4498 <netdb_getaddrinfo+0xc>)
   b4490:	681b      	ldr	r3, [r3, #0]
   b4492:	68db      	ldr	r3, [r3, #12]
   b4494:	9301      	str	r3, [sp, #4]
   b4496:	bd08      	pop	{r3, pc}
   b4498:	00030268 	.word	0x00030268

000b449c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b449c:	b508      	push	{r3, lr}
   b449e:	4b02      	ldr	r3, [pc, #8]	; (b44a8 <hal_usart_write+0xc>)
   b44a0:	681b      	ldr	r3, [r3, #0]
   b44a2:	68db      	ldr	r3, [r3, #12]
   b44a4:	9301      	str	r3, [sp, #4]
   b44a6:	bd08      	pop	{r3, pc}
   b44a8:	0003023c 	.word	0x0003023c

000b44ac <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b44ac:	b508      	push	{r3, lr}
   b44ae:	4b02      	ldr	r3, [pc, #8]	; (b44b8 <hal_usart_available+0xc>)
   b44b0:	681b      	ldr	r3, [r3, #0]
   b44b2:	691b      	ldr	r3, [r3, #16]
   b44b4:	9301      	str	r3, [sp, #4]
   b44b6:	bd08      	pop	{r3, pc}
   b44b8:	0003023c 	.word	0x0003023c

000b44bc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b44bc:	b508      	push	{r3, lr}
   b44be:	4b02      	ldr	r3, [pc, #8]	; (b44c8 <hal_usart_read+0xc>)
   b44c0:	681b      	ldr	r3, [r3, #0]
   b44c2:	695b      	ldr	r3, [r3, #20]
   b44c4:	9301      	str	r3, [sp, #4]
   b44c6:	bd08      	pop	{r3, pc}
   b44c8:	0003023c 	.word	0x0003023c

000b44cc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b44cc:	b508      	push	{r3, lr}
   b44ce:	4b02      	ldr	r3, [pc, #8]	; (b44d8 <hal_usart_peek+0xc>)
   b44d0:	681b      	ldr	r3, [r3, #0]
   b44d2:	699b      	ldr	r3, [r3, #24]
   b44d4:	9301      	str	r3, [sp, #4]
   b44d6:	bd08      	pop	{r3, pc}
   b44d8:	0003023c 	.word	0x0003023c

000b44dc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b44dc:	b508      	push	{r3, lr}
   b44de:	4b02      	ldr	r3, [pc, #8]	; (b44e8 <hal_usart_flush+0xc>)
   b44e0:	681b      	ldr	r3, [r3, #0]
   b44e2:	69db      	ldr	r3, [r3, #28]
   b44e4:	9301      	str	r3, [sp, #4]
   b44e6:	bd08      	pop	{r3, pc}
   b44e8:	0003023c 	.word	0x0003023c

000b44ec <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b44ec:	b508      	push	{r3, lr}
   b44ee:	4b02      	ldr	r3, [pc, #8]	; (b44f8 <hal_usart_available_data_for_write+0xc>)
   b44f0:	681b      	ldr	r3, [r3, #0]
   b44f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b44f4:	9301      	str	r3, [sp, #4]
   b44f6:	bd08      	pop	{r3, pc}
   b44f8:	0003023c 	.word	0x0003023c

000b44fc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b44fc:	b508      	push	{r3, lr}
   b44fe:	4b02      	ldr	r3, [pc, #8]	; (b4508 <hal_usart_init_ex+0xc>)
   b4500:	681b      	ldr	r3, [r3, #0]
   b4502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4504:	9301      	str	r3, [sp, #4]
   b4506:	bd08      	pop	{r3, pc}
   b4508:	0003023c 	.word	0x0003023c

000b450c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b450c:	b508      	push	{r3, lr}
   b450e:	4b02      	ldr	r3, [pc, #8]	; (b4518 <HAL_USB_USART_Init+0xc>)
   b4510:	681b      	ldr	r3, [r3, #0]
   b4512:	681b      	ldr	r3, [r3, #0]
   b4514:	9301      	str	r3, [sp, #4]
   b4516:	bd08      	pop	{r3, pc}
   b4518:	0003024c 	.word	0x0003024c

000b451c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b451c:	b508      	push	{r3, lr}
   b451e:	4b02      	ldr	r3, [pc, #8]	; (b4528 <HAL_USB_USART_Begin+0xc>)
   b4520:	681b      	ldr	r3, [r3, #0]
   b4522:	685b      	ldr	r3, [r3, #4]
   b4524:	9301      	str	r3, [sp, #4]
   b4526:	bd08      	pop	{r3, pc}
   b4528:	0003024c 	.word	0x0003024c

000b452c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b452c:	b508      	push	{r3, lr}
   b452e:	4b02      	ldr	r3, [pc, #8]	; (b4538 <HAL_USB_USART_Available_Data+0xc>)
   b4530:	681b      	ldr	r3, [r3, #0]
   b4532:	691b      	ldr	r3, [r3, #16]
   b4534:	9301      	str	r3, [sp, #4]
   b4536:	bd08      	pop	{r3, pc}
   b4538:	0003024c 	.word	0x0003024c

000b453c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b453c:	b508      	push	{r3, lr}
   b453e:	4b02      	ldr	r3, [pc, #8]	; (b4548 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4540:	681b      	ldr	r3, [r3, #0]
   b4542:	695b      	ldr	r3, [r3, #20]
   b4544:	9301      	str	r3, [sp, #4]
   b4546:	bd08      	pop	{r3, pc}
   b4548:	0003024c 	.word	0x0003024c

000b454c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b454c:	b508      	push	{r3, lr}
   b454e:	4b02      	ldr	r3, [pc, #8]	; (b4558 <HAL_USB_USART_Receive_Data+0xc>)
   b4550:	681b      	ldr	r3, [r3, #0]
   b4552:	699b      	ldr	r3, [r3, #24]
   b4554:	9301      	str	r3, [sp, #4]
   b4556:	bd08      	pop	{r3, pc}
   b4558:	0003024c 	.word	0x0003024c

000b455c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b455c:	b508      	push	{r3, lr}
   b455e:	4b02      	ldr	r3, [pc, #8]	; (b4568 <HAL_USB_USART_Send_Data+0xc>)
   b4560:	681b      	ldr	r3, [r3, #0]
   b4562:	69db      	ldr	r3, [r3, #28]
   b4564:	9301      	str	r3, [sp, #4]
   b4566:	bd08      	pop	{r3, pc}
   b4568:	0003024c 	.word	0x0003024c

000b456c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b456c:	b508      	push	{r3, lr}
   b456e:	4b02      	ldr	r3, [pc, #8]	; (b4578 <HAL_USB_USART_Flush_Data+0xc>)
   b4570:	681b      	ldr	r3, [r3, #0]
   b4572:	6a1b      	ldr	r3, [r3, #32]
   b4574:	9301      	str	r3, [sp, #4]
   b4576:	bd08      	pop	{r3, pc}
   b4578:	0003024c 	.word	0x0003024c

000b457c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b457c:	b508      	push	{r3, lr}
   b457e:	4b02      	ldr	r3, [pc, #8]	; (b4588 <set_system_mode+0xc>)
   b4580:	681b      	ldr	r3, [r3, #0]
   b4582:	685b      	ldr	r3, [r3, #4]
   b4584:	9301      	str	r3, [sp, #4]
   b4586:	bd08      	pop	{r3, pc}
   b4588:	00030220 	.word	0x00030220

000b458c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b458c:	b508      	push	{r3, lr}
   b458e:	4b02      	ldr	r3, [pc, #8]	; (b4598 <system_delay_ms+0xc>)
   b4590:	681b      	ldr	r3, [r3, #0]
   b4592:	695b      	ldr	r3, [r3, #20]
   b4594:	9301      	str	r3, [sp, #4]
   b4596:	bd08      	pop	{r3, pc}
   b4598:	00030220 	.word	0x00030220

000b459c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b459c:	b508      	push	{r3, lr}
   b459e:	4b03      	ldr	r3, [pc, #12]	; (b45ac <system_ctrl_set_app_request_handler+0x10>)
   b45a0:	681b      	ldr	r3, [r3, #0]
   b45a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b45a6:	9301      	str	r3, [sp, #4]
   b45a8:	bd08      	pop	{r3, pc}
   b45aa:	0000      	.short	0x0000
   b45ac:	00030220 	.word	0x00030220

000b45b0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b45b0:	b508      	push	{r3, lr}
   b45b2:	4b03      	ldr	r3, [pc, #12]	; (b45c0 <system_ctrl_set_result+0x10>)
   b45b4:	681b      	ldr	r3, [r3, #0]
   b45b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b45ba:	9301      	str	r3, [sp, #4]
   b45bc:	bd08      	pop	{r3, pc}
   b45be:	0000      	.short	0x0000
   b45c0:	00030220 	.word	0x00030220

000b45c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b45c4:	b508      	push	{r3, lr}
   b45c6:	4b02      	ldr	r3, [pc, #8]	; (b45d0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b45c8:	681b      	ldr	r3, [r3, #0]
   b45ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b45cc:	9301      	str	r3, [sp, #4]
   b45ce:	bd08      	pop	{r3, pc}
   b45d0:	00030244 	.word	0x00030244

000b45d4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b45d4:	b508      	push	{r3, lr}
   b45d6:	4b02      	ldr	r3, [pc, #8]	; (b45e0 <network_connect+0xc>)
   b45d8:	681b      	ldr	r3, [r3, #0]
   b45da:	685b      	ldr	r3, [r3, #4]
   b45dc:	9301      	str	r3, [sp, #4]
   b45de:	bd08      	pop	{r3, pc}
   b45e0:	00030240 	.word	0x00030240

000b45e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b45e4:	b508      	push	{r3, lr}
   b45e6:	4b02      	ldr	r3, [pc, #8]	; (b45f0 <network_connecting+0xc>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	689b      	ldr	r3, [r3, #8]
   b45ec:	9301      	str	r3, [sp, #4]
   b45ee:	bd08      	pop	{r3, pc}
   b45f0:	00030240 	.word	0x00030240

000b45f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b45f4:	b508      	push	{r3, lr}
   b45f6:	4b02      	ldr	r3, [pc, #8]	; (b4600 <network_disconnect+0xc>)
   b45f8:	681b      	ldr	r3, [r3, #0]
   b45fa:	68db      	ldr	r3, [r3, #12]
   b45fc:	9301      	str	r3, [sp, #4]
   b45fe:	bd08      	pop	{r3, pc}
   b4600:	00030240 	.word	0x00030240

000b4604 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4604:	b508      	push	{r3, lr}
   b4606:	4b02      	ldr	r3, [pc, #8]	; (b4610 <network_ready+0xc>)
   b4608:	681b      	ldr	r3, [r3, #0]
   b460a:	691b      	ldr	r3, [r3, #16]
   b460c:	9301      	str	r3, [sp, #4]
   b460e:	bd08      	pop	{r3, pc}
   b4610:	00030240 	.word	0x00030240

000b4614 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b02      	ldr	r3, [pc, #8]	; (b4620 <network_on+0xc>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	695b      	ldr	r3, [r3, #20]
   b461c:	9301      	str	r3, [sp, #4]
   b461e:	bd08      	pop	{r3, pc}
   b4620:	00030240 	.word	0x00030240

000b4624 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4624:	b508      	push	{r3, lr}
   b4626:	4b02      	ldr	r3, [pc, #8]	; (b4630 <network_off+0xc>)
   b4628:	681b      	ldr	r3, [r3, #0]
   b462a:	699b      	ldr	r3, [r3, #24]
   b462c:	9301      	str	r3, [sp, #4]
   b462e:	bd08      	pop	{r3, pc}
   b4630:	00030240 	.word	0x00030240

000b4634 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <network_listen+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	69db      	ldr	r3, [r3, #28]
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	00030240 	.word	0x00030240

000b4644 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <network_listening+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	6a1b      	ldr	r3, [r3, #32]
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	00030240 	.word	0x00030240

000b4654 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <network_set_listen_timeout+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	00030240 	.word	0x00030240

000b4664 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b02      	ldr	r3, [pc, #8]	; (b4670 <network_get_listen_timeout+0xc>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b466c:	9301      	str	r3, [sp, #4]
   b466e:	bd08      	pop	{r3, pc}
   b4670:	00030240 	.word	0x00030240

000b4674 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4674:	b508      	push	{r3, lr}
   b4676:	4b02      	ldr	r3, [pc, #8]	; (b4680 <network_is_on+0xc>)
   b4678:	681b      	ldr	r3, [r3, #0]
   b467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b467c:	9301      	str	r3, [sp, #4]
   b467e:	bd08      	pop	{r3, pc}
   b4680:	00030240 	.word	0x00030240

000b4684 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <network_is_off+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	00030240 	.word	0x00030240

000b4694 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <malloc+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	681b      	ldr	r3, [r3, #0]
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	0003021c 	.word	0x0003021c

000b46a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <free+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	685b      	ldr	r3, [r3, #4]
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	0003021c 	.word	0x0003021c

000b46b4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <vsnprintf+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	0003021c 	.word	0x0003021c

000b46c4 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <__assert_func+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	0003021c 	.word	0x0003021c

000b46d4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b02      	ldr	r3, [pc, #8]	; (b46e0 <newlib_impure_ptr_callback+0xc>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b46dc:	9301      	str	r3, [sp, #4]
   b46de:	bd08      	pop	{r3, pc}
   b46e0:	0003021c 	.word	0x0003021c

000b46e4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b46e4:	2100      	movs	r1, #0
   b46e6:	f7ff bf51 	b.w	b458c <system_delay_ms>
	...

000b46ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b46ec:	4802      	ldr	r0, [pc, #8]	; (b46f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b46ee:	2300      	movs	r3, #0
   b46f0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b46f2:	f7ff be4b 	b.w	b438c <os_mutex_recursive_create>
   b46f6:	bf00      	nop
   b46f8:	2003e69c 	.word	0x2003e69c

000b46fc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b46fc:	2200      	movs	r2, #0
   b46fe:	6840      	ldr	r0, [r0, #4]
   b4700:	4611      	mov	r1, r2
   b4702:	f7ff bf7f 	b.w	b4604 <network_ready>

000b4706 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b4706:	2200      	movs	r2, #0
   b4708:	6840      	ldr	r0, [r0, #4]
   b470a:	4611      	mov	r1, r2
   b470c:	f7ff bf9a 	b.w	b4644 <network_listening>

000b4710 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4710:	2200      	movs	r2, #0
   b4712:	6840      	ldr	r0, [r0, #4]
   b4714:	4611      	mov	r1, r2
   b4716:	f7ff bfa5 	b.w	b4664 <network_get_listen_timeout>

000b471a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b471a:	6840      	ldr	r0, [r0, #4]
   b471c:	2200      	movs	r2, #0
   b471e:	f7ff bf99 	b.w	b4654 <network_set_listen_timeout>

000b4722 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4722:	6840      	ldr	r0, [r0, #4]
   b4724:	2200      	movs	r2, #0
   b4726:	f081 0101 	eor.w	r1, r1, #1
   b472a:	f7ff bf83 	b.w	b4634 <network_listen>

000b472e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b472e:	2300      	movs	r3, #0
   b4730:	6840      	ldr	r0, [r0, #4]
   b4732:	461a      	mov	r2, r3
   b4734:	4619      	mov	r1, r3
   b4736:	f7ff bf75 	b.w	b4624 <network_off>

000b473a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b473a:	2300      	movs	r3, #0
   b473c:	6840      	ldr	r0, [r0, #4]
   b473e:	461a      	mov	r2, r3
   b4740:	4619      	mov	r1, r3
   b4742:	f7ff bf67 	b.w	b4614 <network_on>

000b4746 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4746:	2200      	movs	r2, #0
   b4748:	6840      	ldr	r0, [r0, #4]
   b474a:	4611      	mov	r1, r2
   b474c:	f7ff bf4a 	b.w	b45e4 <network_connecting>

000b4750 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4750:	6840      	ldr	r0, [r0, #4]
   b4752:	2200      	movs	r2, #0
   b4754:	2102      	movs	r1, #2
   b4756:	f7ff bf4d 	b.w	b45f4 <network_disconnect>

000b475a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b475a:	2300      	movs	r3, #0
   b475c:	6840      	ldr	r0, [r0, #4]
   b475e:	461a      	mov	r2, r3
   b4760:	f7ff bf38 	b.w	b45d4 <network_connect>

000b4764 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b4764:	4b08      	ldr	r3, [pc, #32]	; (b4788 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b4766:	b510      	push	{r4, lr}
   b4768:	2428      	movs	r4, #40	; 0x28
   b476a:	4622      	mov	r2, r4
   b476c:	4618      	mov	r0, r3
   b476e:	2100      	movs	r1, #0
   b4770:	f000 fcc8 	bl	b5104 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4774:	4b05      	ldr	r3, [pc, #20]	; (b478c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b4776:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b4778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b477c:	6042      	str	r2, [r0, #4]
   b477e:	2204      	movs	r2, #4
   b4780:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b4782:	4a03      	ldr	r2, [pc, #12]	; (b4790 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b4784:	601a      	str	r2, [r3, #0]
   b4786:	bd10      	pop	{r4, pc}
   b4788:	2003e6a8 	.word	0x2003e6a8
   b478c:	2003e6a0 	.word	0x2003e6a0
   b4790:	000b5298 	.word	0x000b5298

000b4794 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4794:	2200      	movs	r2, #0
   b4796:	6840      	ldr	r0, [r0, #4]
   b4798:	4611      	mov	r1, r2
   b479a:	f7ff bf53 	b.w	b4644 <network_listening>

000b479e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b479e:	2200      	movs	r2, #0
   b47a0:	6840      	ldr	r0, [r0, #4]
   b47a2:	4611      	mov	r1, r2
   b47a4:	f7ff bf5e 	b.w	b4664 <network_get_listen_timeout>

000b47a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b47a8:	6840      	ldr	r0, [r0, #4]
   b47aa:	2200      	movs	r2, #0
   b47ac:	f7ff bf52 	b.w	b4654 <network_set_listen_timeout>

000b47b0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b47b0:	6840      	ldr	r0, [r0, #4]
   b47b2:	2200      	movs	r2, #0
   b47b4:	f081 0101 	eor.w	r1, r1, #1
   b47b8:	f7ff bf3c 	b.w	b4634 <network_listen>

000b47bc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b47bc:	2300      	movs	r3, #0
   b47be:	6840      	ldr	r0, [r0, #4]
   b47c0:	461a      	mov	r2, r3
   b47c2:	4619      	mov	r1, r3
   b47c4:	f7ff bf2e 	b.w	b4624 <network_off>

000b47c8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b47c8:	2300      	movs	r3, #0
   b47ca:	6840      	ldr	r0, [r0, #4]
   b47cc:	461a      	mov	r2, r3
   b47ce:	4619      	mov	r1, r3
   b47d0:	f7ff bf20 	b.w	b4614 <network_on>

000b47d4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b47d4:	2200      	movs	r2, #0
   b47d6:	6840      	ldr	r0, [r0, #4]
   b47d8:	4611      	mov	r1, r2
   b47da:	f7ff bf13 	b.w	b4604 <network_ready>

000b47de <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b47de:	2200      	movs	r2, #0
   b47e0:	6840      	ldr	r0, [r0, #4]
   b47e2:	4611      	mov	r1, r2
   b47e4:	f7ff befe 	b.w	b45e4 <network_connecting>

000b47e8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b47e8:	6840      	ldr	r0, [r0, #4]
   b47ea:	2200      	movs	r2, #0
   b47ec:	2102      	movs	r1, #2
   b47ee:	f7ff bf01 	b.w	b45f4 <network_disconnect>

000b47f2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b47f2:	2300      	movs	r3, #0
   b47f4:	6840      	ldr	r0, [r0, #4]
   b47f6:	461a      	mov	r2, r3
   b47f8:	f7ff beec 	b.w	b45d4 <network_connect>

000b47fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b47fc:	4b02      	ldr	r3, [pc, #8]	; (b4808 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b47fe:	2203      	movs	r2, #3
   b4800:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4802:	4a02      	ldr	r2, [pc, #8]	; (b480c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4804:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4806:	4770      	bx	lr
   b4808:	2003e6d0 	.word	0x2003e6d0
   b480c:	000b52d4 	.word	0x000b52d4

000b4810 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4810:	4770      	bx	lr

000b4812 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4814:	4606      	mov	r6, r0
   b4816:	4615      	mov	r5, r2
   b4818:	460c      	mov	r4, r1
   b481a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b481c:	42bc      	cmp	r4, r7
   b481e:	d006      	beq.n	b482e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4820:	6833      	ldr	r3, [r6, #0]
   b4822:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4826:	689b      	ldr	r3, [r3, #8]
   b4828:	4630      	mov	r0, r6
   b482a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b482c:	e7f6      	b.n	b481c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b482e:	4628      	mov	r0, r5
   b4830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4832 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4832:	7c00      	ldrb	r0, [r0, #16]
   b4834:	2200      	movs	r2, #0
   b4836:	f7ff bde1 	b.w	b43fc <hal_i2c_write>

000b483a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b483a:	7c00      	ldrb	r0, [r0, #16]
   b483c:	2100      	movs	r1, #0
   b483e:	f7ff bde5 	b.w	b440c <hal_i2c_available>

000b4842 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4842:	7c00      	ldrb	r0, [r0, #16]
   b4844:	2100      	movs	r1, #0
   b4846:	f7ff bde9 	b.w	b441c <hal_i2c_read>

000b484a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b484a:	7c00      	ldrb	r0, [r0, #16]
   b484c:	2100      	movs	r1, #0
   b484e:	f7ff bded 	b.w	b442c <hal_i2c_peek>

000b4852 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4852:	7c00      	ldrb	r0, [r0, #16]
   b4854:	2100      	movs	r1, #0
   b4856:	f7ff bdf1 	b.w	b443c <hal_i2c_flush>

000b485a <_ZN7TwoWireD0Ev>:
   b485a:	b510      	push	{r4, lr}
   b485c:	2114      	movs	r1, #20
   b485e:	4604      	mov	r4, r0
   b4860:	f7ff fc19 	bl	b4096 <_ZdlPvj>
   b4864:	4620      	mov	r0, r4
   b4866:	bd10      	pop	{r4, pc}

000b4868 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4868:	b538      	push	{r3, r4, r5, lr}
   b486a:	4604      	mov	r4, r0
   b486c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b486e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4872:	2200      	movs	r2, #0
   b4874:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4878:	4b09      	ldr	r3, [pc, #36]	; (b48a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b487a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b487c:	4608      	mov	r0, r1
   b487e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4880:	4629      	mov	r1, r5
   b4882:	f7ff fde3 	bl	b444c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4886:	30bf      	adds	r0, #191	; 0xbf
   b4888:	d108      	bne.n	b489c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b488a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b488c:	07db      	lsls	r3, r3, #31
   b488e:	d505      	bpl.n	b489c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4890:	6868      	ldr	r0, [r5, #4]
   b4892:	f7ff ff07 	bl	b46a4 <free>
    free(conf.tx_buffer);
   b4896:	68e8      	ldr	r0, [r5, #12]
   b4898:	f7ff ff04 	bl	b46a4 <free>
}
   b489c:	4620      	mov	r0, r4
   b489e:	bd38      	pop	{r3, r4, r5, pc}
   b48a0:	000b5310 	.word	0x000b5310

000b48a4 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b48a4:	7c00      	ldrb	r0, [r0, #16]
   b48a6:	2200      	movs	r2, #0
   b48a8:	f7ff bd88 	b.w	b43bc <hal_i2c_set_speed>

000b48ac <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b48ac:	2300      	movs	r3, #0
   b48ae:	7c00      	ldrb	r0, [r0, #16]
   b48b0:	461a      	mov	r2, r3
   b48b2:	4619      	mov	r1, r3
   b48b4:	f7ff bd8a 	b.w	b43cc <hal_i2c_begin>

000b48b8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b48b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b48ba:	2200      	movs	r2, #0
   b48bc:	2314      	movs	r3, #20
   b48be:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b48c2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b48c6:	780b      	ldrb	r3, [r1, #0]
   b48c8:	f88d 3008 	strb.w	r3, [sp, #8]
   b48cc:	684b      	ldr	r3, [r1, #4]
   b48ce:	9303      	str	r3, [sp, #12]
   b48d0:	68cb      	ldr	r3, [r1, #12]
   b48d2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b48d4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b48d6:	7a0b      	ldrb	r3, [r1, #8]
   b48d8:	9305      	str	r3, [sp, #20]
   b48da:	a901      	add	r1, sp, #4
   b48dc:	f7ff fdbe 	bl	b445c <hal_i2c_request_ex>
}
   b48e0:	b007      	add	sp, #28
   b48e2:	f85d fb04 	ldr.w	pc, [sp], #4

000b48e6 <_ZN7TwoWire11requestFromEhjh>:
{
   b48e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b48e8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b48ea:	f88d 1000 	strb.w	r1, [sp]
   b48ee:	f04f 0164 	mov.w	r1, #100	; 0x64
   b48f2:	9103      	str	r1, [sp, #12]
   b48f4:	bf18      	it	ne
   b48f6:	2301      	movne	r3, #1
   b48f8:	4669      	mov	r1, sp
    size_ = size;
   b48fa:	9201      	str	r2, [sp, #4]
   b48fc:	f88d 3008 	strb.w	r3, [sp, #8]
   b4900:	f7ff ffda 	bl	b48b8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b4904:	b005      	add	sp, #20
   b4906:	f85d fb04 	ldr.w	pc, [sp], #4

000b490a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b490a:	2301      	movs	r3, #1
   b490c:	f7ff bfeb 	b.w	b48e6 <_ZN7TwoWire11requestFromEhjh>

000b4910 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b4910:	7c00      	ldrb	r0, [r0, #16]
   b4912:	2200      	movs	r2, #0
   b4914:	f7ff bd62 	b.w	b43dc <hal_i2c_begin_transmission>

000b4918 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b4918:	b2c9      	uxtb	r1, r1
   b491a:	f7ff bff9 	b.w	b4910 <_ZN7TwoWire17beginTransmissionEh>

000b491e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b491e:	7c00      	ldrb	r0, [r0, #16]
   b4920:	2200      	movs	r2, #0
   b4922:	f7ff bd63 	b.w	b43ec <hal_i2c_end_transmission>

000b4926 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b4926:	2101      	movs	r1, #1
   b4928:	f7ff bff9 	b.w	b491e <_ZN7TwoWire15endTransmissionEh>

000b492c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b492c:	4770      	bx	lr

000b492e <_ZN9IPAddressD0Ev>:
   b492e:	b510      	push	{r4, lr}
   b4930:	2118      	movs	r1, #24
   b4932:	4604      	mov	r4, r0
   b4934:	f7ff fbaf 	bl	b4096 <_ZdlPvj>
   b4938:	4620      	mov	r0, r4
   b493a:	bd10      	pop	{r4, pc}

000b493c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b493c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b493e:	7d03      	ldrb	r3, [r0, #20]
   b4940:	2b06      	cmp	r3, #6
{
   b4942:	b08d      	sub	sp, #52	; 0x34
   b4944:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4946:	f100 0704 	add.w	r7, r0, #4
   b494a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b494e:	d012      	beq.n	b4976 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4950:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4954:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4958:	220a      	movs	r2, #10
   b495a:	4630      	mov	r0, r6
   b495c:	f000 f959 	bl	b4c12 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4960:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4962:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4964:	d019      	beq.n	b499a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4966:	2c00      	cmp	r4, #0
   b4968:	d0f4      	beq.n	b4954 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b496a:	212e      	movs	r1, #46	; 0x2e
   b496c:	4630      	mov	r0, r6
   b496e:	f000 f937 	bl	b4be0 <_ZN5Print5printEc>
   b4972:	4404      	add	r4, r0
   b4974:	e7ee      	b.n	b4954 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4976:	232f      	movs	r3, #47	; 0x2f
   b4978:	466a      	mov	r2, sp
   b497a:	4639      	mov	r1, r7
   b497c:	200a      	movs	r0, #10
		buf[0] = 0;
   b497e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4982:	f7ff fd73 	bl	b446c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4986:	4668      	mov	r0, sp
   b4988:	f000 fbf2 	bl	b5170 <strlen>
   b498c:	6833      	ldr	r3, [r6, #0]
   b498e:	4602      	mov	r2, r0
   b4990:	68db      	ldr	r3, [r3, #12]
   b4992:	4669      	mov	r1, sp
   b4994:	4630      	mov	r0, r6
   b4996:	4798      	blx	r3
   b4998:	4604      	mov	r4, r0
    }
    return n;
}
   b499a:	4620      	mov	r0, r4
   b499c:	b00d      	add	sp, #52	; 0x34
   b499e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b49a0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b49a0:	b510      	push	{r4, lr}
   b49a2:	4b05      	ldr	r3, [pc, #20]	; (b49b8 <_ZN9IPAddressC1Ev+0x18>)
   b49a4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b49a6:	2211      	movs	r2, #17
   b49a8:	f840 3b04 	str.w	r3, [r0], #4
   b49ac:	2100      	movs	r1, #0
   b49ae:	f000 fba9 	bl	b5104 <memset>
}
   b49b2:	4620      	mov	r0, r4
   b49b4:	bd10      	pop	{r4, pc}
   b49b6:	bf00      	nop
   b49b8:	000b5338 	.word	0x000b5338

000b49bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b49bc:	4603      	mov	r3, r0
   b49be:	4a07      	ldr	r2, [pc, #28]	; (b49dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b49c0:	b510      	push	{r4, lr}
   b49c2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b49c6:	f101 0210 	add.w	r2, r1, #16
   b49ca:	f851 4b04 	ldr.w	r4, [r1], #4
   b49ce:	f843 4b04 	str.w	r4, [r3], #4
   b49d2:	4291      	cmp	r1, r2
   b49d4:	d1f9      	bne.n	b49ca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b49d6:	780a      	ldrb	r2, [r1, #0]
   b49d8:	701a      	strb	r2, [r3, #0]
}
   b49da:	bd10      	pop	{r4, pc}
   b49dc:	000b5338 	.word	0x000b5338

000b49e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b49e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b49e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b49e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b49ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b49ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b49f2:	2304      	movs	r3, #4
   b49f4:	6041      	str	r1, [r0, #4]
   b49f6:	7503      	strb	r3, [r0, #20]
}
   b49f8:	bd10      	pop	{r4, pc}
	...

000b49fc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b49fc:	b507      	push	{r0, r1, r2, lr}
   b49fe:	4b06      	ldr	r3, [pc, #24]	; (b4a18 <_ZN9IPAddressC1EPKh+0x1c>)
   b4a00:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4a02:	78cb      	ldrb	r3, [r1, #3]
   b4a04:	9300      	str	r3, [sp, #0]
   b4a06:	788b      	ldrb	r3, [r1, #2]
   b4a08:	784a      	ldrb	r2, [r1, #1]
   b4a0a:	7809      	ldrb	r1, [r1, #0]
   b4a0c:	f7ff ffe8 	bl	b49e0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4a10:	b003      	add	sp, #12
   b4a12:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a16:	bf00      	nop
   b4a18:	000b5338 	.word	0x000b5338

000b4a1c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4a1c:	4b01      	ldr	r3, [pc, #4]	; (b4a24 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4a1e:	4a02      	ldr	r2, [pc, #8]	; (b4a28 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4a20:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4a22:	4770      	bx	lr
   b4a24:	2003e6d8 	.word	0x2003e6d8
   b4a28:	000b5344 	.word	0x000b5344

000b4a2c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4a2c:	2300      	movs	r3, #0
   b4a2e:	6840      	ldr	r0, [r0, #4]
   b4a30:	461a      	mov	r2, r3
   b4a32:	f7ff bdcf 	b.w	b45d4 <network_connect>

000b4a36 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4a36:	6840      	ldr	r0, [r0, #4]
   b4a38:	2200      	movs	r2, #0
   b4a3a:	2102      	movs	r1, #2
   b4a3c:	f7ff bdda 	b.w	b45f4 <network_disconnect>

000b4a40 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4a40:	2200      	movs	r2, #0
   b4a42:	6840      	ldr	r0, [r0, #4]
   b4a44:	4611      	mov	r1, r2
   b4a46:	f7ff bdcd 	b.w	b45e4 <network_connecting>

000b4a4a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4a4a:	2200      	movs	r2, #0
   b4a4c:	6840      	ldr	r0, [r0, #4]
   b4a4e:	4611      	mov	r1, r2
   b4a50:	f7ff bdd8 	b.w	b4604 <network_ready>

000b4a54 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4a54:	2300      	movs	r3, #0
   b4a56:	6840      	ldr	r0, [r0, #4]
   b4a58:	461a      	mov	r2, r3
   b4a5a:	4619      	mov	r1, r3
   b4a5c:	f7ff bdda 	b.w	b4614 <network_on>

000b4a60 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4a60:	2300      	movs	r3, #0
   b4a62:	6840      	ldr	r0, [r0, #4]
   b4a64:	461a      	mov	r2, r3
   b4a66:	4619      	mov	r1, r3
   b4a68:	f7ff bddc 	b.w	b4624 <network_off>

000b4a6c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4a6c:	6840      	ldr	r0, [r0, #4]
   b4a6e:	2100      	movs	r1, #0
   b4a70:	f7ff be00 	b.w	b4674 <network_is_on>

000b4a74 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4a74:	6840      	ldr	r0, [r0, #4]
   b4a76:	2100      	movs	r1, #0
   b4a78:	f7ff be04 	b.w	b4684 <network_is_off>

000b4a7c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4a7c:	6840      	ldr	r0, [r0, #4]
   b4a7e:	2200      	movs	r2, #0
   b4a80:	f081 0101 	eor.w	r1, r1, #1
   b4a84:	f7ff bdd6 	b.w	b4634 <network_listen>

000b4a88 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4a88:	6840      	ldr	r0, [r0, #4]
   b4a8a:	2200      	movs	r2, #0
   b4a8c:	f7ff bde2 	b.w	b4654 <network_set_listen_timeout>

000b4a90 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4a90:	2200      	movs	r2, #0
   b4a92:	6840      	ldr	r0, [r0, #4]
   b4a94:	4611      	mov	r1, r2
   b4a96:	f7ff bde5 	b.w	b4664 <network_get_listen_timeout>

000b4a9a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4a9a:	2200      	movs	r2, #0
   b4a9c:	6840      	ldr	r0, [r0, #4]
   b4a9e:	4611      	mov	r1, r2
   b4aa0:	f7ff bdd0 	b.w	b4644 <network_listening>

000b4aa4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4aa8:	b095      	sub	sp, #84	; 0x54
   b4aaa:	4614      	mov	r4, r2
   b4aac:	460d      	mov	r5, r1
   b4aae:	4607      	mov	r7, r0
    IPAddress addr;
   b4ab0:	f7ff ff76 	bl	b49a0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4ab4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4ab6:	221c      	movs	r2, #28
   b4ab8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4aba:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4abc:	f000 fb22 	bl	b5104 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4ac0:	2340      	movs	r3, #64	; 0x40
   b4ac2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4ac4:	4620      	mov	r0, r4
   b4ac6:	466b      	mov	r3, sp
   b4ac8:	aa0c      	add	r2, sp, #48	; 0x30
   b4aca:	2100      	movs	r1, #0
   b4acc:	f7ff fcde 	bl	b448c <netdb_getaddrinfo>
    if (!r) {
   b4ad0:	4604      	mov	r4, r0
   b4ad2:	2800      	cmp	r0, #0
   b4ad4:	d14b      	bne.n	b4b6e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4ad6:	4602      	mov	r2, r0
   b4ad8:	2101      	movs	r1, #1
   b4ada:	6868      	ldr	r0, [r5, #4]
   b4adc:	f7ff fd92 	bl	b4604 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4ae0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4ae2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4ae4:	4622      	mov	r2, r4
   b4ae6:	6868      	ldr	r0, [r5, #4]
   b4ae8:	f7ff fd8c 	bl	b4604 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4aec:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4aee:	4681      	mov	r9, r0
        bool ok = false;
   b4af0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4af2:	2e00      	cmp	r6, #0
   b4af4:	d03b      	beq.n	b4b6e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4af6:	2900      	cmp	r1, #0
   b4af8:	d139      	bne.n	b4b6e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4afa:	6873      	ldr	r3, [r6, #4]
   b4afc:	2b02      	cmp	r3, #2
   b4afe:	d003      	beq.n	b4b08 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4b00:	2b0a      	cmp	r3, #10
   b4b02:	d011      	beq.n	b4b28 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4b04:	69f6      	ldr	r6, [r6, #28]
   b4b06:	e7f4      	b.n	b4af2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4b08:	f1b8 0f00 	cmp.w	r8, #0
   b4b0c:	d0fa      	beq.n	b4b04 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4b0e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4b10:	a806      	add	r0, sp, #24
   b4b12:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4b14:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4b16:	f7ff ff71 	bl	b49fc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4b1c:	1d3c      	adds	r4, r7, #4
   b4b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4b20:	682b      	ldr	r3, [r5, #0]
   b4b22:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4b24:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4b26:	e7ed      	b.n	b4b04 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4b28:	f1b9 0f00 	cmp.w	r9, #0
   b4b2c:	d0ea      	beq.n	b4b04 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4b2e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4b30:	2210      	movs	r2, #16
   b4b32:	a801      	add	r0, sp, #4
   b4b34:	f000 fae6 	bl	b5104 <memset>
                    a.v = 6;
   b4b38:	2306      	movs	r3, #6
   b4b3a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4b3e:	ad01      	add	r5, sp, #4
   b4b40:	f104 0308 	add.w	r3, r4, #8
   b4b44:	3418      	adds	r4, #24
   b4b46:	6818      	ldr	r0, [r3, #0]
   b4b48:	6859      	ldr	r1, [r3, #4]
   b4b4a:	462a      	mov	r2, r5
   b4b4c:	c203      	stmia	r2!, {r0, r1}
   b4b4e:	3308      	adds	r3, #8
   b4b50:	42a3      	cmp	r3, r4
   b4b52:	4615      	mov	r5, r2
   b4b54:	d1f7      	bne.n	b4b46 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4b56:	a901      	add	r1, sp, #4
   b4b58:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4b5a:	ad07      	add	r5, sp, #28
   b4b5c:	f7ff ff2e 	bl	b49bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4b62:	1d3c      	adds	r4, r7, #4
   b4b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4b66:	682b      	ldr	r3, [r5, #0]
   b4b68:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4b6a:	4649      	mov	r1, r9
   b4b6c:	e7ca      	b.n	b4b04 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4b6e:	9800      	ldr	r0, [sp, #0]
   b4b70:	f7ff fc84 	bl	b447c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4b74:	4638      	mov	r0, r7
   b4b76:	b015      	add	sp, #84	; 0x54
   b4b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4b7c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4b7c:	4b02      	ldr	r3, [pc, #8]	; (b4b88 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4b7e:	4a03      	ldr	r2, [pc, #12]	; (b4b8c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4b80:	601a      	str	r2, [r3, #0]
   b4b82:	2200      	movs	r2, #0
   b4b84:	605a      	str	r2, [r3, #4]

} // spark
   b4b86:	4770      	bx	lr
   b4b88:	2003e6dc 	.word	0x2003e6dc
   b4b8c:	000b5350 	.word	0x000b5350

000b4b90 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4b92:	4606      	mov	r6, r0
   b4b94:	460d      	mov	r5, r1
  size_t n = 0;
   b4b96:	188f      	adds	r7, r1, r2
   b4b98:	2400      	movs	r4, #0
  while (size--) {
   b4b9a:	42bd      	cmp	r5, r7
   b4b9c:	d00c      	beq.n	b4bb8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4b9e:	6833      	ldr	r3, [r6, #0]
   b4ba0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4ba4:	689b      	ldr	r3, [r3, #8]
   b4ba6:	4630      	mov	r0, r6
   b4ba8:	4798      	blx	r3
     if (chunk>=0)
   b4baa:	1e03      	subs	r3, r0, #0
   b4bac:	db01      	blt.n	b4bb2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4bae:	441c      	add	r4, r3
  while (size--) {
   b4bb0:	e7f3      	b.n	b4b9a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4bb2:	2c00      	cmp	r4, #0
   b4bb4:	bf08      	it	eq
   b4bb6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4bb8:	4620      	mov	r0, r4
   b4bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4bbc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4bbc:	b513      	push	{r0, r1, r4, lr}
   b4bbe:	4604      	mov	r4, r0
    }
   b4bc0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4bc2:	b159      	cbz	r1, b4bdc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4bc4:	9101      	str	r1, [sp, #4]
   b4bc6:	f000 fad3 	bl	b5170 <strlen>
   b4bca:	6823      	ldr	r3, [r4, #0]
   b4bcc:	9901      	ldr	r1, [sp, #4]
   b4bce:	68db      	ldr	r3, [r3, #12]
   b4bd0:	4602      	mov	r2, r0
   b4bd2:	4620      	mov	r0, r4
    }
   b4bd4:	b002      	add	sp, #8
   b4bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4bda:	4718      	bx	r3
    }
   b4bdc:	b002      	add	sp, #8
   b4bde:	bd10      	pop	{r4, pc}

000b4be0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4be0:	6803      	ldr	r3, [r0, #0]
   b4be2:	689b      	ldr	r3, [r3, #8]
   b4be4:	4718      	bx	r3

000b4be6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4be6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4be8:	210d      	movs	r1, #13
{
   b4bea:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4bec:	f7ff fff8 	bl	b4be0 <_ZN5Print5printEc>
  n += print('\n');
   b4bf0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4bf2:	4604      	mov	r4, r0
  n += print('\n');
   b4bf4:	4628      	mov	r0, r5
   b4bf6:	f7ff fff3 	bl	b4be0 <_ZN5Print5printEc>
  return n;
}
   b4bfa:	4420      	add	r0, r4
   b4bfc:	bd38      	pop	{r3, r4, r5, pc}

000b4bfe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b4bfe:	b538      	push	{r3, r4, r5, lr}
   b4c00:	4605      	mov	r5, r0
  return write(str);
   b4c02:	f7ff ffdb 	bl	b4bbc <_ZN5Print5writeEPKc>
   b4c06:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b4c08:	4628      	mov	r0, r5
   b4c0a:	f7ff ffec 	bl	b4be6 <_ZN5Print7printlnEv>
  return n;
}
   b4c0e:	4420      	add	r0, r4
   b4c10:	bd38      	pop	{r3, r4, r5, pc}

000b4c12 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4c12:	b530      	push	{r4, r5, lr}
   b4c14:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4c16:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4c18:	2a01      	cmp	r2, #1
  *str = '\0';
   b4c1a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4c1e:	bf98      	it	ls
   b4c20:	220a      	movls	r2, #10
   b4c22:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4c24:	460d      	mov	r5, r1
   b4c26:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4c2a:	fb01 5312 	mls	r3, r1, r2, r5
   b4c2e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4c32:	2b09      	cmp	r3, #9
   b4c34:	bf94      	ite	ls
   b4c36:	3330      	addls	r3, #48	; 0x30
   b4c38:	3337      	addhi	r3, #55	; 0x37
   b4c3a:	b2db      	uxtb	r3, r3
  } while(n);
   b4c3c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4c3e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4c42:	d9ef      	bls.n	b4c24 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4c44:	4621      	mov	r1, r4
   b4c46:	f7ff ffb9 	bl	b4bbc <_ZN5Print5writeEPKc>
}
   b4c4a:	b00b      	add	sp, #44	; 0x2c
   b4c4c:	bd30      	pop	{r4, r5, pc}

000b4c4e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4c52:	b086      	sub	sp, #24
   b4c54:	af00      	add	r7, sp, #0
   b4c56:	4605      	mov	r5, r0
   b4c58:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4c5a:	1d38      	adds	r0, r7, #4
   b4c5c:	2114      	movs	r1, #20
{
   b4c5e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4c60:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4c62:	f7ff fd27 	bl	b46b4 <vsnprintf>

    if (n<bufsize)
   b4c66:	2813      	cmp	r0, #19
   b4c68:	d80e      	bhi.n	b4c88 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4c6a:	1d39      	adds	r1, r7, #4
   b4c6c:	4628      	mov	r0, r5
   b4c6e:	f7ff ffa5 	bl	b4bbc <_ZN5Print5writeEPKc>
   b4c72:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4c74:	b11e      	cbz	r6, b4c7e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4c76:	4628      	mov	r0, r5
   b4c78:	f7ff ffb5 	bl	b4be6 <_ZN5Print7printlnEv>
   b4c7c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4c7e:	4620      	mov	r0, r4
   b4c80:	3718      	adds	r7, #24
   b4c82:	46bd      	mov	sp, r7
   b4c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4c88:	f100 0308 	add.w	r3, r0, #8
   b4c8c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4c90:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4c92:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4c96:	4622      	mov	r2, r4
   b4c98:	1c41      	adds	r1, r0, #1
   b4c9a:	683b      	ldr	r3, [r7, #0]
   b4c9c:	4668      	mov	r0, sp
   b4c9e:	f7ff fd09 	bl	b46b4 <vsnprintf>
  return write(str);
   b4ca2:	4669      	mov	r1, sp
   b4ca4:	4628      	mov	r0, r5
   b4ca6:	f7ff ff89 	bl	b4bbc <_ZN5Print5writeEPKc>
   b4caa:	4604      	mov	r4, r0
   b4cac:	46c5      	mov	sp, r8
   b4cae:	e7e1      	b.n	b4c74 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4cb0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4cb0:	4b01      	ldr	r3, [pc, #4]	; (b4cb8 <_GLOBAL__sub_I_RGB+0x8>)
   b4cb2:	2200      	movs	r2, #0
   b4cb4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4cb6:	4770      	bx	lr
   b4cb8:	2003e6e4 	.word	0x2003e6e4

000b4cbc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4cbc:	4b05      	ldr	r3, [pc, #20]	; (b4cd4 <_GLOBAL__sub_I_System+0x18>)
   b4cbe:	2202      	movs	r2, #2
   b4cc0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4cc2:	4b05      	ldr	r3, [pc, #20]	; (b4cd8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4cc4:	4a05      	ldr	r2, [pc, #20]	; (b4cdc <_GLOBAL__sub_I_System+0x20>)
   b4cc6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4cc8:	2000      	movs	r0, #0
   b4cca:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4cce:	f7ff bc55 	b.w	b457c <set_system_mode>
   b4cd2:	bf00      	nop
   b4cd4:	2003e700 	.word	0x2003e700
   b4cd8:	2003e6f4 	.word	0x2003e6f4
   b4cdc:	ffff0000 	.word	0xffff0000

000b4ce0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4ce0:	4b02      	ldr	r3, [pc, #8]	; (b4cec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4ce2:	681a      	ldr	r2, [r3, #0]
   b4ce4:	4b02      	ldr	r3, [pc, #8]	; (b4cf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4ce6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4ce8:	4770      	bx	lr
   b4cea:	bf00      	nop
   b4cec:	2003e5ec 	.word	0x2003e5ec
   b4cf0:	2003e704 	.word	0x2003e704

000b4cf4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4cf4:	4770      	bx	lr

000b4cf6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4cf6:	7441      	strb	r1, [r0, #17]
}
   b4cf8:	4770      	bx	lr

000b4cfa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4cfa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4cfc:	7c00      	ldrb	r0, [r0, #16]
   b4cfe:	f7ff fbf5 	bl	b44ec <hal_usart_available_data_for_write>
}
   b4d02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4d06:	bd08      	pop	{r3, pc}

000b4d08 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4d08:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4d0a:	7c00      	ldrb	r0, [r0, #16]
   b4d0c:	f7ff fbce 	bl	b44ac <hal_usart_available>
}
   b4d10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4d14:	bd08      	pop	{r3, pc}

000b4d16 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4d16:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4d18:	7c00      	ldrb	r0, [r0, #16]
   b4d1a:	f7ff fbd7 	bl	b44cc <hal_usart_peek>
}
   b4d1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4d22:	bd08      	pop	{r3, pc}

000b4d24 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4d24:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4d26:	7c00      	ldrb	r0, [r0, #16]
   b4d28:	f7ff fbc8 	bl	b44bc <hal_usart_read>
}
   b4d2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4d30:	bd08      	pop	{r3, pc}

000b4d32 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4d32:	7c00      	ldrb	r0, [r0, #16]
   b4d34:	f7ff bbd2 	b.w	b44dc <hal_usart_flush>

000b4d38 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4d3a:	7c45      	ldrb	r5, [r0, #17]
{
   b4d3c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4d3e:	b12d      	cbz	r5, b4d4c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4d40:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4d42:	b003      	add	sp, #12
   b4d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4d48:	f7ff bba8 	b.w	b449c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4d4c:	7c00      	ldrb	r0, [r0, #16]
   b4d4e:	9101      	str	r1, [sp, #4]
   b4d50:	f7ff fbcc 	bl	b44ec <hal_usart_available_data_for_write>
   b4d54:	2800      	cmp	r0, #0
   b4d56:	9901      	ldr	r1, [sp, #4]
   b4d58:	dcf2      	bgt.n	b4d40 <_ZN11USARTSerial5writeEh+0x8>
}
   b4d5a:	4628      	mov	r0, r5
   b4d5c:	b003      	add	sp, #12
   b4d5e:	bd30      	pop	{r4, r5, pc}

000b4d60 <_ZN11USARTSerialD0Ev>:
   b4d60:	b510      	push	{r4, lr}
   b4d62:	2114      	movs	r1, #20
   b4d64:	4604      	mov	r4, r0
   b4d66:	f7ff f996 	bl	b4096 <_ZdlPvj>
   b4d6a:	4620      	mov	r0, r4
   b4d6c:	bd10      	pop	{r4, pc}
	...

000b4d70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4d70:	b510      	push	{r4, lr}
   b4d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4d76:	4604      	mov	r4, r0
   b4d78:	4608      	mov	r0, r1
   b4d7a:	4611      	mov	r1, r2
   b4d7c:	2200      	movs	r2, #0
   b4d7e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4d82:	4b04      	ldr	r3, [pc, #16]	; (b4d94 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4d84:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4d86:	2301      	movs	r3, #1
  _serial = serial;
   b4d88:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4d8a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4d8c:	f7ff fbb6 	bl	b44fc <hal_usart_init_ex>
}
   b4d90:	4620      	mov	r0, r4
   b4d92:	bd10      	pop	{r4, pc}
   b4d94:	000b53a8 	.word	0x000b53a8

000b4d98 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4d98:	7441      	strb	r1, [r0, #17]
}
   b4d9a:	4770      	bx	lr

000b4d9c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4d9c:	4770      	bx	lr

000b4d9e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4d9e:	4770      	bx	lr

000b4da0 <_ZN9USBSerial4readEv>:
{
   b4da0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4da2:	2100      	movs	r1, #0
   b4da4:	7c00      	ldrb	r0, [r0, #16]
   b4da6:	f7ff fbd1 	bl	b454c <HAL_USB_USART_Receive_Data>
}
   b4daa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4dae:	bd08      	pop	{r3, pc}

000b4db0 <_ZN9USBSerial4peekEv>:
{
   b4db0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4db2:	2101      	movs	r1, #1
   b4db4:	7c00      	ldrb	r0, [r0, #16]
   b4db6:	f7ff fbc9 	bl	b454c <HAL_USB_USART_Receive_Data>
}
   b4dba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4dbe:	bd08      	pop	{r3, pc}

000b4dc0 <_ZN9USBSerial17availableForWriteEv>:
{
   b4dc0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4dc2:	7c00      	ldrb	r0, [r0, #16]
   b4dc4:	f7ff fbba 	bl	b453c <HAL_USB_USART_Available_Data_For_Write>
}
   b4dc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4dcc:	bd08      	pop	{r3, pc}

000b4dce <_ZN9USBSerial9availableEv>:
{
   b4dce:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4dd0:	7c00      	ldrb	r0, [r0, #16]
   b4dd2:	f7ff fbab 	bl	b452c <HAL_USB_USART_Available_Data>
}
   b4dd6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4dda:	bd08      	pop	{r3, pc}

000b4ddc <_ZN9USBSerial5writeEh>:
{
   b4ddc:	b513      	push	{r0, r1, r4, lr}
   b4dde:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4de0:	7c00      	ldrb	r0, [r0, #16]
{
   b4de2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4de4:	f7ff fbaa 	bl	b453c <HAL_USB_USART_Available_Data_For_Write>
   b4de8:	2800      	cmp	r0, #0
   b4dea:	9901      	ldr	r1, [sp, #4]
   b4dec:	dc01      	bgt.n	b4df2 <_ZN9USBSerial5writeEh+0x16>
   b4dee:	7c60      	ldrb	r0, [r4, #17]
   b4df0:	b120      	cbz	r0, b4dfc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4df2:	7c20      	ldrb	r0, [r4, #16]
   b4df4:	f7ff fbb2 	bl	b455c <HAL_USB_USART_Send_Data>
   b4df8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4dfc:	b002      	add	sp, #8
   b4dfe:	bd10      	pop	{r4, pc}

000b4e00 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4e00:	7c00      	ldrb	r0, [r0, #16]
   b4e02:	f7ff bbb3 	b.w	b456c <HAL_USB_USART_Flush_Data>

000b4e06 <_ZN9USBSerialD0Ev>:
   b4e06:	b510      	push	{r4, lr}
   b4e08:	2114      	movs	r1, #20
   b4e0a:	4604      	mov	r4, r0
   b4e0c:	f7ff f943 	bl	b4096 <_ZdlPvj>
   b4e10:	4620      	mov	r0, r4
   b4e12:	bd10      	pop	{r4, pc}

000b4e14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4e14:	b510      	push	{r4, lr}
   b4e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4e1a:	4604      	mov	r4, r0
   b4e1c:	4608      	mov	r0, r1
   b4e1e:	2100      	movs	r1, #0
   b4e20:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4e24:	4b04      	ldr	r3, [pc, #16]	; (b4e38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4e26:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4e28:	2301      	movs	r3, #1
  _serial = serial;
   b4e2a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4e2c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4e2e:	4611      	mov	r1, r2
   b4e30:	f7ff fb6c 	bl	b450c <HAL_USB_USART_Init>
}
   b4e34:	4620      	mov	r0, r4
   b4e36:	bd10      	pop	{r4, pc}
   b4e38:	000b53d8 	.word	0x000b53d8

000b4e3c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4e3c:	7c00      	ldrb	r0, [r0, #16]
   b4e3e:	2200      	movs	r2, #0
   b4e40:	f7ff bb6c 	b.w	b451c <HAL_USB_USART_Begin>

000b4e44 <_Z19acquireSerialBufferv>:
{
   b4e44:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4e46:	2214      	movs	r2, #20
{
   b4e48:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4e4a:	2100      	movs	r1, #0
   b4e4c:	f000 f95a 	bl	b5104 <memset>
}
   b4e50:	4620      	mov	r0, r4
   b4e52:	bd10      	pop	{r4, pc}

000b4e54 <_Z16_fetch_usbserialv>:
{
   b4e54:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4e56:	4c0f      	ldr	r4, [pc, #60]	; (b4e94 <_Z16_fetch_usbserialv+0x40>)
{
   b4e58:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4e5a:	a803      	add	r0, sp, #12
   b4e5c:	f7ff fff2 	bl	b4e44 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4e60:	7821      	ldrb	r1, [r4, #0]
   b4e62:	f3bf 8f5b 	dmb	ish
   b4e66:	f011 0101 	ands.w	r1, r1, #1
   b4e6a:	d10f      	bne.n	b4e8c <_Z16_fetch_usbserialv+0x38>
   b4e6c:	4620      	mov	r0, r4
   b4e6e:	9101      	str	r1, [sp, #4]
   b4e70:	f7ff f913 	bl	b409a <__cxa_guard_acquire>
   b4e74:	9901      	ldr	r1, [sp, #4]
   b4e76:	b148      	cbz	r0, b4e8c <_Z16_fetch_usbserialv+0x38>
   b4e78:	aa03      	add	r2, sp, #12
   b4e7a:	4807      	ldr	r0, [pc, #28]	; (b4e98 <_Z16_fetch_usbserialv+0x44>)
   b4e7c:	f7ff ffca 	bl	b4e14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4e80:	4620      	mov	r0, r4
   b4e82:	f7ff f90f 	bl	b40a4 <__cxa_guard_release>
   b4e86:	4805      	ldr	r0, [pc, #20]	; (b4e9c <_Z16_fetch_usbserialv+0x48>)
   b4e88:	f000 f928 	bl	b50dc <atexit>
	return _usbserial;
}
   b4e8c:	4802      	ldr	r0, [pc, #8]	; (b4e98 <_Z16_fetch_usbserialv+0x44>)
   b4e8e:	b008      	add	sp, #32
   b4e90:	bd10      	pop	{r4, pc}
   b4e92:	bf00      	nop
   b4e94:	2003e708 	.word	0x2003e708
   b4e98:	2003e70c 	.word	0x2003e70c
   b4e9c:	000b4d9d 	.word	0x000b4d9d

000b4ea0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4ea0:	4b01      	ldr	r3, [pc, #4]	; (b4ea8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4ea2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4ea4:	4770      	bx	lr
   b4ea6:	bf00      	nop
   b4ea8:	2003e5f0 	.word	0x2003e5f0

000b4eac <serialEventRun>:
{
   b4eac:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4eae:	4b0b      	ldr	r3, [pc, #44]	; (b4edc <serialEventRun+0x30>)
   b4eb0:	b143      	cbz	r3, b4ec4 <serialEventRun+0x18>
   b4eb2:	f7ff ffcf 	bl	b4e54 <_Z16_fetch_usbserialv>
   b4eb6:	6803      	ldr	r3, [r0, #0]
   b4eb8:	691b      	ldr	r3, [r3, #16]
   b4eba:	4798      	blx	r3
   b4ebc:	2800      	cmp	r0, #0
   b4ebe:	dd01      	ble.n	b4ec4 <serialEventRun+0x18>
        serialEvent();
   b4ec0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4ec4:	4b06      	ldr	r3, [pc, #24]	; (b4ee0 <serialEventRun+0x34>)
   b4ec6:	b143      	cbz	r3, b4eda <serialEventRun+0x2e>
   b4ec8:	f000 f8e2 	bl	b5090 <_Z22__fetch_global_Serial1v>
   b4ecc:	6803      	ldr	r3, [r0, #0]
   b4ece:	691b      	ldr	r3, [r3, #16]
   b4ed0:	4798      	blx	r3
   b4ed2:	2800      	cmp	r0, #0
   b4ed4:	dd01      	ble.n	b4eda <serialEventRun+0x2e>
        serialEvent1();
   b4ed6:	f3af 8000 	nop.w
}
   b4eda:	bd08      	pop	{r3, pc}
	...

000b4ee4 <_post_loop>:
{
   b4ee4:	b508      	push	{r3, lr}
	serialEventRun();
   b4ee6:	f7ff ffe1 	bl	b4eac <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4eea:	f7ff fa5f 	bl	b43ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4eee:	4b01      	ldr	r3, [pc, #4]	; (b4ef4 <_post_loop+0x10>)
   b4ef0:	6018      	str	r0, [r3, #0]
}
   b4ef2:	bd08      	pop	{r3, pc}
   b4ef4:	2003e728 	.word	0x2003e728

000b4ef8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4ef8:	4805      	ldr	r0, [pc, #20]	; (b4f10 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4efa:	4a06      	ldr	r2, [pc, #24]	; (b4f14 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4efc:	4906      	ldr	r1, [pc, #24]	; (b4f18 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4efe:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4f00:	1a12      	subs	r2, r2, r0
   b4f02:	f000 f8f1 	bl	b50e8 <memcpy>
    __backup_sram_signature = signature;
   b4f06:	4b05      	ldr	r3, [pc, #20]	; (b4f1c <_Z33system_initialize_user_backup_ramv+0x24>)
   b4f08:	4a05      	ldr	r2, [pc, #20]	; (b4f20 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4f0a:	601a      	str	r2, [r3, #0]
}
   b4f0c:	bd08      	pop	{r3, pc}
   b4f0e:	bf00      	nop
   b4f10:	2003f400 	.word	0x2003f400
   b4f14:	2003f404 	.word	0x2003f404
   b4f18:	000b54c4 	.word	0x000b54c4
   b4f1c:	2003f400 	.word	0x2003f400
   b4f20:	9a271c1e 	.word	0x9a271c1e

000b4f24 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4f24:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4f26:	2300      	movs	r3, #0
   b4f28:	9300      	str	r3, [sp, #0]
   b4f2a:	461a      	mov	r2, r3
   b4f2c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4f30:	f7ff fb3e 	bl	b45b0 <system_ctrl_set_result>
}
   b4f34:	b003      	add	sp, #12
   b4f36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4f3c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4f3c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4f3e:	8843      	ldrh	r3, [r0, #2]
   b4f40:	2b0a      	cmp	r3, #10
   b4f42:	d008      	beq.n	b4f56 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4f44:	2b50      	cmp	r3, #80	; 0x50
   b4f46:	d10b      	bne.n	b4f60 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4f48:	4b09      	ldr	r3, [pc, #36]	; (b4f70 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4f4a:	681b      	ldr	r3, [r3, #0]
   b4f4c:	b14b      	cbz	r3, b4f62 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4f4e:	b003      	add	sp, #12
   b4f50:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4f54:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4f56:	f7ff ffe5 	bl	b4f24 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4f5a:	b003      	add	sp, #12
   b4f5c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4f60:	2300      	movs	r3, #0
   b4f62:	9300      	str	r3, [sp, #0]
   b4f64:	461a      	mov	r2, r3
   b4f66:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4f6a:	f7ff fb21 	bl	b45b0 <system_ctrl_set_result>
}
   b4f6e:	e7f4      	b.n	b4f5a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4f70:	2003e724 	.word	0x2003e724

000b4f74 <module_user_init_hook>:
{
   b4f74:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4f76:	4812      	ldr	r0, [pc, #72]	; (b4fc0 <module_user_init_hook+0x4c>)
   b4f78:	2100      	movs	r1, #0
   b4f7a:	f7ff fbab 	bl	b46d4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4f7e:	4b11      	ldr	r3, [pc, #68]	; (b4fc4 <module_user_init_hook+0x50>)
   b4f80:	681a      	ldr	r2, [r3, #0]
   b4f82:	4b11      	ldr	r3, [pc, #68]	; (b4fc8 <module_user_init_hook+0x54>)
   b4f84:	429a      	cmp	r2, r3
   b4f86:	4b11      	ldr	r3, [pc, #68]	; (b4fcc <module_user_init_hook+0x58>)
   b4f88:	bf0c      	ite	eq
   b4f8a:	2201      	moveq	r2, #1
   b4f8c:	2200      	movne	r2, #0
   b4f8e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4f90:	d001      	beq.n	b4f96 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4f92:	f7ff ffb1 	bl	b4ef8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4f96:	f7ff fa01 	bl	b439c <HAL_RNG_GetRandomNumber>
   b4f9a:	4604      	mov	r4, r0
    srand(seed);
   b4f9c:	f000 f8ba 	bl	b5114 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4fa0:	4b0b      	ldr	r3, [pc, #44]	; (b4fd0 <module_user_init_hook+0x5c>)
   b4fa2:	b113      	cbz	r3, b4faa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4fa4:	4620      	mov	r0, r4
   b4fa6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4faa:	2100      	movs	r1, #0
   b4fac:	4808      	ldr	r0, [pc, #32]	; (b4fd0 <module_user_init_hook+0x5c>)
   b4fae:	f7ff fb09 	bl	b45c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4fb6:	4807      	ldr	r0, [pc, #28]	; (b4fd4 <module_user_init_hook+0x60>)
   b4fb8:	2100      	movs	r1, #0
   b4fba:	f7ff baef 	b.w	b459c <system_ctrl_set_app_request_handler>
   b4fbe:	bf00      	nop
   b4fc0:	000b4ea1 	.word	0x000b4ea1
   b4fc4:	2003f400 	.word	0x2003f400
   b4fc8:	9a271c1e 	.word	0x9a271c1e
   b4fcc:	2003e720 	.word	0x2003e720
   b4fd0:	00000000 	.word	0x00000000
   b4fd4:	000b4f3d 	.word	0x000b4f3d

000b4fd8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4fd8:	4770      	bx	lr
	...

000b4fdc <_Z17acquireWireBufferv>:
{
   b4fdc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b4fde:	4b0a      	ldr	r3, [pc, #40]	; (b5008 <_Z17acquireWireBufferv+0x2c>)
   b4fe0:	6003      	str	r3, [r0, #0]
   b4fe2:	2301      	movs	r3, #1
{
   b4fe4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b4fe6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b4fe8:	4908      	ldr	r1, [pc, #32]	; (b500c <_Z17acquireWireBufferv+0x30>)
   b4fea:	2020      	movs	r0, #32
   b4fec:	f000 f874 	bl	b50d8 <_ZnajRKSt9nothrow_t>
	};
   b4ff0:	2520      	movs	r5, #32
   b4ff2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b4ff4:	4905      	ldr	r1, [pc, #20]	; (b500c <_Z17acquireWireBufferv+0x30>)
	};
   b4ff6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b4ff8:	4628      	mov	r0, r5
   b4ffa:	f000 f86d 	bl	b50d8 <_ZnajRKSt9nothrow_t>
	};
   b4ffe:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5002:	4620      	mov	r0, r4
   b5004:	bd38      	pop	{r3, r4, r5, pc}
   b5006:	bf00      	nop
   b5008:	00010018 	.word	0x00010018
   b500c:	000b5400 	.word	0x000b5400

000b5010 <_Z19__fetch_global_Wirev>:
{
   b5010:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5012:	4d0e      	ldr	r5, [pc, #56]	; (b504c <_Z19__fetch_global_Wirev+0x3c>)
   b5014:	7829      	ldrb	r1, [r5, #0]
   b5016:	f3bf 8f5b 	dmb	ish
   b501a:	f011 0401 	ands.w	r4, r1, #1
{
   b501e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5020:	d111      	bne.n	b5046 <_Z19__fetch_global_Wirev+0x36>
   b5022:	4628      	mov	r0, r5
   b5024:	f7ff f839 	bl	b409a <__cxa_guard_acquire>
   b5028:	b168      	cbz	r0, b5046 <_Z19__fetch_global_Wirev+0x36>
   b502a:	4668      	mov	r0, sp
   b502c:	f7ff ffd6 	bl	b4fdc <_Z17acquireWireBufferv>
   b5030:	466a      	mov	r2, sp
   b5032:	4621      	mov	r1, r4
   b5034:	4806      	ldr	r0, [pc, #24]	; (b5050 <_Z19__fetch_global_Wirev+0x40>)
   b5036:	f7ff fc17 	bl	b4868 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b503a:	4628      	mov	r0, r5
   b503c:	f7ff f832 	bl	b40a4 <__cxa_guard_release>
   b5040:	4804      	ldr	r0, [pc, #16]	; (b5054 <_Z19__fetch_global_Wirev+0x44>)
   b5042:	f000 f84b 	bl	b50dc <atexit>
	return wire;
}
   b5046:	4802      	ldr	r0, [pc, #8]	; (b5050 <_Z19__fetch_global_Wirev+0x40>)
   b5048:	b007      	add	sp, #28
   b504a:	bd30      	pop	{r4, r5, pc}
   b504c:	2003e72c 	.word	0x2003e72c
   b5050:	2003e730 	.word	0x2003e730
   b5054:	000b4fd9 	.word	0x000b4fd9

000b5058 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5058:	4770      	bx	lr
	...

000b505c <_Z20acquireSerial1Bufferv>:
{
   b505c:	b538      	push	{r3, r4, r5, lr}
   b505e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5060:	2514      	movs	r5, #20
   b5062:	462a      	mov	r2, r5
   b5064:	2100      	movs	r1, #0
   b5066:	f000 f84d 	bl	b5104 <memset>
   b506a:	8025      	strh	r5, [r4, #0]
   b506c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b506e:	4907      	ldr	r1, [pc, #28]	; (b508c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5070:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5072:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5074:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5076:	f000 f82f 	bl	b50d8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b507a:	4904      	ldr	r1, [pc, #16]	; (b508c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b507c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b507e:	4628      	mov	r0, r5
   b5080:	f000 f82a 	bl	b50d8 <_ZnajRKSt9nothrow_t>
    };
   b5084:	60e0      	str	r0, [r4, #12]
}
   b5086:	4620      	mov	r0, r4
   b5088:	bd38      	pop	{r3, r4, r5, pc}
   b508a:	bf00      	nop
   b508c:	000b5400 	.word	0x000b5400

000b5090 <_Z22__fetch_global_Serial1v>:
{
   b5090:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5092:	4d0e      	ldr	r5, [pc, #56]	; (b50cc <_Z22__fetch_global_Serial1v+0x3c>)
   b5094:	7829      	ldrb	r1, [r5, #0]
   b5096:	f3bf 8f5b 	dmb	ish
   b509a:	f011 0401 	ands.w	r4, r1, #1
{
   b509e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b50a0:	d111      	bne.n	b50c6 <_Z22__fetch_global_Serial1v+0x36>
   b50a2:	4628      	mov	r0, r5
   b50a4:	f7fe fff9 	bl	b409a <__cxa_guard_acquire>
   b50a8:	b168      	cbz	r0, b50c6 <_Z22__fetch_global_Serial1v+0x36>
   b50aa:	a801      	add	r0, sp, #4
   b50ac:	f7ff ffd6 	bl	b505c <_Z20acquireSerial1Bufferv>
   b50b0:	aa01      	add	r2, sp, #4
   b50b2:	4621      	mov	r1, r4
   b50b4:	4806      	ldr	r0, [pc, #24]	; (b50d0 <_Z22__fetch_global_Serial1v+0x40>)
   b50b6:	f7ff fe5b 	bl	b4d70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b50ba:	4628      	mov	r0, r5
   b50bc:	f7fe fff2 	bl	b40a4 <__cxa_guard_release>
   b50c0:	4804      	ldr	r0, [pc, #16]	; (b50d4 <_Z22__fetch_global_Serial1v+0x44>)
   b50c2:	f000 f80b 	bl	b50dc <atexit>
    return serial1;
}
   b50c6:	4802      	ldr	r0, [pc, #8]	; (b50d0 <_Z22__fetch_global_Serial1v+0x40>)
   b50c8:	b007      	add	sp, #28
   b50ca:	bd30      	pop	{r4, r5, pc}
   b50cc:	2003e744 	.word	0x2003e744
   b50d0:	2003e748 	.word	0x2003e748
   b50d4:	000b5059 	.word	0x000b5059

000b50d8 <_ZnajRKSt9nothrow_t>:
   b50d8:	f7fe bfdb 	b.w	b4092 <_Znaj>

000b50dc <atexit>:
   b50dc:	2300      	movs	r3, #0
   b50de:	4601      	mov	r1, r0
   b50e0:	461a      	mov	r2, r3
   b50e2:	4618      	mov	r0, r3
   b50e4:	f000 b84c 	b.w	b5180 <__register_exitproc>

000b50e8 <memcpy>:
   b50e8:	440a      	add	r2, r1
   b50ea:	4291      	cmp	r1, r2
   b50ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b50f0:	d100      	bne.n	b50f4 <memcpy+0xc>
   b50f2:	4770      	bx	lr
   b50f4:	b510      	push	{r4, lr}
   b50f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b50fa:	f803 4f01 	strb.w	r4, [r3, #1]!
   b50fe:	4291      	cmp	r1, r2
   b5100:	d1f9      	bne.n	b50f6 <memcpy+0xe>
   b5102:	bd10      	pop	{r4, pc}

000b5104 <memset>:
   b5104:	4402      	add	r2, r0
   b5106:	4603      	mov	r3, r0
   b5108:	4293      	cmp	r3, r2
   b510a:	d100      	bne.n	b510e <memset+0xa>
   b510c:	4770      	bx	lr
   b510e:	f803 1b01 	strb.w	r1, [r3], #1
   b5112:	e7f9      	b.n	b5108 <memset+0x4>

000b5114 <srand>:
   b5114:	b538      	push	{r3, r4, r5, lr}
   b5116:	4b10      	ldr	r3, [pc, #64]	; (b5158 <srand+0x44>)
   b5118:	681d      	ldr	r5, [r3, #0]
   b511a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b511c:	4604      	mov	r4, r0
   b511e:	b9b3      	cbnz	r3, b514e <srand+0x3a>
   b5120:	2018      	movs	r0, #24
   b5122:	f7ff fab7 	bl	b4694 <malloc>
   b5126:	4602      	mov	r2, r0
   b5128:	63a8      	str	r0, [r5, #56]	; 0x38
   b512a:	b920      	cbnz	r0, b5136 <srand+0x22>
   b512c:	4b0b      	ldr	r3, [pc, #44]	; (b515c <srand+0x48>)
   b512e:	480c      	ldr	r0, [pc, #48]	; (b5160 <srand+0x4c>)
   b5130:	2142      	movs	r1, #66	; 0x42
   b5132:	f7ff fac7 	bl	b46c4 <__assert_func>
   b5136:	490b      	ldr	r1, [pc, #44]	; (b5164 <srand+0x50>)
   b5138:	4b0b      	ldr	r3, [pc, #44]	; (b5168 <srand+0x54>)
   b513a:	e9c0 1300 	strd	r1, r3, [r0]
   b513e:	4b0b      	ldr	r3, [pc, #44]	; (b516c <srand+0x58>)
   b5140:	6083      	str	r3, [r0, #8]
   b5142:	230b      	movs	r3, #11
   b5144:	8183      	strh	r3, [r0, #12]
   b5146:	2100      	movs	r1, #0
   b5148:	2001      	movs	r0, #1
   b514a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b514e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5150:	2200      	movs	r2, #0
   b5152:	611c      	str	r4, [r3, #16]
   b5154:	615a      	str	r2, [r3, #20]
   b5156:	bd38      	pop	{r3, r4, r5, pc}
   b5158:	2003e5f0 	.word	0x2003e5f0
   b515c:	000b5401 	.word	0x000b5401
   b5160:	000b5418 	.word	0x000b5418
   b5164:	abcd330e 	.word	0xabcd330e
   b5168:	e66d1234 	.word	0xe66d1234
   b516c:	0005deec 	.word	0x0005deec

000b5170 <strlen>:
   b5170:	4603      	mov	r3, r0
   b5172:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5176:	2a00      	cmp	r2, #0
   b5178:	d1fb      	bne.n	b5172 <strlen+0x2>
   b517a:	1a18      	subs	r0, r3, r0
   b517c:	3801      	subs	r0, #1
   b517e:	4770      	bx	lr

000b5180 <__register_exitproc>:
   b5180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5184:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5240 <__register_exitproc+0xc0>
   b5188:	4606      	mov	r6, r0
   b518a:	f8d8 0000 	ldr.w	r0, [r8]
   b518e:	461f      	mov	r7, r3
   b5190:	460d      	mov	r5, r1
   b5192:	4691      	mov	r9, r2
   b5194:	f000 f856 	bl	b5244 <__retarget_lock_acquire_recursive>
   b5198:	4b25      	ldr	r3, [pc, #148]	; (b5230 <__register_exitproc+0xb0>)
   b519a:	681c      	ldr	r4, [r3, #0]
   b519c:	b934      	cbnz	r4, b51ac <__register_exitproc+0x2c>
   b519e:	4c25      	ldr	r4, [pc, #148]	; (b5234 <__register_exitproc+0xb4>)
   b51a0:	601c      	str	r4, [r3, #0]
   b51a2:	4b25      	ldr	r3, [pc, #148]	; (b5238 <__register_exitproc+0xb8>)
   b51a4:	b113      	cbz	r3, b51ac <__register_exitproc+0x2c>
   b51a6:	681b      	ldr	r3, [r3, #0]
   b51a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b51ac:	6863      	ldr	r3, [r4, #4]
   b51ae:	2b1f      	cmp	r3, #31
   b51b0:	dd07      	ble.n	b51c2 <__register_exitproc+0x42>
   b51b2:	f8d8 0000 	ldr.w	r0, [r8]
   b51b6:	f000 f847 	bl	b5248 <__retarget_lock_release_recursive>
   b51ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b51be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b51c2:	b34e      	cbz	r6, b5218 <__register_exitproc+0x98>
   b51c4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b51c8:	b988      	cbnz	r0, b51ee <__register_exitproc+0x6e>
   b51ca:	4b1c      	ldr	r3, [pc, #112]	; (b523c <__register_exitproc+0xbc>)
   b51cc:	b923      	cbnz	r3, b51d8 <__register_exitproc+0x58>
   b51ce:	f8d8 0000 	ldr.w	r0, [r8]
   b51d2:	f000 f838 	bl	b5246 <__retarget_lock_release>
   b51d6:	e7f0      	b.n	b51ba <__register_exitproc+0x3a>
   b51d8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b51dc:	f7ff fa5a 	bl	b4694 <malloc>
   b51e0:	2800      	cmp	r0, #0
   b51e2:	d0f4      	beq.n	b51ce <__register_exitproc+0x4e>
   b51e4:	2300      	movs	r3, #0
   b51e6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b51ea:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b51ee:	6863      	ldr	r3, [r4, #4]
   b51f0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b51f4:	2201      	movs	r2, #1
   b51f6:	409a      	lsls	r2, r3
   b51f8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b51fc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5200:	4313      	orrs	r3, r2
   b5202:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5206:	2e02      	cmp	r6, #2
   b5208:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b520c:	bf02      	ittt	eq
   b520e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5212:	4313      	orreq	r3, r2
   b5214:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5218:	6863      	ldr	r3, [r4, #4]
   b521a:	f8d8 0000 	ldr.w	r0, [r8]
   b521e:	1c5a      	adds	r2, r3, #1
   b5220:	3302      	adds	r3, #2
   b5222:	6062      	str	r2, [r4, #4]
   b5224:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5228:	f000 f80e 	bl	b5248 <__retarget_lock_release_recursive>
   b522c:	2000      	movs	r0, #0
   b522e:	e7c6      	b.n	b51be <__register_exitproc+0x3e>
   b5230:	2003e7e8 	.word	0x2003e7e8
   b5234:	2003e75c 	.word	0x2003e75c
   b5238:	00000000 	.word	0x00000000
   b523c:	000b4695 	.word	0x000b4695
   b5240:	2003e654 	.word	0x2003e654

000b5244 <__retarget_lock_acquire_recursive>:
   b5244:	4770      	bx	lr

000b5246 <__retarget_lock_release>:
   b5246:	4770      	bx	lr

000b5248 <__retarget_lock_release_recursive>:
   b5248:	4770      	bx	lr

000b524a <link_code_end>:
	...

000b524c <dynalib_user>:
   b524c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b525c:	0000 0000 6944 7473 6e61 6563 4d20 6165     ....Distance Mea
   b526c:	7573 6572 2064 203d 6925 000a 203e 616e     sured = %i..> na
   b527c:	6b63 3e00 7220 6165 2064 6166 6c69 6465     ck.> read failed
   b528c:	0000 0000                                   ....

000b5290 <_ZTVN5spark13CellularClassE>:
	...
   b5298:	475b 000b 4751 000b 4747 000b 46fd 000b     [G..QG..GG...F..
   b52a8:	473b 000b 472f 000b 4a6d 000b 4a75 000b     ;G../G..mJ..uJ..
   b52b8:	4723 000b 471b 000b 4711 000b 4707 000b     #G...G...G...G..
   b52c8:	4aa5 000b                                   .J..

000b52cc <_ZTVN5spark13EthernetClassE>:
	...
   b52d4:	47f3 000b 47e9 000b 47df 000b 47d5 000b     .G...G...G...G..
   b52e4:	47c9 000b 47bd 000b 4a6d 000b 4a75 000b     .G...G..mJ..uJ..
   b52f4:	47b1 000b 47a9 000b 479f 000b 4795 000b     .G...G...G...G..
   b5304:	4aa5 000b                                   .J..

000b5308 <_ZTV7TwoWire>:
	...
   b5310:	4811 000b 485b 000b 4833 000b 4813 000b     .H..[H..3H...H..
   b5320:	483b 000b 4843 000b 484b 000b 4853 000b     ;H..CH..KH..SH..

000b5330 <_ZTV9IPAddress>:
	...
   b5338:	493d 000b 492d 000b 492f 000b 7061 0070     =I..-I../I..app.

000b5348 <_ZTVN5spark12NetworkClassE>:
	...
   b5350:	4a2d 000b 4a37 000b 4a41 000b 4a4b 000b     -J..7J..AJ..KJ..
   b5360:	4a55 000b 4a61 000b 4a6d 000b 4a75 000b     UJ..aJ..mJ..uJ..
   b5370:	4a7d 000b 4a89 000b 4a91 000b 4a9b 000b     }J...J...J...J..
   b5380:	4aa5 000b 5925 252d 2d6d 6425 2554 3a48     .J..%Y-%m-%dT%H:
   b5390:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b53a0 <_ZTV11USARTSerial>:
	...
   b53a8:	4cf5 000b 4d61 000b 4d39 000b 4b91 000b     .L..aM..9M...K..
   b53b8:	4d09 000b 4d25 000b 4d17 000b 4d33 000b     .M..%M...M..3M..
   b53c8:	4cf7 000b 4cfb 000b                         .L...L..

000b53d0 <_ZTV9USBSerial>:
	...
   b53d8:	4d9f 000b 4e07 000b 4ddd 000b 4b91 000b     .M...N...M...K..
   b53e8:	4dcf 000b 4da1 000b 4db1 000b 4e01 000b     .M...M...M...N..
   b53f8:	4dc1 000b 4d99 000b                         .M...M..

000b5400 <_ZSt7nothrow>:
   b5400:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5410:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b5420:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b5430:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b5440:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b5450:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b5460:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b5471 <link_const_variable_data_end>:
   b5471:	00          	.byte	0x00
	...

000b5474 <link_constructors_location>:
   b5474:	000b4141 	.word	0x000b4141
   b5478:	000b46ed 	.word	0x000b46ed
   b547c:	000b4765 	.word	0x000b4765
   b5480:	000b47fd 	.word	0x000b47fd
   b5484:	000b4a1d 	.word	0x000b4a1d
   b5488:	000b4b7d 	.word	0x000b4b7d
   b548c:	000b4cb1 	.word	0x000b4cb1
   b5490:	000b4cbd 	.word	0x000b4cbd
   b5494:	000b4ce1 	.word	0x000b4ce1

000b5498 <link_constructors_end>:
	...
