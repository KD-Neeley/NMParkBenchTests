
/Users/kdneeley/Documents/IoT/NMParkBenchTests/lightShow/target/4.1.0/boron/lightShow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001a24  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5a40  000b5a40  00005a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b5a64  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e5d4  000b5a68  0001e5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001b0  2003e640  2003e640  0002e640  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b5ad4  000b5ad4  00025ad4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b5afc  000b5afc  00025afc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f9b26  00000000  00000000  00025b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000ff98  00000000  00000000  0011f626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003145f  00000000  00000000  0012f5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002638  00000000  00000000  00160a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000090b0  00000000  00000000  00163055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035b13  00000000  00000000  0016c105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003556c  00000000  00000000  001a1c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001317dd  00000000  00000000  001d7184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000069bc  00000000  00000000  00308964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 fb15 	bl	b565c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fb1d 	bl	b5678 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5d4 	.word	0x2003e5d4
   b4048:	000b5a68 	.word	0x000b5a68
   b404c:	2003e640 	.word	0x2003e640
   b4050:	2003e640 	.word	0x2003e640
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 f9c5 	bl	b53ec <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b5a14 	.word	0x000b5a14
   b407c:	000b5a38 	.word	0x000b5a38

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b822 	b.w	b40c8 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8ab 	bl	b41e0 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 b965 	b.w	b535c <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 bcb7 	b.w	b4a04 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f000 bcbd 	b.w	b4a14 <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr

000b40aa <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40aa:	b40e      	push	{r1, r2, r3}
   b40ac:	b503      	push	{r0, r1, lr}
   b40ae:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40b6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40b8:	f000 ff2f 	bl	b4f1a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40bc:	b002      	add	sp, #8
   b40be:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c2:	b003      	add	sp, #12
   b40c4:	4770      	bx	lr
	...

000b40c8 <setup>:
int pixelFill (int startPixel, int endPixel, int hexColor); 
void cycle(unsigned int offset, unsigned int s, unsigned int v);
uint32_t hsvToColour(unsigned int h, unsigned int s, unsigned int v);
int maxRead(int band);

void setup() {
   b40c8:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(9600);
   b40ca:	f001 f8ff 	bl	b52cc <_Z16_fetch_usbserialv>
   b40ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40d2:	f001 f8eb 	bl	b52ac <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b40d6:	2000      	movs	r0, #0
   b40d8:	f000 fab0 	bl	b463c <hal_timer_millis>
        while (_while() && !_condition()) {
   b40dc:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b40e0:	4604      	mov	r4, r0
   b40e2:	2000      	movs	r0, #0
   b40e4:	f000 faaa 	bl	b463c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b40e8:	1b00      	subs	r0, r0, r4
   b40ea:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b40ee:	42a8      	cmp	r0, r5
   b40f0:	f171 0300 	sbcs.w	r3, r1, #0
   b40f4:	d207      	bcs.n	b4106 <setup+0x3e>
  waitFor(Serial.isConnected, 15000);
   b40f6:	f001 f8e9 	bl	b52cc <_Z16_fetch_usbserialv>
   b40fa:	f001 f8db 	bl	b52b4 <_ZN9USBSerial11isConnectedEv>
   b40fe:	b910      	cbnz	r0, b4106 <setup+0x3e>
            spark_process();
   b4100:	f000 fc10 	bl	b4924 <spark_process>
        while (_while() && !_condition()) {
   b4104:	e7ed      	b.n	b40e2 <setup+0x1a>
   b4106:	f001 f8e1 	bl	b52cc <_Z16_fetch_usbserialv>
   b410a:	f001 f8d3 	bl	b52b4 <_ZN9USBSerial11isConnectedEv>

  // Set up the MSGEQ7 IC
  pinMode(MSGEQ7_ANALOG_PIN, INPUT);
   b410e:	2100      	movs	r1, #0
   b4110:	2010      	movs	r0, #16
   b4112:	f001 f9db 	bl	b54cc <pinMode>
  pinMode(MSGEQ7_STROBE_PIN, OUTPUT);
   b4116:	2101      	movs	r1, #1
   b4118:	2007      	movs	r0, #7
   b411a:	f001 f9d7 	bl	b54cc <pinMode>
  pinMode(MSGEQ7_RESET_PIN, OUTPUT);
   b411e:	2101      	movs	r1, #1
   b4120:	2008      	movs	r0, #8
   b4122:	f001 f9d3 	bl	b54cc <pinMode>
  digitalWrite(MSGEQ7_RESET_PIN, LOW);
   b4126:	2100      	movs	r1, #0
   b4128:	2008      	movs	r0, #8
   b412a:	f001 f9e0 	bl	b54ee <digitalWrite>
  digitalWrite(MSGEQ7_STROBE_PIN, HIGH);
   b412e:	2101      	movs	r1, #1
   b4130:	2007      	movs	r0, #7
   b4132:	f001 f9dc 	bl	b54ee <digitalWrite>

  // Initialize the minimum and maximum volume levels
  minimumVolume = 1023;
   b4136:	4b07      	ldr	r3, [pc, #28]	; (b4154 <setup+0x8c>)
  maximumVolume = 0;

  //setup the lights
  lights.begin();
   b4138:	4807      	ldr	r0, [pc, #28]	; (b4158 <setup+0x90>)
  minimumVolume = 1023;
   b413a:	f240 32ff 	movw	r2, #1023	; 0x3ff
   b413e:	601a      	str	r2, [r3, #0]
  maximumVolume = 0;
   b4140:	4b06      	ldr	r3, [pc, #24]	; (b415c <setup+0x94>)
   b4142:	2200      	movs	r2, #0
   b4144:	601a      	str	r2, [r3, #0]
  lights.begin();
   b4146:	f000 fa4a 	bl	b45de <_ZN7LPD88065beginEv>
  lights.show();
}
   b414a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  lights.show();
   b414e:	4802      	ldr	r0, [pc, #8]	; (b4158 <setup+0x90>)
   b4150:	f000 b9b2 	b.w	b44b8 <_ZN7LPD88064showEv>
   b4154:	2003e670 	.word	0x2003e670
   b4158:	2003e660 	.word	0x2003e660
   b415c:	2003e66c 	.word	0x2003e66c

000b4160 <_Z9pixelFilliii>:
  //white
   pixelFill(0, NLEDS-1, full);
  }
}

int pixelFill (int startPixel, int endPixel, int hexColor) {
   b4160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

for(int i=startPixel; i<endPixel-1; i++) {
  lights.setPixelColor(i, hexColor);
   b4164:	4e09      	ldr	r6, [pc, #36]	; (b418c <_Z9pixelFilliii+0x2c>)
int pixelFill (int startPixel, int endPixel, int hexColor) {
   b4166:	4604      	mov	r4, r0
   b4168:	460d      	mov	r5, r1
   b416a:	4690      	mov	r8, r2
for(int i=startPixel; i<endPixel-1; i++) {
   b416c:	1e4f      	subs	r7, r1, #1
   b416e:	42a7      	cmp	r7, r4
   b4170:	dd06      	ble.n	b4180 <_Z9pixelFilliii+0x20>
  lights.setPixelColor(i, hexColor);
   b4172:	b2a1      	uxth	r1, r4
   b4174:	4642      	mov	r2, r8
   b4176:	4630      	mov	r0, r6
   b4178:	f000 f945 	bl	b4406 <_ZN7LPD880613setPixelColorEtm>
for(int i=startPixel; i<endPixel-1; i++) {
   b417c:	3401      	adds	r4, #1
   b417e:	e7f6      	b.n	b416e <_Z9pixelFilliii+0xe>
}
 lights.show();
   b4180:	4802      	ldr	r0, [pc, #8]	; (b418c <_Z9pixelFilliii+0x2c>)
   b4182:	f000 f999 	bl	b44b8 <_ZN7LPD88064showEv>
//  delay(500);
 return(endPixel);
}
   b4186:	4628      	mov	r0, r5
   b4188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b418c:	2003e660 	.word	0x2003e660

000b4190 <_Z7maxReadi>:
int maxRead(int band) {
  int maxReading = band1;
    if(maxReading<band2); {
      maxReading = band2;
    }
    if(maxReading<band3) {
   b4190:	4a0d      	ldr	r2, [pc, #52]	; (b41c8 <_Z7maxReadi+0x38>)
   b4192:	4b0e      	ldr	r3, [pc, #56]	; (b41cc <_Z7maxReadi+0x3c>)
   b4194:	6810      	ldr	r0, [r2, #0]
   b4196:	681b      	ldr	r3, [r3, #0]
      maxReading =band3;
    }
    if(maxReading<band4) {
   b4198:	4a0d      	ldr	r2, [pc, #52]	; (b41d0 <_Z7maxReadi+0x40>)
   b419a:	4283      	cmp	r3, r0
   b419c:	bfb8      	it	lt
   b419e:	4603      	movlt	r3, r0
   b41a0:	6810      	ldr	r0, [r2, #0]
      maxReading = band4;
    }
    if(maxReading<band5) {
   b41a2:	4a0c      	ldr	r2, [pc, #48]	; (b41d4 <_Z7maxReadi+0x44>)
   b41a4:	4283      	cmp	r3, r0
   b41a6:	bfb8      	it	lt
   b41a8:	4603      	movlt	r3, r0
   b41aa:	6810      	ldr	r0, [r2, #0]
      maxReading = band5;
    }
    if(maxReading<band6) {
   b41ac:	4a0a      	ldr	r2, [pc, #40]	; (b41d8 <_Z7maxReadi+0x48>)
   b41ae:	4283      	cmp	r3, r0
   b41b0:	bfb8      	it	lt
   b41b2:	4603      	movlt	r3, r0
   b41b4:	6810      	ldr	r0, [r2, #0]
      maxReading = band6;
    }
    if(maxReading<band7) {
   b41b6:	4a09      	ldr	r2, [pc, #36]	; (b41dc <_Z7maxReadi+0x4c>)
   b41b8:	4283      	cmp	r3, r0
   b41ba:	bfb8      	it	lt
   b41bc:	4603      	movlt	r3, r0
      maxReading = band7;
    }
    return maxReading;
   b41be:	6810      	ldr	r0, [r2, #0]
}
   b41c0:	4298      	cmp	r0, r3
   b41c2:	bfb8      	it	lt
   b41c4:	4618      	movlt	r0, r3
   b41c6:	4770      	bx	lr
   b41c8:	2003e648 	.word	0x2003e648
   b41cc:	2003e644 	.word	0x2003e644
   b41d0:	2003e64c 	.word	0x2003e64c
   b41d4:	2003e650 	.word	0x2003e650
   b41d8:	2003e654 	.word	0x2003e654
   b41dc:	2003e658 	.word	0x2003e658

000b41e0 <loop>:
void loop() {
   b41e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  digitalWrite(MSGEQ7_RESET_PIN, HIGH);
   b41e4:	2101      	movs	r1, #1
   b41e6:	2008      	movs	r0, #8
   b41e8:	f001 f981 	bl	b54ee <digitalWrite>
  digitalWrite(MSGEQ7_RESET_PIN, LOW);
   b41ec:	2100      	movs	r1, #0
   b41ee:	2008      	movs	r0, #8
   b41f0:	f8df a1a4 	ldr.w	sl, [pc, #420]	; b4398 <loop+0x1b8>
        band2 = volumeInBand[1];
   b41f4:	4f58      	ldr	r7, [pc, #352]	; (b4358 <loop+0x178>)
  digitalWrite(MSGEQ7_RESET_PIN, LOW);
   b41f6:	f001 f97a 	bl	b54ee <digitalWrite>
      for (int i=0; i<NUM_FREQUENCY_BANDS; i++) {
   b41fa:	f04f 0900 	mov.w	r9, #0
   b41fe:	4654      	mov	r4, sl
        digitalWrite(MSGEQ7_STROBE_PIN, LOW);
   b4200:	2100      	movs	r1, #0
   b4202:	2007      	movs	r0, #7
   b4204:	f001 f973 	bl	b54ee <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4208:	201e      	movs	r0, #30
   b420a:	f000 fa07 	bl	b461c <HAL_Delay_Microseconds>
        volumeInBand[i] = analogRead(MSGEQ7_ANALOG_PIN);
   b420e:	2010      	movs	r0, #16
   b4210:	f001 f986 	bl	b5520 <analogRead>
        digitalWrite(MSGEQ7_STROBE_PIN, HIGH);
   b4214:	2101      	movs	r1, #1
        volumeInBand[i] = analogRead(MSGEQ7_ANALOG_PIN);
   b4216:	f84a 0b04 	str.w	r0, [sl], #4
        digitalWrite(MSGEQ7_STROBE_PIN, HIGH);
   b421a:	2007      	movs	r0, #7
   b421c:	f001 f967 	bl	b54ee <digitalWrite>
        band3 = volumeInBand[2];
   b4220:	4e4e      	ldr	r6, [pc, #312]	; (b435c <loop+0x17c>)
        band2 = volumeInBand[1];
   b4222:	6863      	ldr	r3, [r4, #4]
   b4224:	603b      	str	r3, [r7, #0]
        band4 = volumeInBand[3];
   b4226:	4d4e      	ldr	r5, [pc, #312]	; (b4360 <loop+0x180>)
        band3 = volumeInBand[2];
   b4228:	68a3      	ldr	r3, [r4, #8]
   b422a:	6033      	str	r3, [r6, #0]
        band5 = volumeInBand[4];
   b422c:	f8df b15c 	ldr.w	fp, [pc, #348]	; b438c <loop+0x1ac>
        band4 = volumeInBand[3];
   b4230:	68e3      	ldr	r3, [r4, #12]
        band6 = volumeInBand[5];
   b4232:	4a4c      	ldr	r2, [pc, #304]	; (b4364 <loop+0x184>)
        band4 = volumeInBand[3];
   b4234:	602b      	str	r3, [r5, #0]
        band5 = volumeInBand[4];
   b4236:	6923      	ldr	r3, [r4, #16]
   b4238:	f8cb 3000 	str.w	r3, [fp]
        band6 = volumeInBand[5];
   b423c:	6963      	ldr	r3, [r4, #20]
   b423e:	6013      	str	r3, [r2, #0]
        band1 = volumeInBand[0];
   b4240:	f8df 8158 	ldr.w	r8, [pc, #344]	; b439c <loop+0x1bc>
        band7 = volumeInBand[6];
   b4244:	4a48      	ldr	r2, [pc, #288]	; (b4368 <loop+0x188>)
   b4246:	69a3      	ldr	r3, [r4, #24]
        band1 = volumeInBand[0];
   b4248:	6820      	ldr	r0, [r4, #0]
        band7 = volumeInBand[6];
   b424a:	6013      	str	r3, [r2, #0]
        band1 = volumeInBand[0];
   b424c:	f8c8 0000 	str.w	r0, [r8]
        displayLight = maxRead(band1);
   b4250:	f7ff ff9e 	bl	b4190 <_Z7maxReadi>
      for (int i=0; i<NUM_FREQUENCY_BANDS; i++) {
   b4254:	f109 0901 	add.w	r9, r9, #1
        displayLight = maxRead(band1);
   b4258:	4b44      	ldr	r3, [pc, #272]	; (b436c <loop+0x18c>)
      for (int i=0; i<NUM_FREQUENCY_BANDS; i++) {
   b425a:	f1b9 0f07 	cmp.w	r9, #7
        displayLight = maxRead(band1);
   b425e:	6018      	str	r0, [r3, #0]
      for (int i=0; i<NUM_FREQUENCY_BANDS; i++) {
   b4260:	d1ce      	bne.n	b4200 <loop+0x20>
  Serial.printf("Band1 = %i\n", band1);
   b4262:	f001 f833 	bl	b52cc <_Z16_fetch_usbserialv>
   b4266:	f8d8 2000 	ldr.w	r2, [r8]
   b426a:	4941      	ldr	r1, [pc, #260]	; (b4370 <loop+0x190>)
   b426c:	f7ff ff1d 	bl	b40aa <_ZN5Print6printfEPKcz>
  Serial.printf("Band2 = %i\n", band2);
   b4270:	f001 f82c 	bl	b52cc <_Z16_fetch_usbserialv>
   b4274:	683a      	ldr	r2, [r7, #0]
   b4276:	493f      	ldr	r1, [pc, #252]	; (b4374 <loop+0x194>)
   b4278:	f7ff ff17 	bl	b40aa <_ZN5Print6printfEPKcz>
  Serial.printf("Band3 = %i\n", band3);
   b427c:	f001 f826 	bl	b52cc <_Z16_fetch_usbserialv>
   b4280:	6832      	ldr	r2, [r6, #0]
   b4282:	493d      	ldr	r1, [pc, #244]	; (b4378 <loop+0x198>)
   b4284:	f7ff ff11 	bl	b40aa <_ZN5Print6printfEPKcz>
  Serial.printf("Band4 = %i\n", band4);
   b4288:	f001 f820 	bl	b52cc <_Z16_fetch_usbserialv>
   b428c:	682a      	ldr	r2, [r5, #0]
   b428e:	493b      	ldr	r1, [pc, #236]	; (b437c <loop+0x19c>)
   b4290:	f7ff ff0b 	bl	b40aa <_ZN5Print6printfEPKcz>
  Serial.printf("Band5 = %i\n", band5);
   b4294:	f001 f81a 	bl	b52cc <_Z16_fetch_usbserialv>
   b4298:	f8db 2000 	ldr.w	r2, [fp]
   b429c:	4938      	ldr	r1, [pc, #224]	; (b4380 <loop+0x1a0>)
   b429e:	f7ff ff04 	bl	b40aa <_ZN5Print6printfEPKcz>
  Serial.printf("Band6 = %i\n", band6);
   b42a2:	f001 f813 	bl	b52cc <_Z16_fetch_usbserialv>
   b42a6:	4b2f      	ldr	r3, [pc, #188]	; (b4364 <loop+0x184>)
   b42a8:	4936      	ldr	r1, [pc, #216]	; (b4384 <loop+0x1a4>)
   b42aa:	681a      	ldr	r2, [r3, #0]
   b42ac:	f7ff fefd 	bl	b40aa <_ZN5Print6printfEPKcz>
  Serial.printf("Band7 = %i\n", band7);
   b42b0:	f001 f80c 	bl	b52cc <_Z16_fetch_usbserialv>
   b42b4:	4b2c      	ldr	r3, [pc, #176]	; (b4368 <loop+0x188>)
   b42b6:	4934      	ldr	r1, [pc, #208]	; (b4388 <loop+0x1a8>)
   b42b8:	681a      	ldr	r2, [r3, #0]
   b42ba:	f7ff fef6 	bl	b40aa <_ZN5Print6printfEPKcz>
  if(displayLight == band1) {
   b42be:	4b2b      	ldr	r3, [pc, #172]	; (b436c <loop+0x18c>)
   b42c0:	681a      	ldr	r2, [r3, #0]
   b42c2:	f8d8 3000 	ldr.w	r3, [r8]
   b42c6:	429a      	cmp	r2, r3
   b42c8:	d105      	bne.n	b42d6 <loop+0xf6>
  pixelFill(0, NLEDS-1, purple);
   b42ca:	f242 22ff 	movw	r2, #8959	; 0x22ff
   b42ce:	219f      	movs	r1, #159	; 0x9f
   b42d0:	2000      	movs	r0, #0
   b42d2:	f7ff ff45 	bl	b4160 <_Z9pixelFilliii>
  if(displayLight == band2) {
   b42d6:	4c25      	ldr	r4, [pc, #148]	; (b436c <loop+0x18c>)
   b42d8:	683b      	ldr	r3, [r7, #0]
   b42da:	6822      	ldr	r2, [r4, #0]
   b42dc:	429a      	cmp	r2, r3
   b42de:	d104      	bne.n	b42ea <loop+0x10a>
   pixelFill(0, NLEDS-1, fullblue);
   b42e0:	22ff      	movs	r2, #255	; 0xff
   b42e2:	219f      	movs	r1, #159	; 0x9f
   b42e4:	2000      	movs	r0, #0
   b42e6:	f7ff ff3b 	bl	b4160 <_Z9pixelFilliii>
  if(displayLight == band3) {
   b42ea:	6822      	ldr	r2, [r4, #0]
   b42ec:	6833      	ldr	r3, [r6, #0]
   b42ee:	429a      	cmp	r2, r3
   b42f0:	d105      	bne.n	b42fe <loop+0x11e>
   pixelFill(0, NLEDS-1, fullred);
   b42f2:	f44f 427f 	mov.w	r2, #65280	; 0xff00
   b42f6:	219f      	movs	r1, #159	; 0x9f
   b42f8:	2000      	movs	r0, #0
   b42fa:	f7ff ff31 	bl	b4160 <_Z9pixelFilliii>
  if(displayLight == band4) {
   b42fe:	6822      	ldr	r2, [r4, #0]
   b4300:	682b      	ldr	r3, [r5, #0]
   b4302:	429a      	cmp	r2, r3
   b4304:	d105      	bne.n	b4312 <loop+0x132>
   pixelFill(0, NLEDS-1, fullmagenta);
   b4306:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b430a:	219f      	movs	r1, #159	; 0x9f
   b430c:	2000      	movs	r0, #0
   b430e:	f7ff ff27 	bl	b4160 <_Z9pixelFilliii>
  if(displayLight == band5) {
   b4312:	4b1e      	ldr	r3, [pc, #120]	; (b438c <loop+0x1ac>)
   b4314:	6822      	ldr	r2, [r4, #0]
   b4316:	681b      	ldr	r3, [r3, #0]
   b4318:	429a      	cmp	r2, r3
   b431a:	d104      	bne.n	b4326 <loop+0x146>
   pixelFill(0, NLEDS-1, orange);
   b431c:	4a1c      	ldr	r2, [pc, #112]	; (b4390 <loop+0x1b0>)
   b431e:	219f      	movs	r1, #159	; 0x9f
   b4320:	2000      	movs	r0, #0
   b4322:	f7ff ff1d 	bl	b4160 <_Z9pixelFilliii>
  if(displayLight == band6) {
   b4326:	4b0f      	ldr	r3, [pc, #60]	; (b4364 <loop+0x184>)
   b4328:	6822      	ldr	r2, [r4, #0]
   b432a:	681b      	ldr	r3, [r3, #0]
   b432c:	429a      	cmp	r2, r3
   b432e:	d104      	bne.n	b433a <loop+0x15a>
   pixelFill(0, NLEDS-1, fullyellow);
   b4330:	4a18      	ldr	r2, [pc, #96]	; (b4394 <loop+0x1b4>)
   b4332:	219f      	movs	r1, #159	; 0x9f
   b4334:	2000      	movs	r0, #0
   b4336:	f7ff ff13 	bl	b4160 <_Z9pixelFilliii>
  if(displayLight == band7) {
   b433a:	4b0b      	ldr	r3, [pc, #44]	; (b4368 <loop+0x188>)
   b433c:	6822      	ldr	r2, [r4, #0]
   b433e:	681b      	ldr	r3, [r3, #0]
   b4340:	429a      	cmp	r2, r3
   b4342:	d107      	bne.n	b4354 <loop+0x174>
}
   b4344:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   pixelFill(0, NLEDS-1, full);
   b4348:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
   b434c:	219f      	movs	r1, #159	; 0x9f
   b434e:	2000      	movs	r0, #0
   b4350:	f7ff bf06 	b.w	b4160 <_Z9pixelFilliii>
}
   b4354:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4358:	2003e644 	.word	0x2003e644
   b435c:	2003e648 	.word	0x2003e648
   b4360:	2003e64c 	.word	0x2003e64c
   b4364:	2003e654 	.word	0x2003e654
   b4368:	2003e658 	.word	0x2003e658
   b436c:	2003e65c 	.word	0x2003e65c
   b4370:	000b57d4 	.word	0x000b57d4
   b4374:	000b57e0 	.word	0x000b57e0
   b4378:	000b57ec 	.word	0x000b57ec
   b437c:	000b57f8 	.word	0x000b57f8
   b4380:	000b5804 	.word	0x000b5804
   b4384:	000b5810 	.word	0x000b5810
   b4388:	000b581c 	.word	0x000b581c
   b438c:	2003e650 	.word	0x2003e650
   b4390:	0033ff00 	.word	0x0033ff00
   b4394:	00ffff00 	.word	0x00ffff00
   b4398:	2003e674 	.word	0x2003e674
   b439c:	2003e640 	.word	0x2003e640

000b43a0 <_GLOBAL__sub_I_volumeInBand>:
LPD8806 lights = LPD8806(NLEDS, CLKPIN, DPIN);
   b43a0:	4802      	ldr	r0, [pc, #8]	; (b43ac <_GLOBAL__sub_I_volumeInBand+0xc>)
   b43a2:	230f      	movs	r3, #15
   b43a4:	220e      	movs	r2, #14
   b43a6:	21a0      	movs	r1, #160	; 0xa0
   b43a8:	f000 b8e5 	b.w	b4576 <_ZN7LPD8806C1Ethh>
   b43ac:	2003e660 	.word	0x2003e660

000b43b0 <_ZN7LPD880612updateLengthEt>:
/*!
    @brief  Change strip length, calls malloc and free!
    @param  n New number of LEDs in strip
*/
/**************************************************************************/
void LPD8806::updateLength(uint16_t n) {
   b43b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t latchBytes;
  uint16_t dataBytes, totalBytes;

  numLEDs = numBytes = 0;
   b43b4:	2300      	movs	r3, #0
void LPD8806::updateLength(uint16_t n) {
   b43b6:	4604      	mov	r4, r0
  numLEDs = numBytes = 0;
   b43b8:	6003      	str	r3, [r0, #0]
  if (pixels)
   b43ba:	6840      	ldr	r0, [r0, #4]
void LPD8806::updateLength(uint16_t n) {
   b43bc:	460e      	mov	r6, r1
  if (pixels)
   b43be:	b108      	cbz	r0, b43c4 <_ZN7LPD880612updateLengthEt+0x14>
    free(pixels); // Free existing data (if any)
   b43c0:	f000 fb28 	bl	b4a14 <free>

  dataBytes = n * 3;
  latchBytes = (n + 31) / 32;
   b43c4:	f106 081f 	add.w	r8, r6, #31
  dataBytes = n * 3;
   b43c8:	eb06 0546 	add.w	r5, r6, r6, lsl #1
  totalBytes = dataBytes + latchBytes;
   b43cc:	f3c8 1847 	ubfx	r8, r8, #5, #8
  dataBytes = n * 3;
   b43d0:	fa1f f985 	uxth.w	r9, r5
  totalBytes = dataBytes + latchBytes;
   b43d4:	fa18 f585 	uxtah	r5, r8, r5
   b43d8:	b2ad      	uxth	r5, r5
  if ((pixels = (uint8_t *)malloc(totalBytes))) { // Alloc new data
   b43da:	4628      	mov	r0, r5
   b43dc:	f000 fb12 	bl	b4a04 <malloc>
   b43e0:	4607      	mov	r7, r0
   b43e2:	6060      	str	r0, [r4, #4]
   b43e4:	b168      	cbz	r0, b4402 <_ZN7LPD880612updateLengthEt+0x52>
    numLEDs = n;
    numBytes = totalBytes;
    memset(pixels, 0x80, dataBytes);           // Init to RGB 'off' state
   b43e6:	464a      	mov	r2, r9
    numLEDs = n;
   b43e8:	8026      	strh	r6, [r4, #0]
    numBytes = totalBytes;
   b43ea:	8065      	strh	r5, [r4, #2]
    memset(pixels, 0x80, dataBytes);           // Init to RGB 'off' state
   b43ec:	2180      	movs	r1, #128	; 0x80
   b43ee:	f001 f943 	bl	b5678 <memset>
    memset(&pixels[dataBytes], 0, latchBytes); // Clear latch bytes
   b43f2:	4642      	mov	r2, r8
   b43f4:	eb07 0009 	add.w	r0, r7, r9
   b43f8:	2100      	movs	r1, #0
  }
  // 'begun' state does not change -- pins retain prior modes
}
   b43fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    memset(&pixels[dataBytes], 0, latchBytes); // Clear latch bytes
   b43fe:	f001 b93b 	b.w	b5678 <memset>
}
   b4402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4406 <_ZN7LPD880613setPixelColorEtm>:
    @brief  Set pixel color from 'packed' 32-bit GRB (not RGB) value
    @param  n Pixel # to change (0 is first pixel)
    @param  c Packed color word
*/
/**************************************************************************/
void LPD8806::setPixelColor(uint16_t n, uint32_t c) {
   b4406:	b510      	push	{r4, lr}
  if (n < numLEDs) { // Arrays are 0-indexed, thus NOT '<='
   b4408:	8803      	ldrh	r3, [r0, #0]
   b440a:	428b      	cmp	r3, r1
   b440c:	d90e      	bls.n	b442c <_ZN7LPD880613setPixelColorEtm+0x26>
    uint8_t *p = &pixels[n * 3];
   b440e:	6844      	ldr	r4, [r0, #4]
   b4410:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    *p++ = (c >> 16) | 0x80;
   b4414:	0c13      	lsrs	r3, r2, #16
   b4416:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b441a:	5463      	strb	r3, [r4, r1]
    uint8_t *p = &pixels[n * 3];
   b441c:	1860      	adds	r0, r4, r1
    *p++ = (c >> 8) | 0x80;
   b441e:	0a13      	lsrs	r3, r2, #8
   b4420:	f063 037f 	orn	r3, r3, #127	; 0x7f
    *p++ = c | 0x80;
   b4424:	f062 027f 	orn	r2, r2, #127	; 0x7f
    *p++ = (c >> 8) | 0x80;
   b4428:	7043      	strb	r3, [r0, #1]
    *p++ = c | 0x80;
   b442a:	7082      	strb	r2, [r0, #2]
  }
}
   b442c:	bd10      	pop	{r4, pc}

000b442e <_ZN7LPD880612startBitbangEv>:
  for (uint16_t i = ((numLEDs + 31) / 32); i > 0; i--)
    spi_out(0);
}

// Enable software SPI pins and issue initial latch:
void LPD8806::startBitbang() {
   b442e:	b538      	push	{r3, r4, r5, lr}
   b4430:	4605      	mov	r5, r0
  pinMode(datapin, OUTPUT);
   b4432:	f990 0009 	ldrsb.w	r0, [r0, #9]
   b4436:	2101      	movs	r1, #1
   b4438:	b280      	uxth	r0, r0
   b443a:	f001 f847 	bl	b54cc <pinMode>
  pinMode(clkpin, OUTPUT);
   b443e:	f995 0008 	ldrsb.w	r0, [r5, #8]
   b4442:	2101      	movs	r1, #1
   b4444:	b280      	uxth	r0, r0
   b4446:	f001 f841 	bl	b54cc <pinMode>
  for (uint16_t i = ((numLEDs + 31) / 32) * 8; i > 0; i--) {
    *clkport |= clkpinmask;
    *clkport &= ~clkpinmask;
  }
#else
  digitalWrite(datapin, LOW);
   b444a:	f995 0009 	ldrsb.w	r0, [r5, #9]
   b444e:	2100      	movs	r1, #0
   b4450:	b280      	uxth	r0, r0
   b4452:	f001 f84c 	bl	b54ee <digitalWrite>
  for (uint16_t i = ((numLEDs + 31) / 32) * 8; i > 0; i--) {
   b4456:	882c      	ldrh	r4, [r5, #0]
   b4458:	341f      	adds	r4, #31
   b445a:	1164      	asrs	r4, r4, #5
   b445c:	00e4      	lsls	r4, r4, #3
   b445e:	b174      	cbz	r4, b447e <_ZN7LPD880612startBitbangEv+0x50>
    digitalWrite(clkpin, HIGH);
   b4460:	f995 0008 	ldrsb.w	r0, [r5, #8]
   b4464:	2101      	movs	r1, #1
   b4466:	b280      	uxth	r0, r0
   b4468:	f001 f841 	bl	b54ee <digitalWrite>
    digitalWrite(clkpin, LOW);
   b446c:	f995 0008 	ldrsb.w	r0, [r5, #8]
   b4470:	2100      	movs	r1, #0
   b4472:	b280      	uxth	r0, r0
  for (uint16_t i = ((numLEDs + 31) / 32) * 8; i > 0; i--) {
   b4474:	3c01      	subs	r4, #1
    digitalWrite(clkpin, LOW);
   b4476:	f001 f83a 	bl	b54ee <digitalWrite>
  for (uint16_t i = ((numLEDs + 31) / 32) * 8; i > 0; i--) {
   b447a:	b2a4      	uxth	r4, r4
   b447c:	e7ef      	b.n	b445e <_ZN7LPD880612startBitbangEv+0x30>
  }
#endif
}
   b447e:	bd38      	pop	{r3, r4, r5, pc}

000b4480 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4480:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4482:	4c0b      	ldr	r4, [pc, #44]	; (b44b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4484:	7821      	ldrb	r1, [r4, #0]
   b4486:	f3bf 8f5b 	dmb	ish
   b448a:	f011 0101 	ands.w	r1, r1, #1
   b448e:	d10b      	bne.n	b44a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4490:	4620      	mov	r0, r4
   b4492:	9101      	str	r1, [sp, #4]
   b4494:	f7ff fe01 	bl	b409a <__cxa_guard_acquire>
   b4498:	9901      	ldr	r1, [sp, #4]
   b449a:	b128      	cbz	r0, b44a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b449c:	4805      	ldr	r0, [pc, #20]	; (b44b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b449e:	f000 fd79 	bl	b4f94 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b44a2:	4620      	mov	r0, r4
   b44a4:	f7ff fdfe 	bl	b40a4 <__cxa_guard_release>
        return instance;
    }
   b44a8:	4802      	ldr	r0, [pc, #8]	; (b44b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b44aa:	b002      	add	sp, #8
   b44ac:	bd10      	pop	{r4, pc}
   b44ae:	bf00      	nop
   b44b0:	2003e690 	.word	0x2003e690
   b44b4:	2003e694 	.word	0x2003e694

000b44b8 <_ZN7LPD88064showEv>:
void LPD8806::show(void) {
   b44b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if (clkpin == -1) {
   b44bc:	f990 3008 	ldrsb.w	r3, [r0, #8]
  uint8_t *ptr = pixels;
   b44c0:	6845      	ldr	r5, [r0, #4]
  uint16_t i = numBytes;
   b44c2:	8846      	ldrh	r6, [r0, #2]
  if (clkpin == -1) {
   b44c4:	3301      	adds	r3, #1
void LPD8806::show(void) {
   b44c6:	4604      	mov	r4, r0
   b44c8:	442e      	add	r6, r5
  if (clkpin == -1) {
   b44ca:	d10a      	bne.n	b44e2 <_ZN7LPD88064showEv+0x2a>
    while (i--)
   b44cc:	42b5      	cmp	r5, r6
   b44ce:	d02a      	beq.n	b4526 <_ZN7LPD88064showEv+0x6e>
      spi_out(*ptr++);
   b44d0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b44d4:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b44d6:	f7ff ffd3 	bl	b4480 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b44da:	9901      	ldr	r1, [sp, #4]
   b44dc:	f000 fe20 	bl	b5120 <_ZN8SPIClass8transferEh>
   b44e0:	e7f4      	b.n	b44cc <_ZN7LPD88064showEv+0x14>
    while (i--) {
   b44e2:	42ae      	cmp	r6, r5
   b44e4:	d01f      	beq.n	b4526 <_ZN7LPD88064showEv+0x6e>
      p = *ptr++;
   b44e6:	f815 9b01 	ldrb.w	r9, [r5], #1
   b44ea:	f04f 0808 	mov.w	r8, #8
      for (bit = 0x80; bit; bit >>= 1) {
   b44ee:	2780      	movs	r7, #128	; 0x80
          digitalWrite(datapin, HIGH);
   b44f0:	f994 0009 	ldrsb.w	r0, [r4, #9]
        if (p & bit)
   b44f4:	ea19 0107 	ands.w	r1, r9, r7
          digitalWrite(datapin, HIGH);
   b44f8:	bf18      	it	ne
   b44fa:	2101      	movne	r1, #1
   b44fc:	b280      	uxth	r0, r0
          digitalWrite(datapin, LOW);
   b44fe:	f000 fff6 	bl	b54ee <digitalWrite>
        digitalWrite(clkpin, HIGH);
   b4502:	f994 0008 	ldrsb.w	r0, [r4, #8]
   b4506:	2101      	movs	r1, #1
   b4508:	b280      	uxth	r0, r0
   b450a:	f000 fff0 	bl	b54ee <digitalWrite>
        digitalWrite(clkpin, LOW);
   b450e:	f994 0008 	ldrsb.w	r0, [r4, #8]
   b4512:	2100      	movs	r1, #0
   b4514:	b280      	uxth	r0, r0
   b4516:	f000 ffea 	bl	b54ee <digitalWrite>
      for (bit = 0x80; bit; bit >>= 1) {
   b451a:	f1b8 0801 	subs.w	r8, r8, #1
   b451e:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b4522:	d1e5      	bne.n	b44f0 <_ZN7LPD88064showEv+0x38>
   b4524:	e7dd      	b.n	b44e2 <_ZN7LPD88064showEv+0x2a>
}
   b4526:	b003      	add	sp, #12
   b4528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b452c <_ZN7LPD880610updatePinsEhh>:
void LPD8806::updatePins(uint8_t dpin, uint8_t cpin) {
   b452c:	b570      	push	{r4, r5, r6, lr}
  if (begun == true) { // If begin() was previously invoked...
   b452e:	7a83      	ldrb	r3, [r0, #10]
void LPD8806::updatePins(uint8_t dpin, uint8_t cpin) {
   b4530:	4604      	mov	r4, r0
   b4532:	460e      	mov	r6, r1
   b4534:	4615      	mov	r5, r2
  if (begun == true) { // If begin() was previously invoked...
   b4536:	b13b      	cbz	r3, b4548 <_ZN7LPD880610updatePinsEhh+0x1c>
    if (clkpin == -1) {
   b4538:	f990 3008 	ldrsb.w	r3, [r0, #8]
   b453c:	3301      	adds	r3, #1
   b453e:	d10c      	bne.n	b455a <_ZN7LPD880610updatePinsEhh+0x2e>
        instance().end();
   b4540:	f7ff ff9e 	bl	b4480 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4544:	f000 fd44 	bl	b4fd0 <_ZN8SPIClass3endEv>
  if (begun == true)
   b4548:	7aa3      	ldrb	r3, [r4, #10]
  datapin = dpin;
   b454a:	7266      	strb	r6, [r4, #9]
  clkpin = cpin;
   b454c:	7225      	strb	r5, [r4, #8]
  if (begun == true)
   b454e:	b18b      	cbz	r3, b4574 <_ZN7LPD880610updatePinsEhh+0x48>
    startBitbang();
   b4550:	4620      	mov	r0, r4
}
   b4552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    startBitbang();
   b4556:	f7ff bf6a 	b.w	b442e <_ZN7LPD880612startBitbangEv>
      pinMode(datapin, INPUT); // Restore data and clock pins to inputs
   b455a:	f990 0009 	ldrsb.w	r0, [r0, #9]
   b455e:	2100      	movs	r1, #0
   b4560:	b280      	uxth	r0, r0
   b4562:	f000 ffb3 	bl	b54cc <pinMode>
      pinMode(clkpin, INPUT);
   b4566:	f994 0008 	ldrsb.w	r0, [r4, #8]
   b456a:	2100      	movs	r1, #0
   b456c:	b280      	uxth	r0, r0
   b456e:	f000 ffad 	bl	b54cc <pinMode>
   b4572:	e7e9      	b.n	b4548 <_ZN7LPD880610updatePinsEhh+0x1c>
}
   b4574:	bd70      	pop	{r4, r5, r6, pc}

000b4576 <_ZN7LPD8806C1Ethh>:
LPD8806::LPD8806(uint16_t n, uint8_t dpin, uint8_t cpin) {
   b4576:	b570      	push	{r4, r5, r6, lr}
   b4578:	461e      	mov	r6, r3
  pixels = NULL;
   b457a:	2300      	movs	r3, #0
LPD8806::LPD8806(uint16_t n, uint8_t dpin, uint8_t cpin) {
   b457c:	4604      	mov	r4, r0
   b457e:	4615      	mov	r5, r2
  pixels = NULL;
   b4580:	6043      	str	r3, [r0, #4]
  begun = false;
   b4582:	7283      	strb	r3, [r0, #10]
  clkpin = cpin;
   b4584:	7206      	strb	r6, [r0, #8]
  datapin = dpin;
   b4586:	7242      	strb	r2, [r0, #9]
  updateLength(n);
   b4588:	f7ff ff12 	bl	b43b0 <_ZN7LPD880612updateLengthEt>
  updatePins(dpin, cpin);
   b458c:	4620      	mov	r0, r4
   b458e:	4632      	mov	r2, r6
   b4590:	4629      	mov	r1, r5
   b4592:	f7ff ffcb 	bl	b452c <_ZN7LPD880610updatePinsEhh>
}
   b4596:	4620      	mov	r0, r4
   b4598:	bd70      	pop	{r4, r5, r6, pc}

000b459a <_ZN7LPD88068startSPIEv>:
void LPD8806::startSPI(void) {
   b459a:	b510      	push	{r4, lr}
   b459c:	4604      	mov	r4, r0
        instance().begin();
   b459e:	f7ff ff6f 	bl	b4480 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b45a2:	f000 fd01 	bl	b4fa8 <_ZN8SPIClass5beginEv>
        instance().setBitOrder(order);
   b45a6:	f7ff ff6b 	bl	b4480 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b45aa:	2101      	movs	r1, #1
   b45ac:	f000 fd22 	bl	b4ff4 <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
   b45b0:	f7ff ff66 	bl	b4480 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b45b4:	2100      	movs	r1, #0
   b45b6:	f000 fd31 	bl	b501c <_ZN8SPIClass11setDataModeEh>
        instance().setClockDivider(divider);
   b45ba:	f7ff ff61 	bl	b4480 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b45be:	2101      	movs	r1, #1
   b45c0:	f000 fd88 	bl	b50d4 <_ZN8SPIClass15setClockDividerEh>
  for (uint16_t i = ((numLEDs + 31) / 32); i > 0; i--)
   b45c4:	8824      	ldrh	r4, [r4, #0]
   b45c6:	341f      	adds	r4, #31
   b45c8:	0964      	lsrs	r4, r4, #5
   b45ca:	b13c      	cbz	r4, b45dc <_ZN7LPD88068startSPIEv+0x42>
        return instance().transfer(data);
   b45cc:	f7ff ff58 	bl	b4480 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b45d0:	3c01      	subs	r4, #1
   b45d2:	2100      	movs	r1, #0
   b45d4:	f000 fda4 	bl	b5120 <_ZN8SPIClass8transferEh>
   b45d8:	b2a4      	uxth	r4, r4
   b45da:	e7f6      	b.n	b45ca <_ZN7LPD88068startSPIEv+0x30>
}
   b45dc:	bd10      	pop	{r4, pc}

000b45de <_ZN7LPD88065beginEv>:
  if (clkpin == -1)
   b45de:	f990 3008 	ldrsb.w	r3, [r0, #8]
   b45e2:	3301      	adds	r3, #1
void LPD8806::begin(void) {
   b45e4:	b510      	push	{r4, lr}
   b45e6:	4604      	mov	r4, r0
  if (clkpin == -1)
   b45e8:	d104      	bne.n	b45f4 <_ZN7LPD88065beginEv+0x16>
    startSPI();
   b45ea:	f7ff ffd6 	bl	b459a <_ZN7LPD88068startSPIEv>
  begun = true;
   b45ee:	2301      	movs	r3, #1
   b45f0:	72a3      	strb	r3, [r4, #10]
}
   b45f2:	bd10      	pop	{r4, pc}
    startBitbang();
   b45f4:	f7ff ff1b 	bl	b442e <_ZN7LPD880612startBitbangEv>
   b45f8:	e7f9      	b.n	b45ee <_ZN7LPD88065beginEv+0x10>
	...

000b45fc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b45fc:	b508      	push	{r3, lr}
   b45fe:	4b02      	ldr	r3, [pc, #8]	; (b4608 <os_mutex_recursive_create+0xc>)
   b4600:	681b      	ldr	r3, [r3, #0]
   b4602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4604:	9301      	str	r3, [sp, #4]
   b4606:	bd08      	pop	{r3, pc}
   b4608:	00030248 	.word	0x00030248

000b460c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b460c:	b508      	push	{r3, lr}
   b460e:	4b02      	ldr	r3, [pc, #8]	; (b4618 <HAL_RNG_GetRandomNumber+0xc>)
   b4610:	681b      	ldr	r3, [r3, #0]
   b4612:	685b      	ldr	r3, [r3, #4]
   b4614:	9301      	str	r3, [sp, #4]
   b4616:	bd08      	pop	{r3, pc}
   b4618:	00030218 	.word	0x00030218

000b461c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b461c:	b508      	push	{r3, lr}
   b461e:	4b02      	ldr	r3, [pc, #8]	; (b4628 <HAL_Delay_Microseconds+0xc>)
   b4620:	681b      	ldr	r3, [r3, #0]
   b4622:	68db      	ldr	r3, [r3, #12]
   b4624:	9301      	str	r3, [sp, #4]
   b4626:	bd08      	pop	{r3, pc}
   b4628:	00030218 	.word	0x00030218

000b462c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b462c:	b508      	push	{r3, lr}
   b462e:	4b02      	ldr	r3, [pc, #8]	; (b4638 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4630:	681b      	ldr	r3, [r3, #0]
   b4632:	695b      	ldr	r3, [r3, #20]
   b4634:	9301      	str	r3, [sp, #4]
   b4636:	bd08      	pop	{r3, pc}
   b4638:	00030218 	.word	0x00030218

000b463c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b463c:	b508      	push	{r3, lr}
   b463e:	4b02      	ldr	r3, [pc, #8]	; (b4648 <hal_timer_millis+0xc>)
   b4640:	681b      	ldr	r3, [r3, #0]
   b4642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4644:	9301      	str	r3, [sp, #4]
   b4646:	bd08      	pop	{r3, pc}
   b4648:	00030218 	.word	0x00030218

000b464c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b464c:	b508      	push	{r3, lr}
   b464e:	4b02      	ldr	r3, [pc, #8]	; (b4658 <HAL_Validate_Pin_Function+0xc>)
   b4650:	681b      	ldr	r3, [r3, #0]
   b4652:	685b      	ldr	r3, [r3, #4]
   b4654:	9301      	str	r3, [sp, #4]
   b4656:	bd08      	pop	{r3, pc}
   b4658:	0003022c 	.word	0x0003022c

000b465c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b465c:	b508      	push	{r3, lr}
   b465e:	4b02      	ldr	r3, [pc, #8]	; (b4668 <HAL_Pin_Mode+0xc>)
   b4660:	681b      	ldr	r3, [r3, #0]
   b4662:	689b      	ldr	r3, [r3, #8]
   b4664:	9301      	str	r3, [sp, #4]
   b4666:	bd08      	pop	{r3, pc}
   b4668:	0003022c 	.word	0x0003022c

000b466c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b466c:	b508      	push	{r3, lr}
   b466e:	4b02      	ldr	r3, [pc, #8]	; (b4678 <HAL_Get_Pin_Mode+0xc>)
   b4670:	681b      	ldr	r3, [r3, #0]
   b4672:	68db      	ldr	r3, [r3, #12]
   b4674:	9301      	str	r3, [sp, #4]
   b4676:	bd08      	pop	{r3, pc}
   b4678:	0003022c 	.word	0x0003022c

000b467c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b467c:	b508      	push	{r3, lr}
   b467e:	4b02      	ldr	r3, [pc, #8]	; (b4688 <HAL_GPIO_Write+0xc>)
   b4680:	681b      	ldr	r3, [r3, #0]
   b4682:	691b      	ldr	r3, [r3, #16]
   b4684:	9301      	str	r3, [sp, #4]
   b4686:	bd08      	pop	{r3, pc}
   b4688:	0003022c 	.word	0x0003022c

000b468c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b468c:	b508      	push	{r3, lr}
   b468e:	4b02      	ldr	r3, [pc, #8]	; (b4698 <hal_adc_read+0xc>)
   b4690:	681b      	ldr	r3, [r3, #0]
   b4692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4694:	9301      	str	r3, [sp, #4]
   b4696:	bd08      	pop	{r3, pc}
   b4698:	0003022c 	.word	0x0003022c

000b469c <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b469c:	b508      	push	{r3, lr}
   b469e:	4b02      	ldr	r3, [pc, #8]	; (b46a8 <hal_i2c_write+0xc>)
   b46a0:	681b      	ldr	r3, [r3, #0]
   b46a2:	6a1b      	ldr	r3, [r3, #32]
   b46a4:	9301      	str	r3, [sp, #4]
   b46a6:	bd08      	pop	{r3, pc}
   b46a8:	00030228 	.word	0x00030228

000b46ac <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b46ac:	b508      	push	{r3, lr}
   b46ae:	4b02      	ldr	r3, [pc, #8]	; (b46b8 <hal_i2c_available+0xc>)
   b46b0:	681b      	ldr	r3, [r3, #0]
   b46b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b46b4:	9301      	str	r3, [sp, #4]
   b46b6:	bd08      	pop	{r3, pc}
   b46b8:	00030228 	.word	0x00030228

000b46bc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b46bc:	b508      	push	{r3, lr}
   b46be:	4b02      	ldr	r3, [pc, #8]	; (b46c8 <hal_i2c_read+0xc>)
   b46c0:	681b      	ldr	r3, [r3, #0]
   b46c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b46c4:	9301      	str	r3, [sp, #4]
   b46c6:	bd08      	pop	{r3, pc}
   b46c8:	00030228 	.word	0x00030228

000b46cc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b46cc:	b508      	push	{r3, lr}
   b46ce:	4b02      	ldr	r3, [pc, #8]	; (b46d8 <hal_i2c_peek+0xc>)
   b46d0:	681b      	ldr	r3, [r3, #0]
   b46d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46d4:	9301      	str	r3, [sp, #4]
   b46d6:	bd08      	pop	{r3, pc}
   b46d8:	00030228 	.word	0x00030228

000b46dc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b46dc:	b508      	push	{r3, lr}
   b46de:	4b02      	ldr	r3, [pc, #8]	; (b46e8 <hal_i2c_flush+0xc>)
   b46e0:	681b      	ldr	r3, [r3, #0]
   b46e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46e4:	9301      	str	r3, [sp, #4]
   b46e6:	bd08      	pop	{r3, pc}
   b46e8:	00030228 	.word	0x00030228

000b46ec <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b46ec:	b508      	push	{r3, lr}
   b46ee:	4b02      	ldr	r3, [pc, #8]	; (b46f8 <hal_i2c_is_enabled+0xc>)
   b46f0:	681b      	ldr	r3, [r3, #0]
   b46f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b46f4:	9301      	str	r3, [sp, #4]
   b46f6:	bd08      	pop	{r3, pc}
   b46f8:	00030228 	.word	0x00030228

000b46fc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b46fc:	b508      	push	{r3, lr}
   b46fe:	4b02      	ldr	r3, [pc, #8]	; (b4708 <hal_i2c_init+0xc>)
   b4700:	681b      	ldr	r3, [r3, #0]
   b4702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4704:	9301      	str	r3, [sp, #4]
   b4706:	bd08      	pop	{r3, pc}
   b4708:	00030228 	.word	0x00030228

000b470c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b470c:	b508      	push	{r3, lr}
   b470e:	4b02      	ldr	r3, [pc, #8]	; (b4718 <inet_inet_ntop+0xc>)
   b4710:	681b      	ldr	r3, [r3, #0]
   b4712:	695b      	ldr	r3, [r3, #20]
   b4714:	9301      	str	r3, [sp, #4]
   b4716:	bd08      	pop	{r3, pc}
   b4718:	00030264 	.word	0x00030264

000b471c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b471c:	b508      	push	{r3, lr}
   b471e:	4b02      	ldr	r3, [pc, #8]	; (b4728 <netdb_freeaddrinfo+0xc>)
   b4720:	681b      	ldr	r3, [r3, #0]
   b4722:	689b      	ldr	r3, [r3, #8]
   b4724:	9301      	str	r3, [sp, #4]
   b4726:	bd08      	pop	{r3, pc}
   b4728:	00030268 	.word	0x00030268

000b472c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b472c:	b508      	push	{r3, lr}
   b472e:	4b02      	ldr	r3, [pc, #8]	; (b4738 <netdb_getaddrinfo+0xc>)
   b4730:	681b      	ldr	r3, [r3, #0]
   b4732:	68db      	ldr	r3, [r3, #12]
   b4734:	9301      	str	r3, [sp, #4]
   b4736:	bd08      	pop	{r3, pc}
   b4738:	00030268 	.word	0x00030268

000b473c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b473c:	b508      	push	{r3, lr}
   b473e:	4b02      	ldr	r3, [pc, #8]	; (b4748 <hal_spi_begin+0xc>)
   b4740:	681b      	ldr	r3, [r3, #0]
   b4742:	681b      	ldr	r3, [r3, #0]
   b4744:	9301      	str	r3, [sp, #4]
   b4746:	bd08      	pop	{r3, pc}
   b4748:	00030230 	.word	0x00030230

000b474c <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   b474c:	b508      	push	{r3, lr}
   b474e:	4b02      	ldr	r3, [pc, #8]	; (b4758 <hal_spi_end+0xc>)
   b4750:	681b      	ldr	r3, [r3, #0]
   b4752:	685b      	ldr	r3, [r3, #4]
   b4754:	9301      	str	r3, [sp, #4]
   b4756:	bd08      	pop	{r3, pc}
   b4758:	00030230 	.word	0x00030230

000b475c <hal_spi_set_bit_order>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b475c:	b508      	push	{r3, lr}
   b475e:	4b02      	ldr	r3, [pc, #8]	; (b4768 <hal_spi_set_bit_order+0xc>)
   b4760:	681b      	ldr	r3, [r3, #0]
   b4762:	689b      	ldr	r3, [r3, #8]
   b4764:	9301      	str	r3, [sp, #4]
   b4766:	bd08      	pop	{r3, pc}
   b4768:	00030230 	.word	0x00030230

000b476c <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b476c:	b508      	push	{r3, lr}
   b476e:	4b02      	ldr	r3, [pc, #8]	; (b4778 <hal_spi_set_data_mode+0xc>)
   b4770:	681b      	ldr	r3, [r3, #0]
   b4772:	68db      	ldr	r3, [r3, #12]
   b4774:	9301      	str	r3, [sp, #4]
   b4776:	bd08      	pop	{r3, pc}
   b4778:	00030230 	.word	0x00030230

000b477c <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b477c:	b508      	push	{r3, lr}
   b477e:	4b02      	ldr	r3, [pc, #8]	; (b4788 <hal_spi_set_clock_divider+0xc>)
   b4780:	681b      	ldr	r3, [r3, #0]
   b4782:	691b      	ldr	r3, [r3, #16]
   b4784:	9301      	str	r3, [sp, #4]
   b4786:	bd08      	pop	{r3, pc}
   b4788:	00030230 	.word	0x00030230

000b478c <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b478c:	b508      	push	{r3, lr}
   b478e:	4b02      	ldr	r3, [pc, #8]	; (b4798 <hal_spi_transfer+0xc>)
   b4790:	681b      	ldr	r3, [r3, #0]
   b4792:	695b      	ldr	r3, [r3, #20]
   b4794:	9301      	str	r3, [sp, #4]
   b4796:	bd08      	pop	{r3, pc}
   b4798:	00030230 	.word	0x00030230

000b479c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b479c:	b508      	push	{r3, lr}
   b479e:	4b02      	ldr	r3, [pc, #8]	; (b47a8 <hal_spi_init+0xc>)
   b47a0:	681b      	ldr	r3, [r3, #0]
   b47a2:	69db      	ldr	r3, [r3, #28]
   b47a4:	9301      	str	r3, [sp, #4]
   b47a6:	bd08      	pop	{r3, pc}
   b47a8:	00030230 	.word	0x00030230

000b47ac <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b47ac:	b508      	push	{r3, lr}
   b47ae:	4b02      	ldr	r3, [pc, #8]	; (b47b8 <hal_spi_is_enabled+0xc>)
   b47b0:	681b      	ldr	r3, [r3, #0]
   b47b2:	6a1b      	ldr	r3, [r3, #32]
   b47b4:	9301      	str	r3, [sp, #4]
   b47b6:	bd08      	pop	{r3, pc}
   b47b8:	00030230 	.word	0x00030230

000b47bc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b47bc:	b508      	push	{r3, lr}
   b47be:	4b02      	ldr	r3, [pc, #8]	; (b47c8 <hal_spi_info+0xc>)
   b47c0:	681b      	ldr	r3, [r3, #0]
   b47c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b47c4:	9301      	str	r3, [sp, #4]
   b47c6:	bd08      	pop	{r3, pc}
   b47c8:	00030230 	.word	0x00030230

000b47cc <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b47cc:	b508      	push	{r3, lr}
   b47ce:	4b02      	ldr	r3, [pc, #8]	; (b47d8 <hal_spi_acquire+0xc>)
   b47d0:	681b      	ldr	r3, [r3, #0]
   b47d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b47d4:	9301      	str	r3, [sp, #4]
   b47d6:	bd08      	pop	{r3, pc}
   b47d8:	00030230 	.word	0x00030230

000b47dc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b47dc:	b508      	push	{r3, lr}
   b47de:	4b02      	ldr	r3, [pc, #8]	; (b47e8 <hal_spi_release+0xc>)
   b47e0:	681b      	ldr	r3, [r3, #0]
   b47e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b47e4:	9301      	str	r3, [sp, #4]
   b47e6:	bd08      	pop	{r3, pc}
   b47e8:	00030230 	.word	0x00030230

000b47ec <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b47ec:	b508      	push	{r3, lr}
   b47ee:	4b02      	ldr	r3, [pc, #8]	; (b47f8 <hal_usart_write+0xc>)
   b47f0:	681b      	ldr	r3, [r3, #0]
   b47f2:	68db      	ldr	r3, [r3, #12]
   b47f4:	9301      	str	r3, [sp, #4]
   b47f6:	bd08      	pop	{r3, pc}
   b47f8:	0003023c 	.word	0x0003023c

000b47fc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b47fc:	b508      	push	{r3, lr}
   b47fe:	4b02      	ldr	r3, [pc, #8]	; (b4808 <hal_usart_available+0xc>)
   b4800:	681b      	ldr	r3, [r3, #0]
   b4802:	691b      	ldr	r3, [r3, #16]
   b4804:	9301      	str	r3, [sp, #4]
   b4806:	bd08      	pop	{r3, pc}
   b4808:	0003023c 	.word	0x0003023c

000b480c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b480c:	b508      	push	{r3, lr}
   b480e:	4b02      	ldr	r3, [pc, #8]	; (b4818 <hal_usart_read+0xc>)
   b4810:	681b      	ldr	r3, [r3, #0]
   b4812:	695b      	ldr	r3, [r3, #20]
   b4814:	9301      	str	r3, [sp, #4]
   b4816:	bd08      	pop	{r3, pc}
   b4818:	0003023c 	.word	0x0003023c

000b481c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b481c:	b508      	push	{r3, lr}
   b481e:	4b02      	ldr	r3, [pc, #8]	; (b4828 <hal_usart_peek+0xc>)
   b4820:	681b      	ldr	r3, [r3, #0]
   b4822:	699b      	ldr	r3, [r3, #24]
   b4824:	9301      	str	r3, [sp, #4]
   b4826:	bd08      	pop	{r3, pc}
   b4828:	0003023c 	.word	0x0003023c

000b482c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b482c:	b508      	push	{r3, lr}
   b482e:	4b02      	ldr	r3, [pc, #8]	; (b4838 <hal_usart_flush+0xc>)
   b4830:	681b      	ldr	r3, [r3, #0]
   b4832:	69db      	ldr	r3, [r3, #28]
   b4834:	9301      	str	r3, [sp, #4]
   b4836:	bd08      	pop	{r3, pc}
   b4838:	0003023c 	.word	0x0003023c

000b483c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b483c:	b508      	push	{r3, lr}
   b483e:	4b02      	ldr	r3, [pc, #8]	; (b4848 <hal_usart_is_enabled+0xc>)
   b4840:	681b      	ldr	r3, [r3, #0]
   b4842:	6a1b      	ldr	r3, [r3, #32]
   b4844:	9301      	str	r3, [sp, #4]
   b4846:	bd08      	pop	{r3, pc}
   b4848:	0003023c 	.word	0x0003023c

000b484c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b484c:	b508      	push	{r3, lr}
   b484e:	4b02      	ldr	r3, [pc, #8]	; (b4858 <hal_usart_available_data_for_write+0xc>)
   b4850:	681b      	ldr	r3, [r3, #0]
   b4852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4854:	9301      	str	r3, [sp, #4]
   b4856:	bd08      	pop	{r3, pc}
   b4858:	0003023c 	.word	0x0003023c

000b485c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b485c:	b508      	push	{r3, lr}
   b485e:	4b02      	ldr	r3, [pc, #8]	; (b4868 <hal_usart_init_ex+0xc>)
   b4860:	681b      	ldr	r3, [r3, #0]
   b4862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4864:	9301      	str	r3, [sp, #4]
   b4866:	bd08      	pop	{r3, pc}
   b4868:	0003023c 	.word	0x0003023c

000b486c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b486c:	b508      	push	{r3, lr}
   b486e:	4b02      	ldr	r3, [pc, #8]	; (b4878 <HAL_USB_USART_Init+0xc>)
   b4870:	681b      	ldr	r3, [r3, #0]
   b4872:	681b      	ldr	r3, [r3, #0]
   b4874:	9301      	str	r3, [sp, #4]
   b4876:	bd08      	pop	{r3, pc}
   b4878:	0003024c 	.word	0x0003024c

000b487c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b487c:	b508      	push	{r3, lr}
   b487e:	4b02      	ldr	r3, [pc, #8]	; (b4888 <HAL_USB_USART_Begin+0xc>)
   b4880:	681b      	ldr	r3, [r3, #0]
   b4882:	685b      	ldr	r3, [r3, #4]
   b4884:	9301      	str	r3, [sp, #4]
   b4886:	bd08      	pop	{r3, pc}
   b4888:	0003024c 	.word	0x0003024c

000b488c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b488c:	b508      	push	{r3, lr}
   b488e:	4b02      	ldr	r3, [pc, #8]	; (b4898 <HAL_USB_USART_Available_Data+0xc>)
   b4890:	681b      	ldr	r3, [r3, #0]
   b4892:	691b      	ldr	r3, [r3, #16]
   b4894:	9301      	str	r3, [sp, #4]
   b4896:	bd08      	pop	{r3, pc}
   b4898:	0003024c 	.word	0x0003024c

000b489c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b489c:	b508      	push	{r3, lr}
   b489e:	4b02      	ldr	r3, [pc, #8]	; (b48a8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b48a0:	681b      	ldr	r3, [r3, #0]
   b48a2:	695b      	ldr	r3, [r3, #20]
   b48a4:	9301      	str	r3, [sp, #4]
   b48a6:	bd08      	pop	{r3, pc}
   b48a8:	0003024c 	.word	0x0003024c

000b48ac <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b48ac:	b508      	push	{r3, lr}
   b48ae:	4b02      	ldr	r3, [pc, #8]	; (b48b8 <HAL_USB_USART_Receive_Data+0xc>)
   b48b0:	681b      	ldr	r3, [r3, #0]
   b48b2:	699b      	ldr	r3, [r3, #24]
   b48b4:	9301      	str	r3, [sp, #4]
   b48b6:	bd08      	pop	{r3, pc}
   b48b8:	0003024c 	.word	0x0003024c

000b48bc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b48bc:	b508      	push	{r3, lr}
   b48be:	4b02      	ldr	r3, [pc, #8]	; (b48c8 <HAL_USB_USART_Send_Data+0xc>)
   b48c0:	681b      	ldr	r3, [r3, #0]
   b48c2:	69db      	ldr	r3, [r3, #28]
   b48c4:	9301      	str	r3, [sp, #4]
   b48c6:	bd08      	pop	{r3, pc}
   b48c8:	0003024c 	.word	0x0003024c

000b48cc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b48cc:	b508      	push	{r3, lr}
   b48ce:	4b02      	ldr	r3, [pc, #8]	; (b48d8 <HAL_USB_USART_Flush_Data+0xc>)
   b48d0:	681b      	ldr	r3, [r3, #0]
   b48d2:	6a1b      	ldr	r3, [r3, #32]
   b48d4:	9301      	str	r3, [sp, #4]
   b48d6:	bd08      	pop	{r3, pc}
   b48d8:	0003024c 	.word	0x0003024c

000b48dc <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b48dc:	b508      	push	{r3, lr}
   b48de:	4b02      	ldr	r3, [pc, #8]	; (b48e8 <HAL_USB_USART_Is_Connected+0xc>)
   b48e0:	681b      	ldr	r3, [r3, #0]
   b48e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b48e4:	9301      	str	r3, [sp, #4]
   b48e6:	bd08      	pop	{r3, pc}
   b48e8:	0003024c 	.word	0x0003024c

000b48ec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b48ec:	b508      	push	{r3, lr}
   b48ee:	4b02      	ldr	r3, [pc, #8]	; (b48f8 <set_system_mode+0xc>)
   b48f0:	681b      	ldr	r3, [r3, #0]
   b48f2:	685b      	ldr	r3, [r3, #4]
   b48f4:	9301      	str	r3, [sp, #4]
   b48f6:	bd08      	pop	{r3, pc}
   b48f8:	00030220 	.word	0x00030220

000b48fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b48fc:	b508      	push	{r3, lr}
   b48fe:	4b03      	ldr	r3, [pc, #12]	; (b490c <system_ctrl_set_app_request_handler+0x10>)
   b4900:	681b      	ldr	r3, [r3, #0]
   b4902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4906:	9301      	str	r3, [sp, #4]
   b4908:	bd08      	pop	{r3, pc}
   b490a:	0000      	.short	0x0000
   b490c:	00030220 	.word	0x00030220

000b4910 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4910:	b508      	push	{r3, lr}
   b4912:	4b03      	ldr	r3, [pc, #12]	; (b4920 <system_ctrl_set_result+0x10>)
   b4914:	681b      	ldr	r3, [r3, #0]
   b4916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b491a:	9301      	str	r3, [sp, #4]
   b491c:	bd08      	pop	{r3, pc}
   b491e:	0000      	.short	0x0000
   b4920:	00030220 	.word	0x00030220

000b4924 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b4924:	b508      	push	{r3, lr}
   b4926:	4b02      	ldr	r3, [pc, #8]	; (b4930 <spark_process+0xc>)
   b4928:	681b      	ldr	r3, [r3, #0]
   b492a:	689b      	ldr	r3, [r3, #8]
   b492c:	9301      	str	r3, [sp, #4]
   b492e:	bd08      	pop	{r3, pc}
   b4930:	00030244 	.word	0x00030244

000b4934 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4934:	b508      	push	{r3, lr}
   b4936:	4b02      	ldr	r3, [pc, #8]	; (b4940 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4938:	681b      	ldr	r3, [r3, #0]
   b493a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b493c:	9301      	str	r3, [sp, #4]
   b493e:	bd08      	pop	{r3, pc}
   b4940:	00030244 	.word	0x00030244

000b4944 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4944:	b508      	push	{r3, lr}
   b4946:	4b02      	ldr	r3, [pc, #8]	; (b4950 <network_connect+0xc>)
   b4948:	681b      	ldr	r3, [r3, #0]
   b494a:	685b      	ldr	r3, [r3, #4]
   b494c:	9301      	str	r3, [sp, #4]
   b494e:	bd08      	pop	{r3, pc}
   b4950:	00030240 	.word	0x00030240

000b4954 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4954:	b508      	push	{r3, lr}
   b4956:	4b02      	ldr	r3, [pc, #8]	; (b4960 <network_connecting+0xc>)
   b4958:	681b      	ldr	r3, [r3, #0]
   b495a:	689b      	ldr	r3, [r3, #8]
   b495c:	9301      	str	r3, [sp, #4]
   b495e:	bd08      	pop	{r3, pc}
   b4960:	00030240 	.word	0x00030240

000b4964 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4964:	b508      	push	{r3, lr}
   b4966:	4b02      	ldr	r3, [pc, #8]	; (b4970 <network_disconnect+0xc>)
   b4968:	681b      	ldr	r3, [r3, #0]
   b496a:	68db      	ldr	r3, [r3, #12]
   b496c:	9301      	str	r3, [sp, #4]
   b496e:	bd08      	pop	{r3, pc}
   b4970:	00030240 	.word	0x00030240

000b4974 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4974:	b508      	push	{r3, lr}
   b4976:	4b02      	ldr	r3, [pc, #8]	; (b4980 <network_ready+0xc>)
   b4978:	681b      	ldr	r3, [r3, #0]
   b497a:	691b      	ldr	r3, [r3, #16]
   b497c:	9301      	str	r3, [sp, #4]
   b497e:	bd08      	pop	{r3, pc}
   b4980:	00030240 	.word	0x00030240

000b4984 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4984:	b508      	push	{r3, lr}
   b4986:	4b02      	ldr	r3, [pc, #8]	; (b4990 <network_on+0xc>)
   b4988:	681b      	ldr	r3, [r3, #0]
   b498a:	695b      	ldr	r3, [r3, #20]
   b498c:	9301      	str	r3, [sp, #4]
   b498e:	bd08      	pop	{r3, pc}
   b4990:	00030240 	.word	0x00030240

000b4994 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4994:	b508      	push	{r3, lr}
   b4996:	4b02      	ldr	r3, [pc, #8]	; (b49a0 <network_off+0xc>)
   b4998:	681b      	ldr	r3, [r3, #0]
   b499a:	699b      	ldr	r3, [r3, #24]
   b499c:	9301      	str	r3, [sp, #4]
   b499e:	bd08      	pop	{r3, pc}
   b49a0:	00030240 	.word	0x00030240

000b49a4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b49a4:	b508      	push	{r3, lr}
   b49a6:	4b02      	ldr	r3, [pc, #8]	; (b49b0 <network_listen+0xc>)
   b49a8:	681b      	ldr	r3, [r3, #0]
   b49aa:	69db      	ldr	r3, [r3, #28]
   b49ac:	9301      	str	r3, [sp, #4]
   b49ae:	bd08      	pop	{r3, pc}
   b49b0:	00030240 	.word	0x00030240

000b49b4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b49b4:	b508      	push	{r3, lr}
   b49b6:	4b02      	ldr	r3, [pc, #8]	; (b49c0 <network_listening+0xc>)
   b49b8:	681b      	ldr	r3, [r3, #0]
   b49ba:	6a1b      	ldr	r3, [r3, #32]
   b49bc:	9301      	str	r3, [sp, #4]
   b49be:	bd08      	pop	{r3, pc}
   b49c0:	00030240 	.word	0x00030240

000b49c4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b49c4:	b508      	push	{r3, lr}
   b49c6:	4b02      	ldr	r3, [pc, #8]	; (b49d0 <network_set_listen_timeout+0xc>)
   b49c8:	681b      	ldr	r3, [r3, #0]
   b49ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b49cc:	9301      	str	r3, [sp, #4]
   b49ce:	bd08      	pop	{r3, pc}
   b49d0:	00030240 	.word	0x00030240

000b49d4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b49d4:	b508      	push	{r3, lr}
   b49d6:	4b02      	ldr	r3, [pc, #8]	; (b49e0 <network_get_listen_timeout+0xc>)
   b49d8:	681b      	ldr	r3, [r3, #0]
   b49da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b49dc:	9301      	str	r3, [sp, #4]
   b49de:	bd08      	pop	{r3, pc}
   b49e0:	00030240 	.word	0x00030240

000b49e4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b49e4:	b508      	push	{r3, lr}
   b49e6:	4b02      	ldr	r3, [pc, #8]	; (b49f0 <network_is_on+0xc>)
   b49e8:	681b      	ldr	r3, [r3, #0]
   b49ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49ec:	9301      	str	r3, [sp, #4]
   b49ee:	bd08      	pop	{r3, pc}
   b49f0:	00030240 	.word	0x00030240

000b49f4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b49f4:	b508      	push	{r3, lr}
   b49f6:	4b02      	ldr	r3, [pc, #8]	; (b4a00 <network_is_off+0xc>)
   b49f8:	681b      	ldr	r3, [r3, #0]
   b49fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b49fc:	9301      	str	r3, [sp, #4]
   b49fe:	bd08      	pop	{r3, pc}
   b4a00:	00030240 	.word	0x00030240

000b4a04 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4a04:	b508      	push	{r3, lr}
   b4a06:	4b02      	ldr	r3, [pc, #8]	; (b4a10 <malloc+0xc>)
   b4a08:	681b      	ldr	r3, [r3, #0]
   b4a0a:	681b      	ldr	r3, [r3, #0]
   b4a0c:	9301      	str	r3, [sp, #4]
   b4a0e:	bd08      	pop	{r3, pc}
   b4a10:	0003021c 	.word	0x0003021c

000b4a14 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4a14:	b508      	push	{r3, lr}
   b4a16:	4b02      	ldr	r3, [pc, #8]	; (b4a20 <free+0xc>)
   b4a18:	681b      	ldr	r3, [r3, #0]
   b4a1a:	685b      	ldr	r3, [r3, #4]
   b4a1c:	9301      	str	r3, [sp, #4]
   b4a1e:	bd08      	pop	{r3, pc}
   b4a20:	0003021c 	.word	0x0003021c

000b4a24 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4a24:	b508      	push	{r3, lr}
   b4a26:	4b02      	ldr	r3, [pc, #8]	; (b4a30 <vsnprintf+0xc>)
   b4a28:	681b      	ldr	r3, [r3, #0]
   b4a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a2c:	9301      	str	r3, [sp, #4]
   b4a2e:	bd08      	pop	{r3, pc}
   b4a30:	0003021c 	.word	0x0003021c

000b4a34 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4a34:	b508      	push	{r3, lr}
   b4a36:	4b02      	ldr	r3, [pc, #8]	; (b4a40 <__assert_func+0xc>)
   b4a38:	681b      	ldr	r3, [r3, #0]
   b4a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a3c:	9301      	str	r3, [sp, #4]
   b4a3e:	bd08      	pop	{r3, pc}
   b4a40:	0003021c 	.word	0x0003021c

000b4a44 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4a44:	b508      	push	{r3, lr}
   b4a46:	4b02      	ldr	r3, [pc, #8]	; (b4a50 <newlib_impure_ptr_callback+0xc>)
   b4a48:	681b      	ldr	r3, [r3, #0]
   b4a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a4c:	9301      	str	r3, [sp, #4]
   b4a4e:	bd08      	pop	{r3, pc}
   b4a50:	0003021c 	.word	0x0003021c

000b4a54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4a54:	4802      	ldr	r0, [pc, #8]	; (b4a60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4a56:	2300      	movs	r3, #0
   b4a58:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4a5a:	f7ff bdcf 	b.w	b45fc <os_mutex_recursive_create>
   b4a5e:	bf00      	nop
   b4a60:	2003e69c 	.word	0x2003e69c

000b4a64 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4a64:	2200      	movs	r2, #0
   b4a66:	6840      	ldr	r0, [r0, #4]
   b4a68:	4611      	mov	r1, r2
   b4a6a:	f7ff bf83 	b.w	b4974 <network_ready>

000b4a6e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b4a6e:	2200      	movs	r2, #0
   b4a70:	6840      	ldr	r0, [r0, #4]
   b4a72:	4611      	mov	r1, r2
   b4a74:	f7ff bf9e 	b.w	b49b4 <network_listening>

000b4a78 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4a78:	2200      	movs	r2, #0
   b4a7a:	6840      	ldr	r0, [r0, #4]
   b4a7c:	4611      	mov	r1, r2
   b4a7e:	f7ff bfa9 	b.w	b49d4 <network_get_listen_timeout>

000b4a82 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4a82:	6840      	ldr	r0, [r0, #4]
   b4a84:	2200      	movs	r2, #0
   b4a86:	f7ff bf9d 	b.w	b49c4 <network_set_listen_timeout>

000b4a8a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4a8a:	6840      	ldr	r0, [r0, #4]
   b4a8c:	2200      	movs	r2, #0
   b4a8e:	f081 0101 	eor.w	r1, r1, #1
   b4a92:	f7ff bf87 	b.w	b49a4 <network_listen>

000b4a96 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4a96:	2300      	movs	r3, #0
   b4a98:	6840      	ldr	r0, [r0, #4]
   b4a9a:	461a      	mov	r2, r3
   b4a9c:	4619      	mov	r1, r3
   b4a9e:	f7ff bf79 	b.w	b4994 <network_off>

000b4aa2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4aa2:	2300      	movs	r3, #0
   b4aa4:	6840      	ldr	r0, [r0, #4]
   b4aa6:	461a      	mov	r2, r3
   b4aa8:	4619      	mov	r1, r3
   b4aaa:	f7ff bf6b 	b.w	b4984 <network_on>

000b4aae <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4aae:	2200      	movs	r2, #0
   b4ab0:	6840      	ldr	r0, [r0, #4]
   b4ab2:	4611      	mov	r1, r2
   b4ab4:	f7ff bf4e 	b.w	b4954 <network_connecting>

000b4ab8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4ab8:	6840      	ldr	r0, [r0, #4]
   b4aba:	2200      	movs	r2, #0
   b4abc:	2102      	movs	r1, #2
   b4abe:	f7ff bf51 	b.w	b4964 <network_disconnect>

000b4ac2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4ac2:	2300      	movs	r3, #0
   b4ac4:	6840      	ldr	r0, [r0, #4]
   b4ac6:	461a      	mov	r2, r3
   b4ac8:	f7ff bf3c 	b.w	b4944 <network_connect>

000b4acc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b4acc:	4b08      	ldr	r3, [pc, #32]	; (b4af0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b4ace:	b510      	push	{r4, lr}
   b4ad0:	2428      	movs	r4, #40	; 0x28
   b4ad2:	4622      	mov	r2, r4
   b4ad4:	4618      	mov	r0, r3
   b4ad6:	2100      	movs	r1, #0
   b4ad8:	f000 fdce 	bl	b5678 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4adc:	4b05      	ldr	r3, [pc, #20]	; (b4af4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b4ade:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b4ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4ae4:	6042      	str	r2, [r0, #4]
   b4ae6:	2204      	movs	r2, #4
   b4ae8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b4aea:	4a03      	ldr	r2, [pc, #12]	; (b4af8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b4aec:	601a      	str	r2, [r3, #0]
   b4aee:	bd10      	pop	{r4, pc}
   b4af0:	2003e6a8 	.word	0x2003e6a8
   b4af4:	2003e6a0 	.word	0x2003e6a0
   b4af8:	000b5830 	.word	0x000b5830

000b4afc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4afc:	2200      	movs	r2, #0
   b4afe:	6840      	ldr	r0, [r0, #4]
   b4b00:	4611      	mov	r1, r2
   b4b02:	f7ff bf57 	b.w	b49b4 <network_listening>

000b4b06 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4b06:	2200      	movs	r2, #0
   b4b08:	6840      	ldr	r0, [r0, #4]
   b4b0a:	4611      	mov	r1, r2
   b4b0c:	f7ff bf62 	b.w	b49d4 <network_get_listen_timeout>

000b4b10 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4b10:	6840      	ldr	r0, [r0, #4]
   b4b12:	2200      	movs	r2, #0
   b4b14:	f7ff bf56 	b.w	b49c4 <network_set_listen_timeout>

000b4b18 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4b18:	6840      	ldr	r0, [r0, #4]
   b4b1a:	2200      	movs	r2, #0
   b4b1c:	f081 0101 	eor.w	r1, r1, #1
   b4b20:	f7ff bf40 	b.w	b49a4 <network_listen>

000b4b24 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4b24:	2300      	movs	r3, #0
   b4b26:	6840      	ldr	r0, [r0, #4]
   b4b28:	461a      	mov	r2, r3
   b4b2a:	4619      	mov	r1, r3
   b4b2c:	f7ff bf32 	b.w	b4994 <network_off>

000b4b30 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4b30:	2300      	movs	r3, #0
   b4b32:	6840      	ldr	r0, [r0, #4]
   b4b34:	461a      	mov	r2, r3
   b4b36:	4619      	mov	r1, r3
   b4b38:	f7ff bf24 	b.w	b4984 <network_on>

000b4b3c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4b3c:	2200      	movs	r2, #0
   b4b3e:	6840      	ldr	r0, [r0, #4]
   b4b40:	4611      	mov	r1, r2
   b4b42:	f7ff bf17 	b.w	b4974 <network_ready>

000b4b46 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4b46:	2200      	movs	r2, #0
   b4b48:	6840      	ldr	r0, [r0, #4]
   b4b4a:	4611      	mov	r1, r2
   b4b4c:	f7ff bf02 	b.w	b4954 <network_connecting>

000b4b50 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4b50:	6840      	ldr	r0, [r0, #4]
   b4b52:	2200      	movs	r2, #0
   b4b54:	2102      	movs	r1, #2
   b4b56:	f7ff bf05 	b.w	b4964 <network_disconnect>

000b4b5a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4b5a:	2300      	movs	r3, #0
   b4b5c:	6840      	ldr	r0, [r0, #4]
   b4b5e:	461a      	mov	r2, r3
   b4b60:	f7ff bef0 	b.w	b4944 <network_connect>

000b4b64 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b4b64:	4b02      	ldr	r3, [pc, #8]	; (b4b70 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4b66:	2203      	movs	r2, #3
   b4b68:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4b6a:	4a02      	ldr	r2, [pc, #8]	; (b4b74 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4b6c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4b6e:	4770      	bx	lr
   b4b70:	2003e6d0 	.word	0x2003e6d0
   b4b74:	000b586c 	.word	0x000b586c

000b4b78 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4b78:	4770      	bx	lr

000b4b7a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4b7c:	4606      	mov	r6, r0
   b4b7e:	4615      	mov	r5, r2
   b4b80:	460c      	mov	r4, r1
   b4b82:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4b84:	42bc      	cmp	r4, r7
   b4b86:	d006      	beq.n	b4b96 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4b88:	6833      	ldr	r3, [r6, #0]
   b4b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4b8e:	689b      	ldr	r3, [r3, #8]
   b4b90:	4630      	mov	r0, r6
   b4b92:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4b94:	e7f6      	b.n	b4b84 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4b96:	4628      	mov	r0, r5
   b4b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4b9a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4b9a:	7c00      	ldrb	r0, [r0, #16]
   b4b9c:	2200      	movs	r2, #0
   b4b9e:	f7ff bd7d 	b.w	b469c <hal_i2c_write>

000b4ba2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4ba2:	7c00      	ldrb	r0, [r0, #16]
   b4ba4:	2100      	movs	r1, #0
   b4ba6:	f7ff bd81 	b.w	b46ac <hal_i2c_available>

000b4baa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4baa:	7c00      	ldrb	r0, [r0, #16]
   b4bac:	2100      	movs	r1, #0
   b4bae:	f7ff bd85 	b.w	b46bc <hal_i2c_read>

000b4bb2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4bb2:	7c00      	ldrb	r0, [r0, #16]
   b4bb4:	2100      	movs	r1, #0
   b4bb6:	f7ff bd89 	b.w	b46cc <hal_i2c_peek>

000b4bba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4bba:	7c00      	ldrb	r0, [r0, #16]
   b4bbc:	2100      	movs	r1, #0
   b4bbe:	f7ff bd8d 	b.w	b46dc <hal_i2c_flush>

000b4bc2 <_ZN7TwoWireD0Ev>:
   b4bc2:	b510      	push	{r4, lr}
   b4bc4:	2114      	movs	r1, #20
   b4bc6:	4604      	mov	r4, r0
   b4bc8:	f7ff fa65 	bl	b4096 <_ZdlPvj>
   b4bcc:	4620      	mov	r0, r4
   b4bce:	bd10      	pop	{r4, pc}

000b4bd0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4bd0:	b538      	push	{r3, r4, r5, lr}
   b4bd2:	4604      	mov	r4, r0
   b4bd4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4bda:	2200      	movs	r2, #0
   b4bdc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4be0:	4b09      	ldr	r3, [pc, #36]	; (b4c08 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4be2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4be4:	4608      	mov	r0, r1
   b4be6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4be8:	4629      	mov	r1, r5
   b4bea:	f7ff fd87 	bl	b46fc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4bee:	30bf      	adds	r0, #191	; 0xbf
   b4bf0:	d108      	bne.n	b4c04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4bf2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4bf4:	07db      	lsls	r3, r3, #31
   b4bf6:	d505      	bpl.n	b4c04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4bf8:	6868      	ldr	r0, [r5, #4]
   b4bfa:	f7ff ff0b 	bl	b4a14 <free>
    free(conf.tx_buffer);
   b4bfe:	68e8      	ldr	r0, [r5, #12]
   b4c00:	f7ff ff08 	bl	b4a14 <free>
}
   b4c04:	4620      	mov	r0, r4
   b4c06:	bd38      	pop	{r3, r4, r5, pc}
   b4c08:	000b58a8 	.word	0x000b58a8

000b4c0c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4c0c:	4770      	bx	lr

000b4c0e <_ZN9IPAddressD0Ev>:
   b4c0e:	b510      	push	{r4, lr}
   b4c10:	2118      	movs	r1, #24
   b4c12:	4604      	mov	r4, r0
   b4c14:	f7ff fa3f 	bl	b4096 <_ZdlPvj>
   b4c18:	4620      	mov	r0, r4
   b4c1a:	bd10      	pop	{r4, pc}

000b4c1c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4c1e:	7d03      	ldrb	r3, [r0, #20]
   b4c20:	2b06      	cmp	r3, #6
{
   b4c22:	b08d      	sub	sp, #52	; 0x34
   b4c24:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4c26:	f100 0704 	add.w	r7, r0, #4
   b4c2a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4c2e:	d012      	beq.n	b4c56 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4c30:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4c34:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4c38:	220a      	movs	r2, #10
   b4c3a:	4630      	mov	r0, r6
   b4c3c:	f000 f94f 	bl	b4ede <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4c40:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4c42:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4c44:	d019      	beq.n	b4c7a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4c46:	2c00      	cmp	r4, #0
   b4c48:	d0f4      	beq.n	b4c34 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4c4a:	212e      	movs	r1, #46	; 0x2e
   b4c4c:	4630      	mov	r0, r6
   b4c4e:	f000 f937 	bl	b4ec0 <_ZN5Print5printEc>
   b4c52:	4404      	add	r4, r0
   b4c54:	e7ee      	b.n	b4c34 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4c56:	232f      	movs	r3, #47	; 0x2f
   b4c58:	466a      	mov	r2, sp
   b4c5a:	4639      	mov	r1, r7
   b4c5c:	200a      	movs	r0, #10
		buf[0] = 0;
   b4c5e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4c62:	f7ff fd53 	bl	b470c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4c66:	4668      	mov	r0, sp
   b4c68:	f000 fd3c 	bl	b56e4 <strlen>
   b4c6c:	6833      	ldr	r3, [r6, #0]
   b4c6e:	4602      	mov	r2, r0
   b4c70:	68db      	ldr	r3, [r3, #12]
   b4c72:	4669      	mov	r1, sp
   b4c74:	4630      	mov	r0, r6
   b4c76:	4798      	blx	r3
   b4c78:	4604      	mov	r4, r0
    }
    return n;
}
   b4c7a:	4620      	mov	r0, r4
   b4c7c:	b00d      	add	sp, #52	; 0x34
   b4c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4c80 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4c80:	b510      	push	{r4, lr}
   b4c82:	4b05      	ldr	r3, [pc, #20]	; (b4c98 <_ZN9IPAddressC1Ev+0x18>)
   b4c84:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4c86:	2211      	movs	r2, #17
   b4c88:	f840 3b04 	str.w	r3, [r0], #4
   b4c8c:	2100      	movs	r1, #0
   b4c8e:	f000 fcf3 	bl	b5678 <memset>
}
   b4c92:	4620      	mov	r0, r4
   b4c94:	bd10      	pop	{r4, pc}
   b4c96:	bf00      	nop
   b4c98:	000b58d0 	.word	0x000b58d0

000b4c9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4c9c:	4603      	mov	r3, r0
   b4c9e:	4a07      	ldr	r2, [pc, #28]	; (b4cbc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4ca0:	b510      	push	{r4, lr}
   b4ca2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4ca6:	f101 0210 	add.w	r2, r1, #16
   b4caa:	f851 4b04 	ldr.w	r4, [r1], #4
   b4cae:	f843 4b04 	str.w	r4, [r3], #4
   b4cb2:	4291      	cmp	r1, r2
   b4cb4:	d1f9      	bne.n	b4caa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4cb6:	780a      	ldrb	r2, [r1, #0]
   b4cb8:	701a      	strb	r2, [r3, #0]
}
   b4cba:	bd10      	pop	{r4, pc}
   b4cbc:	000b58d0 	.word	0x000b58d0

000b4cc0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4cc0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4cc2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4cc6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4cca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4cce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4cd2:	2304      	movs	r3, #4
   b4cd4:	6041      	str	r1, [r0, #4]
   b4cd6:	7503      	strb	r3, [r0, #20]
}
   b4cd8:	bd10      	pop	{r4, pc}
	...

000b4cdc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4cdc:	b507      	push	{r0, r1, r2, lr}
   b4cde:	4b06      	ldr	r3, [pc, #24]	; (b4cf8 <_ZN9IPAddressC1EPKh+0x1c>)
   b4ce0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4ce2:	78cb      	ldrb	r3, [r1, #3]
   b4ce4:	9300      	str	r3, [sp, #0]
   b4ce6:	788b      	ldrb	r3, [r1, #2]
   b4ce8:	784a      	ldrb	r2, [r1, #1]
   b4cea:	7809      	ldrb	r1, [r1, #0]
   b4cec:	f7ff ffe8 	bl	b4cc0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4cf0:	b003      	add	sp, #12
   b4cf2:	f85d fb04 	ldr.w	pc, [sp], #4
   b4cf6:	bf00      	nop
   b4cf8:	000b58d0 	.word	0x000b58d0

000b4cfc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4cfc:	4b01      	ldr	r3, [pc, #4]	; (b4d04 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4cfe:	4a02      	ldr	r2, [pc, #8]	; (b4d08 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4d00:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4d02:	4770      	bx	lr
   b4d04:	2003e6d8 	.word	0x2003e6d8
   b4d08:	000b58dc 	.word	0x000b58dc

000b4d0c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4d0c:	2300      	movs	r3, #0
   b4d0e:	6840      	ldr	r0, [r0, #4]
   b4d10:	461a      	mov	r2, r3
   b4d12:	f7ff be17 	b.w	b4944 <network_connect>

000b4d16 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4d16:	6840      	ldr	r0, [r0, #4]
   b4d18:	2200      	movs	r2, #0
   b4d1a:	2102      	movs	r1, #2
   b4d1c:	f7ff be22 	b.w	b4964 <network_disconnect>

000b4d20 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4d20:	2200      	movs	r2, #0
   b4d22:	6840      	ldr	r0, [r0, #4]
   b4d24:	4611      	mov	r1, r2
   b4d26:	f7ff be15 	b.w	b4954 <network_connecting>

000b4d2a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4d2a:	2200      	movs	r2, #0
   b4d2c:	6840      	ldr	r0, [r0, #4]
   b4d2e:	4611      	mov	r1, r2
   b4d30:	f7ff be20 	b.w	b4974 <network_ready>

000b4d34 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4d34:	2300      	movs	r3, #0
   b4d36:	6840      	ldr	r0, [r0, #4]
   b4d38:	461a      	mov	r2, r3
   b4d3a:	4619      	mov	r1, r3
   b4d3c:	f7ff be22 	b.w	b4984 <network_on>

000b4d40 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4d40:	2300      	movs	r3, #0
   b4d42:	6840      	ldr	r0, [r0, #4]
   b4d44:	461a      	mov	r2, r3
   b4d46:	4619      	mov	r1, r3
   b4d48:	f7ff be24 	b.w	b4994 <network_off>

000b4d4c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4d4c:	6840      	ldr	r0, [r0, #4]
   b4d4e:	2100      	movs	r1, #0
   b4d50:	f7ff be48 	b.w	b49e4 <network_is_on>

000b4d54 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4d54:	6840      	ldr	r0, [r0, #4]
   b4d56:	2100      	movs	r1, #0
   b4d58:	f7ff be4c 	b.w	b49f4 <network_is_off>

000b4d5c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4d5c:	6840      	ldr	r0, [r0, #4]
   b4d5e:	2200      	movs	r2, #0
   b4d60:	f081 0101 	eor.w	r1, r1, #1
   b4d64:	f7ff be1e 	b.w	b49a4 <network_listen>

000b4d68 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4d68:	6840      	ldr	r0, [r0, #4]
   b4d6a:	2200      	movs	r2, #0
   b4d6c:	f7ff be2a 	b.w	b49c4 <network_set_listen_timeout>

000b4d70 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4d70:	2200      	movs	r2, #0
   b4d72:	6840      	ldr	r0, [r0, #4]
   b4d74:	4611      	mov	r1, r2
   b4d76:	f7ff be2d 	b.w	b49d4 <network_get_listen_timeout>

000b4d7a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4d7a:	2200      	movs	r2, #0
   b4d7c:	6840      	ldr	r0, [r0, #4]
   b4d7e:	4611      	mov	r1, r2
   b4d80:	f7ff be18 	b.w	b49b4 <network_listening>

000b4d84 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4d88:	b095      	sub	sp, #84	; 0x54
   b4d8a:	4614      	mov	r4, r2
   b4d8c:	460d      	mov	r5, r1
   b4d8e:	4607      	mov	r7, r0
    IPAddress addr;
   b4d90:	f7ff ff76 	bl	b4c80 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4d94:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4d96:	221c      	movs	r2, #28
   b4d98:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4d9a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4d9c:	f000 fc6c 	bl	b5678 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4da0:	2340      	movs	r3, #64	; 0x40
   b4da2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4da4:	4620      	mov	r0, r4
   b4da6:	466b      	mov	r3, sp
   b4da8:	aa0c      	add	r2, sp, #48	; 0x30
   b4daa:	2100      	movs	r1, #0
   b4dac:	f7ff fcbe 	bl	b472c <netdb_getaddrinfo>
    if (!r) {
   b4db0:	4604      	mov	r4, r0
   b4db2:	2800      	cmp	r0, #0
   b4db4:	d14b      	bne.n	b4e4e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4db6:	4602      	mov	r2, r0
   b4db8:	2101      	movs	r1, #1
   b4dba:	6868      	ldr	r0, [r5, #4]
   b4dbc:	f7ff fdda 	bl	b4974 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4dc0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4dc2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4dc4:	4622      	mov	r2, r4
   b4dc6:	6868      	ldr	r0, [r5, #4]
   b4dc8:	f7ff fdd4 	bl	b4974 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4dcc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4dce:	4681      	mov	r9, r0
        bool ok = false;
   b4dd0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4dd2:	2e00      	cmp	r6, #0
   b4dd4:	d03b      	beq.n	b4e4e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4dd6:	2900      	cmp	r1, #0
   b4dd8:	d139      	bne.n	b4e4e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4dda:	6873      	ldr	r3, [r6, #4]
   b4ddc:	2b02      	cmp	r3, #2
   b4dde:	d003      	beq.n	b4de8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4de0:	2b0a      	cmp	r3, #10
   b4de2:	d011      	beq.n	b4e08 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4de4:	69f6      	ldr	r6, [r6, #28]
   b4de6:	e7f4      	b.n	b4dd2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4de8:	f1b8 0f00 	cmp.w	r8, #0
   b4dec:	d0fa      	beq.n	b4de4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4dee:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4df0:	a806      	add	r0, sp, #24
   b4df2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4df4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4df6:	f7ff ff71 	bl	b4cdc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4dfc:	1d3c      	adds	r4, r7, #4
   b4dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4e00:	682b      	ldr	r3, [r5, #0]
   b4e02:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4e04:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4e06:	e7ed      	b.n	b4de4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4e08:	f1b9 0f00 	cmp.w	r9, #0
   b4e0c:	d0ea      	beq.n	b4de4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4e0e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4e10:	2210      	movs	r2, #16
   b4e12:	a801      	add	r0, sp, #4
   b4e14:	f000 fc30 	bl	b5678 <memset>
                    a.v = 6;
   b4e18:	2306      	movs	r3, #6
   b4e1a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4e1e:	ad01      	add	r5, sp, #4
   b4e20:	f104 0308 	add.w	r3, r4, #8
   b4e24:	3418      	adds	r4, #24
   b4e26:	6818      	ldr	r0, [r3, #0]
   b4e28:	6859      	ldr	r1, [r3, #4]
   b4e2a:	462a      	mov	r2, r5
   b4e2c:	c203      	stmia	r2!, {r0, r1}
   b4e2e:	3308      	adds	r3, #8
   b4e30:	42a3      	cmp	r3, r4
   b4e32:	4615      	mov	r5, r2
   b4e34:	d1f7      	bne.n	b4e26 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4e36:	a901      	add	r1, sp, #4
   b4e38:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4e3a:	ad07      	add	r5, sp, #28
   b4e3c:	f7ff ff2e 	bl	b4c9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4e42:	1d3c      	adds	r4, r7, #4
   b4e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4e46:	682b      	ldr	r3, [r5, #0]
   b4e48:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4e4a:	4649      	mov	r1, r9
   b4e4c:	e7ca      	b.n	b4de4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4e4e:	9800      	ldr	r0, [sp, #0]
   b4e50:	f7ff fc64 	bl	b471c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4e54:	4638      	mov	r0, r7
   b4e56:	b015      	add	sp, #84	; 0x54
   b4e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4e5c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4e5c:	4b02      	ldr	r3, [pc, #8]	; (b4e68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4e5e:	4a03      	ldr	r2, [pc, #12]	; (b4e6c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4e60:	601a      	str	r2, [r3, #0]
   b4e62:	2200      	movs	r2, #0
   b4e64:	605a      	str	r2, [r3, #4]

} // spark
   b4e66:	4770      	bx	lr
   b4e68:	2003e6dc 	.word	0x2003e6dc
   b4e6c:	000b58e8 	.word	0x000b58e8

000b4e70 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e72:	4606      	mov	r6, r0
   b4e74:	460d      	mov	r5, r1
  size_t n = 0;
   b4e76:	188f      	adds	r7, r1, r2
   b4e78:	2400      	movs	r4, #0
  while (size--) {
   b4e7a:	42bd      	cmp	r5, r7
   b4e7c:	d00c      	beq.n	b4e98 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4e7e:	6833      	ldr	r3, [r6, #0]
   b4e80:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4e84:	689b      	ldr	r3, [r3, #8]
   b4e86:	4630      	mov	r0, r6
   b4e88:	4798      	blx	r3
     if (chunk>=0)
   b4e8a:	1e03      	subs	r3, r0, #0
   b4e8c:	db01      	blt.n	b4e92 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4e8e:	441c      	add	r4, r3
  while (size--) {
   b4e90:	e7f3      	b.n	b4e7a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4e92:	2c00      	cmp	r4, #0
   b4e94:	bf08      	it	eq
   b4e96:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4e98:	4620      	mov	r0, r4
   b4e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e9c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4e9c:	b513      	push	{r0, r1, r4, lr}
   b4e9e:	4604      	mov	r4, r0
    }
   b4ea0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4ea2:	b159      	cbz	r1, b4ebc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4ea4:	9101      	str	r1, [sp, #4]
   b4ea6:	f000 fc1d 	bl	b56e4 <strlen>
   b4eaa:	6823      	ldr	r3, [r4, #0]
   b4eac:	9901      	ldr	r1, [sp, #4]
   b4eae:	68db      	ldr	r3, [r3, #12]
   b4eb0:	4602      	mov	r2, r0
   b4eb2:	4620      	mov	r0, r4
    }
   b4eb4:	b002      	add	sp, #8
   b4eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4eba:	4718      	bx	r3
    }
   b4ebc:	b002      	add	sp, #8
   b4ebe:	bd10      	pop	{r4, pc}

000b4ec0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4ec0:	6803      	ldr	r3, [r0, #0]
   b4ec2:	689b      	ldr	r3, [r3, #8]
   b4ec4:	4718      	bx	r3

000b4ec6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4ec6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4ec8:	210d      	movs	r1, #13
{
   b4eca:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4ecc:	f7ff fff8 	bl	b4ec0 <_ZN5Print5printEc>
  n += print('\n');
   b4ed0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4ed2:	4604      	mov	r4, r0
  n += print('\n');
   b4ed4:	4628      	mov	r0, r5
   b4ed6:	f7ff fff3 	bl	b4ec0 <_ZN5Print5printEc>
  return n;
}
   b4eda:	4420      	add	r0, r4
   b4edc:	bd38      	pop	{r3, r4, r5, pc}

000b4ede <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4ede:	b530      	push	{r4, r5, lr}
   b4ee0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4ee2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4ee4:	2a01      	cmp	r2, #1
  *str = '\0';
   b4ee6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4eea:	bf98      	it	ls
   b4eec:	220a      	movls	r2, #10
   b4eee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4ef0:	460d      	mov	r5, r1
   b4ef2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4ef6:	fb01 5312 	mls	r3, r1, r2, r5
   b4efa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4efe:	2b09      	cmp	r3, #9
   b4f00:	bf94      	ite	ls
   b4f02:	3330      	addls	r3, #48	; 0x30
   b4f04:	3337      	addhi	r3, #55	; 0x37
   b4f06:	b2db      	uxtb	r3, r3
  } while(n);
   b4f08:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4f0a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4f0e:	d9ef      	bls.n	b4ef0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4f10:	4621      	mov	r1, r4
   b4f12:	f7ff ffc3 	bl	b4e9c <_ZN5Print5writeEPKc>
}
   b4f16:	b00b      	add	sp, #44	; 0x2c
   b4f18:	bd30      	pop	{r4, r5, pc}

000b4f1a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4f1e:	b086      	sub	sp, #24
   b4f20:	af00      	add	r7, sp, #0
   b4f22:	4605      	mov	r5, r0
   b4f24:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4f26:	1d38      	adds	r0, r7, #4
   b4f28:	2114      	movs	r1, #20
{
   b4f2a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4f2c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4f2e:	f7ff fd79 	bl	b4a24 <vsnprintf>

    if (n<bufsize)
   b4f32:	2813      	cmp	r0, #19
   b4f34:	d80e      	bhi.n	b4f54 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4f36:	1d39      	adds	r1, r7, #4
   b4f38:	4628      	mov	r0, r5
   b4f3a:	f7ff ffaf 	bl	b4e9c <_ZN5Print5writeEPKc>
   b4f3e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4f40:	b11e      	cbz	r6, b4f4a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4f42:	4628      	mov	r0, r5
   b4f44:	f7ff ffbf 	bl	b4ec6 <_ZN5Print7printlnEv>
   b4f48:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4f4a:	4620      	mov	r0, r4
   b4f4c:	3718      	adds	r7, #24
   b4f4e:	46bd      	mov	sp, r7
   b4f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4f54:	f100 0308 	add.w	r3, r0, #8
   b4f58:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4f5c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4f5e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4f62:	4622      	mov	r2, r4
   b4f64:	1c41      	adds	r1, r0, #1
   b4f66:	683b      	ldr	r3, [r7, #0]
   b4f68:	4668      	mov	r0, sp
   b4f6a:	f7ff fd5b 	bl	b4a24 <vsnprintf>
  return write(str);
   b4f6e:	4669      	mov	r1, sp
   b4f70:	4628      	mov	r0, r5
   b4f72:	f7ff ff93 	bl	b4e9c <_ZN5Print5writeEPKc>
   b4f76:	4604      	mov	r4, r0
   b4f78:	46c5      	mov	sp, r8
   b4f7a:	e7e1      	b.n	b4f40 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4f7c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4f7c:	4b01      	ldr	r3, [pc, #4]	; (b4f84 <_GLOBAL__sub_I_RGB+0x8>)
   b4f7e:	2200      	movs	r2, #0
   b4f80:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4f82:	4770      	bx	lr
   b4f84:	2003e6e4 	.word	0x2003e6e4

000b4f88 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b4f88:	2100      	movs	r1, #0
   b4f8a:	f7ff bc27 	b.w	b47dc <hal_spi_release>

000b4f8e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b4f8e:	2100      	movs	r1, #0
   b4f90:	f7ff bc1c 	b.w	b47cc <hal_spi_acquire>

000b4f94 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4f94:	b510      	push	{r4, lr}
   b4f96:	4604      	mov	r4, r0
   b4f98:	4608      	mov	r0, r1
{
    _spi = spi;
   b4f9a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4f9c:	f7ff fbfe 	bl	b479c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4fa0:	2300      	movs	r3, #0
   b4fa2:	6063      	str	r3, [r4, #4]
}
   b4fa4:	4620      	mov	r0, r4
   b4fa6:	bd10      	pop	{r4, pc}

000b4fa8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b4fa8:	b513      	push	{r0, r1, r4, lr}
   b4faa:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b4fac:	7800      	ldrb	r0, [r0, #0]
   b4fae:	f7ff ffee 	bl	b4f8e <_ZN8SPIClass4lockEv.isra.0>
   b4fb2:	b958      	cbnz	r0, b4fcc <_ZN8SPIClass5beginEv+0x24>
   b4fb4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b4fb6:	9001      	str	r0, [sp, #4]
   b4fb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b4fbc:	f7ff fbbe 	bl	b473c <hal_spi_begin>
        unlock();
   b4fc0:	9801      	ldr	r0, [sp, #4]
    }
}
   b4fc2:	b002      	add	sp, #8
   b4fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4fc8:	f7ff bfde 	b.w	b4f88 <_ZN8SPIClass6unlockEv.isra.0>
   b4fcc:	b002      	add	sp, #8
   b4fce:	bd10      	pop	{r4, pc}

000b4fd0 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   b4fd0:	b513      	push	{r0, r1, r4, lr}
   b4fd2:	4604      	mov	r4, r0
    if (!lock())
   b4fd4:	7800      	ldrb	r0, [r0, #0]
   b4fd6:	f7ff ffda 	bl	b4f8e <_ZN8SPIClass4lockEv.isra.0>
   b4fda:	b948      	cbnz	r0, b4ff0 <_ZN8SPIClass3endEv+0x20>
   b4fdc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   b4fde:	9001      	str	r0, [sp, #4]
   b4fe0:	f7ff fbb4 	bl	b474c <hal_spi_end>
        unlock();
   b4fe4:	9801      	ldr	r0, [sp, #4]
    }
}
   b4fe6:	b002      	add	sp, #8
   b4fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4fec:	f7ff bfcc 	b.w	b4f88 <_ZN8SPIClass6unlockEv.isra.0>
   b4ff0:	b002      	add	sp, #8
   b4ff2:	bd10      	pop	{r4, pc}

000b4ff4 <_ZN8SPIClass11setBitOrderEh>:

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b4ff4:	b513      	push	{r0, r1, r4, lr}
   b4ff6:	4604      	mov	r4, r0
    if (!lock())
   b4ff8:	7800      	ldrb	r0, [r0, #0]
{
   b4ffa:	9101      	str	r1, [sp, #4]
    if (!lock())
   b4ffc:	f7ff ffc7 	bl	b4f8e <_ZN8SPIClass4lockEv.isra.0>
   b5000:	9901      	ldr	r1, [sp, #4]
   b5002:	b948      	cbnz	r0, b5018 <_ZN8SPIClass11setBitOrderEh+0x24>
   b5004:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b5006:	9001      	str	r0, [sp, #4]
   b5008:	f7ff fba8 	bl	b475c <hal_spi_set_bit_order>
        unlock();
   b500c:	9801      	ldr	r0, [sp, #4]
    }
}
   b500e:	b002      	add	sp, #8
   b5010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5014:	f7ff bfb8 	b.w	b4f88 <_ZN8SPIClass6unlockEv.isra.0>
   b5018:	b002      	add	sp, #8
   b501a:	bd10      	pop	{r4, pc}

000b501c <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b501c:	b513      	push	{r0, r1, r4, lr}
   b501e:	4604      	mov	r4, r0
    if (!lock())
   b5020:	7800      	ldrb	r0, [r0, #0]
{
   b5022:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5024:	f7ff ffb3 	bl	b4f8e <_ZN8SPIClass4lockEv.isra.0>
   b5028:	9901      	ldr	r1, [sp, #4]
   b502a:	b948      	cbnz	r0, b5040 <_ZN8SPIClass11setDataModeEh+0x24>
   b502c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b502e:	9001      	str	r0, [sp, #4]
   b5030:	f7ff fb9c 	bl	b476c <hal_spi_set_data_mode>
        unlock();
   b5034:	9801      	ldr	r0, [sp, #4]
    }
}
   b5036:	b002      	add	sp, #8
   b5038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b503c:	f7ff bfa4 	b.w	b4f88 <_ZN8SPIClass6unlockEv.isra.0>
   b5040:	b002      	add	sp, #8
   b5042:	bd10      	pop	{r4, pc}

000b5044 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5044:	0840      	lsrs	r0, r0, #1
{
   b5046:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5048:	6018      	str	r0, [r3, #0]
   b504a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b504c:	6818      	ldr	r0, [r3, #0]
   b504e:	4288      	cmp	r0, r1
   b5050:	b2e5      	uxtb	r5, r4
   b5052:	d906      	bls.n	b5062 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5054:	3401      	adds	r4, #1
   b5056:	2c08      	cmp	r4, #8
   b5058:	d002      	beq.n	b5060 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b505a:	0840      	lsrs	r0, r0, #1
   b505c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b505e:	e7f5      	b.n	b504c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5060:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5062:	4b02      	ldr	r3, [pc, #8]	; (b506c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5064:	5d5b      	ldrb	r3, [r3, r5]
   b5066:	7013      	strb	r3, [r2, #0]
}
   b5068:	bd30      	pop	{r4, r5, pc}
   b506a:	bf00      	nop
   b506c:	000b591c 	.word	0x000b591c

000b5070 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b5070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5074:	b088      	sub	sp, #32
    unsigned clock = 0;
   b5076:	2300      	movs	r3, #0
{
   b5078:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b507a:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b507c:	9302      	str	r3, [sp, #8]
{
   b507e:	460e      	mov	r6, r1
   b5080:	4617      	mov	r7, r2
    if (!lock())
   b5082:	f7ff ff84 	bl	b4f8e <_ZN8SPIClass4lockEv.isra.0>
   b5086:	4605      	mov	r5, r0
   b5088:	bb00      	cbnz	r0, b50cc <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b508a:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b508e:	4601      	mov	r1, r0
   b5090:	2214      	movs	r2, #20
   b5092:	a803      	add	r0, sp, #12
   b5094:	f000 faf0 	bl	b5678 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5098:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b509a:	462a      	mov	r2, r5
   b509c:	a903      	add	r1, sp, #12
   b509e:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b50a0:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b50a4:	f7ff fb8a 	bl	b47bc <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b50a8:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b50aa:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b50ae:	ab02      	add	r3, sp, #8
   b50b0:	f10d 0207 	add.w	r2, sp, #7
   b50b4:	fb07 f106 	mul.w	r1, r7, r6
   b50b8:	f7ff ffc4 	bl	b5044 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b50bc:	7820      	ldrb	r0, [r4, #0]
   b50be:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b50c2:	f7ff fb5b 	bl	b477c <hal_spi_set_clock_divider>
        unlock();
   b50c6:	7820      	ldrb	r0, [r4, #0]
   b50c8:	f7ff ff5e 	bl	b4f88 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b50cc:	9802      	ldr	r0, [sp, #8]
   b50ce:	b008      	add	sp, #32
   b50d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b50d4 <_ZN8SPIClass15setClockDividerEh>:
{
   b50d4:	b538      	push	{r3, r4, r5, lr}
   b50d6:	4604      	mov	r4, r0
    if (!lock())
   b50d8:	7800      	ldrb	r0, [r0, #0]
{
   b50da:	460d      	mov	r5, r1
    if (!lock())
   b50dc:	f7ff ff57 	bl	b4f8e <_ZN8SPIClass4lockEv.isra.0>
   b50e0:	4603      	mov	r3, r0
   b50e2:	b9d0      	cbnz	r0, b511a <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b50e4:	6861      	ldr	r1, [r4, #4]
   b50e6:	b199      	cbz	r1, b5110 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b50e8:	4a0c      	ldr	r2, [pc, #48]	; (b511c <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b50ea:	f812 0b01 	ldrb.w	r0, [r2], #1
   b50ee:	4285      	cmp	r5, r0
   b50f0:	d002      	beq.n	b50f8 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b50f2:	3301      	adds	r3, #1
   b50f4:	2b08      	cmp	r3, #8
   b50f6:	d1f8      	bne.n	b50ea <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b50f8:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b50fa:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b50fc:	2201      	movs	r2, #1
   b50fe:	40d9      	lsrs	r1, r3
   b5100:	4620      	mov	r0, r4
   b5102:	f7ff ffb5 	bl	b5070 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b5106:	7820      	ldrb	r0, [r4, #0]
}
   b5108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b510c:	f7ff bf3c 	b.w	b4f88 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b5110:	7820      	ldrb	r0, [r4, #0]
   b5112:	4629      	mov	r1, r5
   b5114:	f7ff fb32 	bl	b477c <hal_spi_set_clock_divider>
   b5118:	e7f5      	b.n	b5106 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b511a:	bd38      	pop	{r3, r4, r5, pc}
   b511c:	000b591c 	.word	0x000b591c

000b5120 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b5120:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5122:	7800      	ldrb	r0, [r0, #0]
   b5124:	f7ff fb32 	bl	b478c <hal_spi_transfer>
}
   b5128:	b2c0      	uxtb	r0, r0
   b512a:	bd08      	pop	{r3, pc}

000b512c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b512c:	4b05      	ldr	r3, [pc, #20]	; (b5144 <_GLOBAL__sub_I_System+0x18>)
   b512e:	2202      	movs	r2, #2
   b5130:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5132:	4b05      	ldr	r3, [pc, #20]	; (b5148 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5134:	4a05      	ldr	r2, [pc, #20]	; (b514c <_GLOBAL__sub_I_System+0x20>)
   b5136:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5138:	2000      	movs	r0, #0
   b513a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b513e:	f7ff bbd5 	b.w	b48ec <set_system_mode>
   b5142:	bf00      	nop
   b5144:	2003e700 	.word	0x2003e700
   b5148:	2003e6f4 	.word	0x2003e6f4
   b514c:	ffff0000 	.word	0xffff0000

000b5150 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5150:	4b02      	ldr	r3, [pc, #8]	; (b515c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5152:	681a      	ldr	r2, [r3, #0]
   b5154:	4b02      	ldr	r3, [pc, #8]	; (b5160 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5156:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5158:	4770      	bx	lr
   b515a:	bf00      	nop
   b515c:	2003e5d4 	.word	0x2003e5d4
   b5160:	2003e704 	.word	0x2003e704

000b5164 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5164:	4770      	bx	lr

000b5166 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5166:	7441      	strb	r1, [r0, #17]
}
   b5168:	4770      	bx	lr

000b516a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b516a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b516c:	7c00      	ldrb	r0, [r0, #16]
   b516e:	f7ff fb6d 	bl	b484c <hal_usart_available_data_for_write>
}
   b5172:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5176:	bd08      	pop	{r3, pc}

000b5178 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5178:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b517a:	7c00      	ldrb	r0, [r0, #16]
   b517c:	f7ff fb3e 	bl	b47fc <hal_usart_available>
}
   b5180:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5184:	bd08      	pop	{r3, pc}

000b5186 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5186:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5188:	7c00      	ldrb	r0, [r0, #16]
   b518a:	f7ff fb47 	bl	b481c <hal_usart_peek>
}
   b518e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5192:	bd08      	pop	{r3, pc}

000b5194 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5194:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5196:	7c00      	ldrb	r0, [r0, #16]
   b5198:	f7ff fb38 	bl	b480c <hal_usart_read>
}
   b519c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b51a0:	bd08      	pop	{r3, pc}

000b51a2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b51a2:	7c00      	ldrb	r0, [r0, #16]
   b51a4:	f7ff bb42 	b.w	b482c <hal_usart_flush>

000b51a8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b51a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b51aa:	7c45      	ldrb	r5, [r0, #17]
{
   b51ac:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b51ae:	b12d      	cbz	r5, b51bc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b51b0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b51b2:	b003      	add	sp, #12
   b51b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b51b8:	f7ff bb18 	b.w	b47ec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b51bc:	7c00      	ldrb	r0, [r0, #16]
   b51be:	9101      	str	r1, [sp, #4]
   b51c0:	f7ff fb44 	bl	b484c <hal_usart_available_data_for_write>
   b51c4:	2800      	cmp	r0, #0
   b51c6:	9901      	ldr	r1, [sp, #4]
   b51c8:	dcf2      	bgt.n	b51b0 <_ZN11USARTSerial5writeEh+0x8>
}
   b51ca:	4628      	mov	r0, r5
   b51cc:	b003      	add	sp, #12
   b51ce:	bd30      	pop	{r4, r5, pc}

000b51d0 <_ZN11USARTSerialD0Ev>:
   b51d0:	b510      	push	{r4, lr}
   b51d2:	2114      	movs	r1, #20
   b51d4:	4604      	mov	r4, r0
   b51d6:	f7fe ff5e 	bl	b4096 <_ZdlPvj>
   b51da:	4620      	mov	r0, r4
   b51dc:	bd10      	pop	{r4, pc}
	...

000b51e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b51e0:	b510      	push	{r4, lr}
   b51e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b51e6:	4604      	mov	r4, r0
   b51e8:	4608      	mov	r0, r1
   b51ea:	4611      	mov	r1, r2
   b51ec:	2200      	movs	r2, #0
   b51ee:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b51f2:	4b04      	ldr	r3, [pc, #16]	; (b5204 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b51f4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b51f6:	2301      	movs	r3, #1
  _serial = serial;
   b51f8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b51fa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b51fc:	f7ff fb2e 	bl	b485c <hal_usart_init_ex>
}
   b5200:	4620      	mov	r0, r4
   b5202:	bd10      	pop	{r4, pc}
   b5204:	000b5948 	.word	0x000b5948

000b5208 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5208:	7441      	strb	r1, [r0, #17]
}
   b520a:	4770      	bx	lr

000b520c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b520c:	4770      	bx	lr

000b520e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b520e:	4770      	bx	lr

000b5210 <_ZN9USBSerial4readEv>:
{
   b5210:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5212:	2100      	movs	r1, #0
   b5214:	7c00      	ldrb	r0, [r0, #16]
   b5216:	f7ff fb49 	bl	b48ac <HAL_USB_USART_Receive_Data>
}
   b521a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b521e:	bd08      	pop	{r3, pc}

000b5220 <_ZN9USBSerial4peekEv>:
{
   b5220:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5222:	2101      	movs	r1, #1
   b5224:	7c00      	ldrb	r0, [r0, #16]
   b5226:	f7ff fb41 	bl	b48ac <HAL_USB_USART_Receive_Data>
}
   b522a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b522e:	bd08      	pop	{r3, pc}

000b5230 <_ZN9USBSerial17availableForWriteEv>:
{
   b5230:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5232:	7c00      	ldrb	r0, [r0, #16]
   b5234:	f7ff fb32 	bl	b489c <HAL_USB_USART_Available_Data_For_Write>
}
   b5238:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b523c:	bd08      	pop	{r3, pc}

000b523e <_ZN9USBSerial9availableEv>:
{
   b523e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5240:	7c00      	ldrb	r0, [r0, #16]
   b5242:	f7ff fb23 	bl	b488c <HAL_USB_USART_Available_Data>
}
   b5246:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b524a:	bd08      	pop	{r3, pc}

000b524c <_ZN9USBSerial5writeEh>:
{
   b524c:	b513      	push	{r0, r1, r4, lr}
   b524e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5250:	7c00      	ldrb	r0, [r0, #16]
{
   b5252:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5254:	f7ff fb22 	bl	b489c <HAL_USB_USART_Available_Data_For_Write>
   b5258:	2800      	cmp	r0, #0
   b525a:	9901      	ldr	r1, [sp, #4]
   b525c:	dc01      	bgt.n	b5262 <_ZN9USBSerial5writeEh+0x16>
   b525e:	7c60      	ldrb	r0, [r4, #17]
   b5260:	b120      	cbz	r0, b526c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5262:	7c20      	ldrb	r0, [r4, #16]
   b5264:	f7ff fb2a 	bl	b48bc <HAL_USB_USART_Send_Data>
   b5268:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b526c:	b002      	add	sp, #8
   b526e:	bd10      	pop	{r4, pc}

000b5270 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5270:	7c00      	ldrb	r0, [r0, #16]
   b5272:	f7ff bb2b 	b.w	b48cc <HAL_USB_USART_Flush_Data>

000b5276 <_ZN9USBSerialD0Ev>:
   b5276:	b510      	push	{r4, lr}
   b5278:	2114      	movs	r1, #20
   b527a:	4604      	mov	r4, r0
   b527c:	f7fe ff0b 	bl	b4096 <_ZdlPvj>
   b5280:	4620      	mov	r0, r4
   b5282:	bd10      	pop	{r4, pc}

000b5284 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5284:	b510      	push	{r4, lr}
   b5286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b528a:	4604      	mov	r4, r0
   b528c:	4608      	mov	r0, r1
   b528e:	2100      	movs	r1, #0
   b5290:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5294:	4b04      	ldr	r3, [pc, #16]	; (b52a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5296:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5298:	2301      	movs	r3, #1
  _serial = serial;
   b529a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b529c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b529e:	4611      	mov	r1, r2
   b52a0:	f7ff fae4 	bl	b486c <HAL_USB_USART_Init>
}
   b52a4:	4620      	mov	r0, r4
   b52a6:	bd10      	pop	{r4, pc}
   b52a8:	000b5978 	.word	0x000b5978

000b52ac <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b52ac:	7c00      	ldrb	r0, [r0, #16]
   b52ae:	2200      	movs	r2, #0
   b52b0:	f7ff bae4 	b.w	b487c <HAL_USB_USART_Begin>

000b52b4 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b52b4:	7c00      	ldrb	r0, [r0, #16]
   b52b6:	f7ff bb11 	b.w	b48dc <HAL_USB_USART_Is_Connected>

000b52ba <_Z19acquireSerialBufferv>:
{
   b52ba:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b52bc:	2214      	movs	r2, #20
{
   b52be:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b52c0:	2100      	movs	r1, #0
   b52c2:	f000 f9d9 	bl	b5678 <memset>
}
   b52c6:	4620      	mov	r0, r4
   b52c8:	bd10      	pop	{r4, pc}
	...

000b52cc <_Z16_fetch_usbserialv>:
{
   b52cc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b52ce:	4c0f      	ldr	r4, [pc, #60]	; (b530c <_Z16_fetch_usbserialv+0x40>)
{
   b52d0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b52d2:	a803      	add	r0, sp, #12
   b52d4:	f7ff fff1 	bl	b52ba <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b52d8:	7821      	ldrb	r1, [r4, #0]
   b52da:	f3bf 8f5b 	dmb	ish
   b52de:	f011 0101 	ands.w	r1, r1, #1
   b52e2:	d10f      	bne.n	b5304 <_Z16_fetch_usbserialv+0x38>
   b52e4:	4620      	mov	r0, r4
   b52e6:	9101      	str	r1, [sp, #4]
   b52e8:	f7fe fed7 	bl	b409a <__cxa_guard_acquire>
   b52ec:	9901      	ldr	r1, [sp, #4]
   b52ee:	b148      	cbz	r0, b5304 <_Z16_fetch_usbserialv+0x38>
   b52f0:	aa03      	add	r2, sp, #12
   b52f2:	4807      	ldr	r0, [pc, #28]	; (b5310 <_Z16_fetch_usbserialv+0x44>)
   b52f4:	f7ff ffc6 	bl	b5284 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b52f8:	4620      	mov	r0, r4
   b52fa:	f7fe fed3 	bl	b40a4 <__cxa_guard_release>
   b52fe:	4805      	ldr	r0, [pc, #20]	; (b5314 <_Z16_fetch_usbserialv+0x48>)
   b5300:	f000 f9a6 	bl	b5650 <atexit>
	return _usbserial;
}
   b5304:	4802      	ldr	r0, [pc, #8]	; (b5310 <_Z16_fetch_usbserialv+0x44>)
   b5306:	b008      	add	sp, #32
   b5308:	bd10      	pop	{r4, pc}
   b530a:	bf00      	nop
   b530c:	2003e708 	.word	0x2003e708
   b5310:	2003e70c 	.word	0x2003e70c
   b5314:	000b520d 	.word	0x000b520d

000b5318 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5318:	4b01      	ldr	r3, [pc, #4]	; (b5320 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b531a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b531c:	4770      	bx	lr
   b531e:	bf00      	nop
   b5320:	2003e5d8 	.word	0x2003e5d8

000b5324 <serialEventRun>:
{
   b5324:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5326:	4b0b      	ldr	r3, [pc, #44]	; (b5354 <serialEventRun+0x30>)
   b5328:	b143      	cbz	r3, b533c <serialEventRun+0x18>
   b532a:	f7ff ffcf 	bl	b52cc <_Z16_fetch_usbserialv>
   b532e:	6803      	ldr	r3, [r0, #0]
   b5330:	691b      	ldr	r3, [r3, #16]
   b5332:	4798      	blx	r3
   b5334:	2800      	cmp	r0, #0
   b5336:	dd01      	ble.n	b533c <serialEventRun+0x18>
        serialEvent();
   b5338:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b533c:	4b06      	ldr	r3, [pc, #24]	; (b5358 <serialEventRun+0x34>)
   b533e:	b143      	cbz	r3, b5352 <serialEventRun+0x2e>
   b5340:	f000 f960 	bl	b5604 <_Z22__fetch_global_Serial1v>
   b5344:	6803      	ldr	r3, [r0, #0]
   b5346:	691b      	ldr	r3, [r3, #16]
   b5348:	4798      	blx	r3
   b534a:	2800      	cmp	r0, #0
   b534c:	dd01      	ble.n	b5352 <serialEventRun+0x2e>
        serialEvent1();
   b534e:	f3af 8000 	nop.w
}
   b5352:	bd08      	pop	{r3, pc}
	...

000b535c <_post_loop>:
{
   b535c:	b508      	push	{r3, lr}
	serialEventRun();
   b535e:	f7ff ffe1 	bl	b5324 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5362:	f7ff f963 	bl	b462c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5366:	4b01      	ldr	r3, [pc, #4]	; (b536c <_post_loop+0x10>)
   b5368:	6018      	str	r0, [r3, #0]
}
   b536a:	bd08      	pop	{r3, pc}
   b536c:	2003e728 	.word	0x2003e728

000b5370 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5370:	4805      	ldr	r0, [pc, #20]	; (b5388 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5372:	4a06      	ldr	r2, [pc, #24]	; (b538c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5374:	4906      	ldr	r1, [pc, #24]	; (b5390 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5376:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5378:	1a12      	subs	r2, r2, r0
   b537a:	f000 f96f 	bl	b565c <memcpy>
    __backup_sram_signature = signature;
   b537e:	4b05      	ldr	r3, [pc, #20]	; (b5394 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5380:	4a05      	ldr	r2, [pc, #20]	; (b5398 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5382:	601a      	str	r2, [r3, #0]
}
   b5384:	bd08      	pop	{r3, pc}
   b5386:	bf00      	nop
   b5388:	2003f400 	.word	0x2003f400
   b538c:	2003f404 	.word	0x2003f404
   b5390:	000b5a64 	.word	0x000b5a64
   b5394:	2003f400 	.word	0x2003f400
   b5398:	9a271c1e 	.word	0x9a271c1e

000b539c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b539c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b539e:	2300      	movs	r3, #0
   b53a0:	9300      	str	r3, [sp, #0]
   b53a2:	461a      	mov	r2, r3
   b53a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b53a8:	f7ff fab2 	bl	b4910 <system_ctrl_set_result>
}
   b53ac:	b003      	add	sp, #12
   b53ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b53b4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b53b4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b53b6:	8843      	ldrh	r3, [r0, #2]
   b53b8:	2b0a      	cmp	r3, #10
   b53ba:	d008      	beq.n	b53ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b53bc:	2b50      	cmp	r3, #80	; 0x50
   b53be:	d10b      	bne.n	b53d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b53c0:	4b09      	ldr	r3, [pc, #36]	; (b53e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b53c2:	681b      	ldr	r3, [r3, #0]
   b53c4:	b14b      	cbz	r3, b53da <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b53c6:	b003      	add	sp, #12
   b53c8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b53cc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b53ce:	f7ff ffe5 	bl	b539c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b53d2:	b003      	add	sp, #12
   b53d4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b53d8:	2300      	movs	r3, #0
   b53da:	9300      	str	r3, [sp, #0]
   b53dc:	461a      	mov	r2, r3
   b53de:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b53e2:	f7ff fa95 	bl	b4910 <system_ctrl_set_result>
}
   b53e6:	e7f4      	b.n	b53d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b53e8:	2003e724 	.word	0x2003e724

000b53ec <module_user_init_hook>:
{
   b53ec:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b53ee:	4812      	ldr	r0, [pc, #72]	; (b5438 <module_user_init_hook+0x4c>)
   b53f0:	2100      	movs	r1, #0
   b53f2:	f7ff fb27 	bl	b4a44 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b53f6:	4b11      	ldr	r3, [pc, #68]	; (b543c <module_user_init_hook+0x50>)
   b53f8:	681a      	ldr	r2, [r3, #0]
   b53fa:	4b11      	ldr	r3, [pc, #68]	; (b5440 <module_user_init_hook+0x54>)
   b53fc:	429a      	cmp	r2, r3
   b53fe:	4b11      	ldr	r3, [pc, #68]	; (b5444 <module_user_init_hook+0x58>)
   b5400:	bf0c      	ite	eq
   b5402:	2201      	moveq	r2, #1
   b5404:	2200      	movne	r2, #0
   b5406:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5408:	d001      	beq.n	b540e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b540a:	f7ff ffb1 	bl	b5370 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b540e:	f7ff f8fd 	bl	b460c <HAL_RNG_GetRandomNumber>
   b5412:	4604      	mov	r4, r0
    srand(seed);
   b5414:	f000 f938 	bl	b5688 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5418:	4b0b      	ldr	r3, [pc, #44]	; (b5448 <module_user_init_hook+0x5c>)
   b541a:	b113      	cbz	r3, b5422 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b541c:	4620      	mov	r0, r4
   b541e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5422:	2100      	movs	r1, #0
   b5424:	4808      	ldr	r0, [pc, #32]	; (b5448 <module_user_init_hook+0x5c>)
   b5426:	f7ff fa85 	bl	b4934 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b542a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b542e:	4807      	ldr	r0, [pc, #28]	; (b544c <module_user_init_hook+0x60>)
   b5430:	2100      	movs	r1, #0
   b5432:	f7ff ba63 	b.w	b48fc <system_ctrl_set_app_request_handler>
   b5436:	bf00      	nop
   b5438:	000b5319 	.word	0x000b5319
   b543c:	2003f400 	.word	0x2003f400
   b5440:	9a271c1e 	.word	0x9a271c1e
   b5444:	2003e720 	.word	0x2003e720
   b5448:	00000000 	.word	0x00000000
   b544c:	000b53b5 	.word	0x000b53b5

000b5450 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5450:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5452:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5454:	d902      	bls.n	b545c <pinAvailable+0xc>
    return false;
   b5456:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5458:	b002      	add	sp, #8
   b545a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b545c:	f1a0 030b 	sub.w	r3, r0, #11
   b5460:	2b02      	cmp	r3, #2
   b5462:	d81a      	bhi.n	b549a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5464:	4c17      	ldr	r4, [pc, #92]	; (b54c4 <pinAvailable+0x74>)
   b5466:	7821      	ldrb	r1, [r4, #0]
   b5468:	f3bf 8f5b 	dmb	ish
   b546c:	f011 0101 	ands.w	r1, r1, #1
   b5470:	d10b      	bne.n	b548a <pinAvailable+0x3a>
   b5472:	4620      	mov	r0, r4
   b5474:	9101      	str	r1, [sp, #4]
   b5476:	f7fe fe10 	bl	b409a <__cxa_guard_acquire>
   b547a:	9901      	ldr	r1, [sp, #4]
   b547c:	b128      	cbz	r0, b548a <pinAvailable+0x3a>
   b547e:	4812      	ldr	r0, [pc, #72]	; (b54c8 <pinAvailable+0x78>)
   b5480:	f7ff fd88 	bl	b4f94 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5484:	4620      	mov	r0, r4
   b5486:	f7fe fe0d 	bl	b40a4 <__cxa_guard_release>
   b548a:	4b0f      	ldr	r3, [pc, #60]	; (b54c8 <pinAvailable+0x78>)
   b548c:	7818      	ldrb	r0, [r3, #0]
   b548e:	f7ff f98d 	bl	b47ac <hal_spi_is_enabled>
   b5492:	2800      	cmp	r0, #0
   b5494:	d1df      	bne.n	b5456 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5496:	2001      	movs	r0, #1
   b5498:	e7de      	b.n	b5458 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b549a:	2801      	cmp	r0, #1
   b549c:	d809      	bhi.n	b54b2 <pinAvailable+0x62>
   b549e:	f000 f871 	bl	b5584 <_Z19__fetch_global_Wirev>
   b54a2:	2100      	movs	r1, #0
   b54a4:	7c00      	ldrb	r0, [r0, #16]
   b54a6:	f7ff f921 	bl	b46ec <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b54aa:	f080 0001 	eor.w	r0, r0, #1
   b54ae:	b2c0      	uxtb	r0, r0
   b54b0:	e7d2      	b.n	b5458 <pinAvailable+0x8>
   b54b2:	3809      	subs	r0, #9
   b54b4:	2801      	cmp	r0, #1
   b54b6:	d8ee      	bhi.n	b5496 <pinAvailable+0x46>
   b54b8:	f000 f8a4 	bl	b5604 <_Z22__fetch_global_Serial1v>
   b54bc:	7c00      	ldrb	r0, [r0, #16]
   b54be:	f7ff f9bd 	bl	b483c <hal_usart_is_enabled>
   b54c2:	e7f2      	b.n	b54aa <pinAvailable+0x5a>
   b54c4:	2003e690 	.word	0x2003e690
   b54c8:	2003e694 	.word	0x2003e694

000b54cc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b54cc:	2823      	cmp	r0, #35	; 0x23
{
   b54ce:	b538      	push	{r3, r4, r5, lr}
   b54d0:	4604      	mov	r4, r0
   b54d2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b54d4:	d80a      	bhi.n	b54ec <pinMode+0x20>
   b54d6:	29ff      	cmp	r1, #255	; 0xff
   b54d8:	d008      	beq.n	b54ec <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b54da:	f7ff ffb9 	bl	b5450 <pinAvailable>
   b54de:	b128      	cbz	r0, b54ec <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b54e0:	4629      	mov	r1, r5
   b54e2:	4620      	mov	r0, r4
}
   b54e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b54e8:	f7ff b8b8 	b.w	b465c <HAL_Pin_Mode>
}
   b54ec:	bd38      	pop	{r3, r4, r5, pc}

000b54ee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b54ee:	b538      	push	{r3, r4, r5, lr}
   b54f0:	4604      	mov	r4, r0
   b54f2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b54f4:	f7ff f8ba 	bl	b466c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b54f8:	28ff      	cmp	r0, #255	; 0xff
   b54fa:	d010      	beq.n	b551e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b54fc:	2806      	cmp	r0, #6
   b54fe:	d804      	bhi.n	b550a <digitalWrite+0x1c>
   b5500:	234d      	movs	r3, #77	; 0x4d
   b5502:	fa23 f000 	lsr.w	r0, r3, r0
   b5506:	07c3      	lsls	r3, r0, #31
   b5508:	d409      	bmi.n	b551e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b550a:	4620      	mov	r0, r4
   b550c:	f7ff ffa0 	bl	b5450 <pinAvailable>
   b5510:	b128      	cbz	r0, b551e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5512:	4629      	mov	r1, r5
   b5514:	4620      	mov	r0, r4
}
   b5516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b551a:	f7ff b8af 	b.w	b467c <HAL_GPIO_Write>
}
   b551e:	bd38      	pop	{r3, r4, r5, pc}

000b5520 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b5520:	280d      	cmp	r0, #13
{
   b5522:	b510      	push	{r4, lr}
   b5524:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b5526:	bf9c      	itt	ls
   b5528:	340e      	addls	r4, #14
   b552a:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b552c:	4620      	mov	r0, r4
   b552e:	f7ff ff8f 	bl	b5450 <pinAvailable>
   b5532:	b150      	cbz	r0, b554a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b5534:	2103      	movs	r1, #3
   b5536:	4620      	mov	r0, r4
   b5538:	f7ff f888 	bl	b464c <HAL_Validate_Pin_Function>
   b553c:	2803      	cmp	r0, #3
   b553e:	d104      	bne.n	b554a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b5540:	4620      	mov	r0, r4
}
   b5542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b5546:	f7ff b8a1 	b.w	b468c <hal_adc_read>
}
   b554a:	2000      	movs	r0, #0
   b554c:	bd10      	pop	{r4, pc}

000b554e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b554e:	4770      	bx	lr

000b5550 <_Z17acquireWireBufferv>:
{
   b5550:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5552:	4b0a      	ldr	r3, [pc, #40]	; (b557c <_Z17acquireWireBufferv+0x2c>)
   b5554:	6003      	str	r3, [r0, #0]
   b5556:	2301      	movs	r3, #1
{
   b5558:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b555a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b555c:	4908      	ldr	r1, [pc, #32]	; (b5580 <_Z17acquireWireBufferv+0x30>)
   b555e:	2020      	movs	r0, #32
   b5560:	f000 f874 	bl	b564c <_ZnajRKSt9nothrow_t>
	};
   b5564:	2520      	movs	r5, #32
   b5566:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5568:	4905      	ldr	r1, [pc, #20]	; (b5580 <_Z17acquireWireBufferv+0x30>)
	};
   b556a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b556c:	4628      	mov	r0, r5
   b556e:	f000 f86d 	bl	b564c <_ZnajRKSt9nothrow_t>
	};
   b5572:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5576:	4620      	mov	r0, r4
   b5578:	bd38      	pop	{r3, r4, r5, pc}
   b557a:	bf00      	nop
   b557c:	00010018 	.word	0x00010018
   b5580:	000b59a0 	.word	0x000b59a0

000b5584 <_Z19__fetch_global_Wirev>:
{
   b5584:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5586:	4d0e      	ldr	r5, [pc, #56]	; (b55c0 <_Z19__fetch_global_Wirev+0x3c>)
   b5588:	7829      	ldrb	r1, [r5, #0]
   b558a:	f3bf 8f5b 	dmb	ish
   b558e:	f011 0401 	ands.w	r4, r1, #1
{
   b5592:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5594:	d111      	bne.n	b55ba <_Z19__fetch_global_Wirev+0x36>
   b5596:	4628      	mov	r0, r5
   b5598:	f7fe fd7f 	bl	b409a <__cxa_guard_acquire>
   b559c:	b168      	cbz	r0, b55ba <_Z19__fetch_global_Wirev+0x36>
   b559e:	4668      	mov	r0, sp
   b55a0:	f7ff ffd6 	bl	b5550 <_Z17acquireWireBufferv>
   b55a4:	466a      	mov	r2, sp
   b55a6:	4621      	mov	r1, r4
   b55a8:	4806      	ldr	r0, [pc, #24]	; (b55c4 <_Z19__fetch_global_Wirev+0x40>)
   b55aa:	f7ff fb11 	bl	b4bd0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b55ae:	4628      	mov	r0, r5
   b55b0:	f7fe fd78 	bl	b40a4 <__cxa_guard_release>
   b55b4:	4804      	ldr	r0, [pc, #16]	; (b55c8 <_Z19__fetch_global_Wirev+0x44>)
   b55b6:	f000 f84b 	bl	b5650 <atexit>
	return wire;
}
   b55ba:	4802      	ldr	r0, [pc, #8]	; (b55c4 <_Z19__fetch_global_Wirev+0x40>)
   b55bc:	b007      	add	sp, #28
   b55be:	bd30      	pop	{r4, r5, pc}
   b55c0:	2003e72c 	.word	0x2003e72c
   b55c4:	2003e730 	.word	0x2003e730
   b55c8:	000b554f 	.word	0x000b554f

000b55cc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b55cc:	4770      	bx	lr
	...

000b55d0 <_Z20acquireSerial1Bufferv>:
{
   b55d0:	b538      	push	{r3, r4, r5, lr}
   b55d2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b55d4:	2514      	movs	r5, #20
   b55d6:	462a      	mov	r2, r5
   b55d8:	2100      	movs	r1, #0
   b55da:	f000 f84d 	bl	b5678 <memset>
   b55de:	8025      	strh	r5, [r4, #0]
   b55e0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b55e2:	4907      	ldr	r1, [pc, #28]	; (b5600 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b55e4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b55e6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b55e8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b55ea:	f000 f82f 	bl	b564c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b55ee:	4904      	ldr	r1, [pc, #16]	; (b5600 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b55f0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b55f2:	4628      	mov	r0, r5
   b55f4:	f000 f82a 	bl	b564c <_ZnajRKSt9nothrow_t>
    };
   b55f8:	60e0      	str	r0, [r4, #12]
}
   b55fa:	4620      	mov	r0, r4
   b55fc:	bd38      	pop	{r3, r4, r5, pc}
   b55fe:	bf00      	nop
   b5600:	000b59a0 	.word	0x000b59a0

000b5604 <_Z22__fetch_global_Serial1v>:
{
   b5604:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5606:	4d0e      	ldr	r5, [pc, #56]	; (b5640 <_Z22__fetch_global_Serial1v+0x3c>)
   b5608:	7829      	ldrb	r1, [r5, #0]
   b560a:	f3bf 8f5b 	dmb	ish
   b560e:	f011 0401 	ands.w	r4, r1, #1
{
   b5612:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5614:	d111      	bne.n	b563a <_Z22__fetch_global_Serial1v+0x36>
   b5616:	4628      	mov	r0, r5
   b5618:	f7fe fd3f 	bl	b409a <__cxa_guard_acquire>
   b561c:	b168      	cbz	r0, b563a <_Z22__fetch_global_Serial1v+0x36>
   b561e:	a801      	add	r0, sp, #4
   b5620:	f7ff ffd6 	bl	b55d0 <_Z20acquireSerial1Bufferv>
   b5624:	aa01      	add	r2, sp, #4
   b5626:	4621      	mov	r1, r4
   b5628:	4806      	ldr	r0, [pc, #24]	; (b5644 <_Z22__fetch_global_Serial1v+0x40>)
   b562a:	f7ff fdd9 	bl	b51e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b562e:	4628      	mov	r0, r5
   b5630:	f7fe fd38 	bl	b40a4 <__cxa_guard_release>
   b5634:	4804      	ldr	r0, [pc, #16]	; (b5648 <_Z22__fetch_global_Serial1v+0x44>)
   b5636:	f000 f80b 	bl	b5650 <atexit>
    return serial1;
}
   b563a:	4802      	ldr	r0, [pc, #8]	; (b5644 <_Z22__fetch_global_Serial1v+0x40>)
   b563c:	b007      	add	sp, #28
   b563e:	bd30      	pop	{r4, r5, pc}
   b5640:	2003e744 	.word	0x2003e744
   b5644:	2003e748 	.word	0x2003e748
   b5648:	000b55cd 	.word	0x000b55cd

000b564c <_ZnajRKSt9nothrow_t>:
   b564c:	f7fe bd21 	b.w	b4092 <_Znaj>

000b5650 <atexit>:
   b5650:	2300      	movs	r3, #0
   b5652:	4601      	mov	r1, r0
   b5654:	461a      	mov	r2, r3
   b5656:	4618      	mov	r0, r3
   b5658:	f000 b84c 	b.w	b56f4 <__register_exitproc>

000b565c <memcpy>:
   b565c:	440a      	add	r2, r1
   b565e:	4291      	cmp	r1, r2
   b5660:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5664:	d100      	bne.n	b5668 <memcpy+0xc>
   b5666:	4770      	bx	lr
   b5668:	b510      	push	{r4, lr}
   b566a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b566e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5672:	4291      	cmp	r1, r2
   b5674:	d1f9      	bne.n	b566a <memcpy+0xe>
   b5676:	bd10      	pop	{r4, pc}

000b5678 <memset>:
   b5678:	4402      	add	r2, r0
   b567a:	4603      	mov	r3, r0
   b567c:	4293      	cmp	r3, r2
   b567e:	d100      	bne.n	b5682 <memset+0xa>
   b5680:	4770      	bx	lr
   b5682:	f803 1b01 	strb.w	r1, [r3], #1
   b5686:	e7f9      	b.n	b567c <memset+0x4>

000b5688 <srand>:
   b5688:	b538      	push	{r3, r4, r5, lr}
   b568a:	4b10      	ldr	r3, [pc, #64]	; (b56cc <srand+0x44>)
   b568c:	681d      	ldr	r5, [r3, #0]
   b568e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5690:	4604      	mov	r4, r0
   b5692:	b9b3      	cbnz	r3, b56c2 <srand+0x3a>
   b5694:	2018      	movs	r0, #24
   b5696:	f7ff f9b5 	bl	b4a04 <malloc>
   b569a:	4602      	mov	r2, r0
   b569c:	63a8      	str	r0, [r5, #56]	; 0x38
   b569e:	b920      	cbnz	r0, b56aa <srand+0x22>
   b56a0:	4b0b      	ldr	r3, [pc, #44]	; (b56d0 <srand+0x48>)
   b56a2:	480c      	ldr	r0, [pc, #48]	; (b56d4 <srand+0x4c>)
   b56a4:	2142      	movs	r1, #66	; 0x42
   b56a6:	f7ff f9c5 	bl	b4a34 <__assert_func>
   b56aa:	490b      	ldr	r1, [pc, #44]	; (b56d8 <srand+0x50>)
   b56ac:	4b0b      	ldr	r3, [pc, #44]	; (b56dc <srand+0x54>)
   b56ae:	e9c0 1300 	strd	r1, r3, [r0]
   b56b2:	4b0b      	ldr	r3, [pc, #44]	; (b56e0 <srand+0x58>)
   b56b4:	6083      	str	r3, [r0, #8]
   b56b6:	230b      	movs	r3, #11
   b56b8:	8183      	strh	r3, [r0, #12]
   b56ba:	2100      	movs	r1, #0
   b56bc:	2001      	movs	r0, #1
   b56be:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b56c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b56c4:	2200      	movs	r2, #0
   b56c6:	611c      	str	r4, [r3, #16]
   b56c8:	615a      	str	r2, [r3, #20]
   b56ca:	bd38      	pop	{r3, r4, r5, pc}
   b56cc:	2003e5d8 	.word	0x2003e5d8
   b56d0:	000b59a1 	.word	0x000b59a1
   b56d4:	000b59b8 	.word	0x000b59b8
   b56d8:	abcd330e 	.word	0xabcd330e
   b56dc:	e66d1234 	.word	0xe66d1234
   b56e0:	0005deec 	.word	0x0005deec

000b56e4 <strlen>:
   b56e4:	4603      	mov	r3, r0
   b56e6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b56ea:	2a00      	cmp	r2, #0
   b56ec:	d1fb      	bne.n	b56e6 <strlen+0x2>
   b56ee:	1a18      	subs	r0, r3, r0
   b56f0:	3801      	subs	r0, #1
   b56f2:	4770      	bx	lr

000b56f4 <__register_exitproc>:
   b56f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b56f8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b57b4 <__register_exitproc+0xc0>
   b56fc:	4606      	mov	r6, r0
   b56fe:	f8d8 0000 	ldr.w	r0, [r8]
   b5702:	461f      	mov	r7, r3
   b5704:	460d      	mov	r5, r1
   b5706:	4691      	mov	r9, r2
   b5708:	f000 f856 	bl	b57b8 <__retarget_lock_acquire_recursive>
   b570c:	4b25      	ldr	r3, [pc, #148]	; (b57a4 <__register_exitproc+0xb0>)
   b570e:	681c      	ldr	r4, [r3, #0]
   b5710:	b934      	cbnz	r4, b5720 <__register_exitproc+0x2c>
   b5712:	4c25      	ldr	r4, [pc, #148]	; (b57a8 <__register_exitproc+0xb4>)
   b5714:	601c      	str	r4, [r3, #0]
   b5716:	4b25      	ldr	r3, [pc, #148]	; (b57ac <__register_exitproc+0xb8>)
   b5718:	b113      	cbz	r3, b5720 <__register_exitproc+0x2c>
   b571a:	681b      	ldr	r3, [r3, #0]
   b571c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5720:	6863      	ldr	r3, [r4, #4]
   b5722:	2b1f      	cmp	r3, #31
   b5724:	dd07      	ble.n	b5736 <__register_exitproc+0x42>
   b5726:	f8d8 0000 	ldr.w	r0, [r8]
   b572a:	f000 f847 	bl	b57bc <__retarget_lock_release_recursive>
   b572e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5736:	b34e      	cbz	r6, b578c <__register_exitproc+0x98>
   b5738:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b573c:	b988      	cbnz	r0, b5762 <__register_exitproc+0x6e>
   b573e:	4b1c      	ldr	r3, [pc, #112]	; (b57b0 <__register_exitproc+0xbc>)
   b5740:	b923      	cbnz	r3, b574c <__register_exitproc+0x58>
   b5742:	f8d8 0000 	ldr.w	r0, [r8]
   b5746:	f000 f838 	bl	b57ba <__retarget_lock_release>
   b574a:	e7f0      	b.n	b572e <__register_exitproc+0x3a>
   b574c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5750:	f7ff f958 	bl	b4a04 <malloc>
   b5754:	2800      	cmp	r0, #0
   b5756:	d0f4      	beq.n	b5742 <__register_exitproc+0x4e>
   b5758:	2300      	movs	r3, #0
   b575a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b575e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5762:	6863      	ldr	r3, [r4, #4]
   b5764:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5768:	2201      	movs	r2, #1
   b576a:	409a      	lsls	r2, r3
   b576c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5770:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5774:	4313      	orrs	r3, r2
   b5776:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b577a:	2e02      	cmp	r6, #2
   b577c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5780:	bf02      	ittt	eq
   b5782:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5786:	4313      	orreq	r3, r2
   b5788:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b578c:	6863      	ldr	r3, [r4, #4]
   b578e:	f8d8 0000 	ldr.w	r0, [r8]
   b5792:	1c5a      	adds	r2, r3, #1
   b5794:	3302      	adds	r3, #2
   b5796:	6062      	str	r2, [r4, #4]
   b5798:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b579c:	f000 f80e 	bl	b57bc <__retarget_lock_release_recursive>
   b57a0:	2000      	movs	r0, #0
   b57a2:	e7c6      	b.n	b5732 <__register_exitproc+0x3e>
   b57a4:	2003e7e8 	.word	0x2003e7e8
   b57a8:	2003e75c 	.word	0x2003e75c
   b57ac:	00000000 	.word	0x00000000
   b57b0:	000b4a05 	.word	0x000b4a05
   b57b4:	2003e63c 	.word	0x2003e63c

000b57b8 <__retarget_lock_acquire_recursive>:
   b57b8:	4770      	bx	lr

000b57ba <__retarget_lock_release>:
   b57ba:	4770      	bx	lr

000b57bc <__retarget_lock_release_recursive>:
   b57bc:	4770      	bx	lr

000b57be <link_code_end>:
	...

000b57c0 <dynalib_user>:
   b57c0:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b57d0:	0000 0000 6142 646e 2031 203d 6925 000a     ....Band1 = %i..
   b57e0:	6142 646e 2032 203d 6925 000a 6142 646e     Band2 = %i..Band
   b57f0:	2033 203d 6925 000a 6142 646e 2034 203d     3 = %i..Band4 = 
   b5800:	6925 000a 6142 646e 2035 203d 6925 000a     %i..Band5 = %i..
   b5810:	6142 646e 2036 203d 6925 000a 6142 646e     Band6 = %i..Band
   b5820:	2037 203d 6925 000a                         7 = %i..

000b5828 <_ZTVN5spark13CellularClassE>:
	...
   b5830:	4ac3 000b 4ab9 000b 4aaf 000b 4a65 000b     .J...J...J..eJ..
   b5840:	4aa3 000b 4a97 000b 4d4d 000b 4d55 000b     .J...J..MM..UM..
   b5850:	4a8b 000b 4a83 000b 4a79 000b 4a6f 000b     .J...J..yJ..oJ..
   b5860:	4d85 000b                                   .M..

000b5864 <_ZTVN5spark13EthernetClassE>:
	...
   b586c:	4b5b 000b 4b51 000b 4b47 000b 4b3d 000b     [K..QK..GK..=K..
   b587c:	4b31 000b 4b25 000b 4d4d 000b 4d55 000b     1K..%K..MM..UM..
   b588c:	4b19 000b 4b11 000b 4b07 000b 4afd 000b     .K...K...K...J..
   b589c:	4d85 000b                                   .M..

000b58a0 <_ZTV7TwoWire>:
	...
   b58a8:	4b79 000b 4bc3 000b 4b9b 000b 4b7b 000b     yK...K...K..{K..
   b58b8:	4ba3 000b 4bab 000b 4bb3 000b 4bbb 000b     .K...K...K...K..

000b58c8 <_ZTV9IPAddress>:
	...
   b58d0:	4c1d 000b 4c0d 000b 4c0f 000b 7061 0070     .L...L...L..app.

000b58e0 <_ZTVN5spark12NetworkClassE>:
	...
   b58e8:	4d0d 000b 4d17 000b 4d21 000b 4d2b 000b     .M...M..!M..+M..
   b58f8:	4d35 000b 4d41 000b 4d4d 000b 4d55 000b     5M..AM..MM..UM..
   b5908:	4d5d 000b 4d69 000b 4d71 000b 4d7b 000b     ]M..iM..qM..{M..
   b5918:	4d85 000b                                   .M..

000b591c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b591c:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b592c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b593c:	6d69 0065                                   ime.

000b5940 <_ZTV11USARTSerial>:
	...
   b5948:	5165 000b 51d1 000b 51a9 000b 4e71 000b     eQ...Q...Q..qN..
   b5958:	5179 000b 5195 000b 5187 000b 51a3 000b     yQ...Q...Q...Q..
   b5968:	5167 000b 516b 000b                         gQ..kQ..

000b5970 <_ZTV9USBSerial>:
	...
   b5978:	520f 000b 5277 000b 524d 000b 4e71 000b     .R..wR..MR..qN..
   b5988:	523f 000b 5211 000b 5221 000b 5271 000b     ?R...R..!R..qR..
   b5998:	5231 000b 5209 000b                         1R...R..

000b59a0 <_ZSt7nothrow>:
   b59a0:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b59b0:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b59c0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b59d0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b59e0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b59f0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b5a00:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b5a11 <link_const_variable_data_end>:
   b5a11:	00          	.byte	0x00
	...

000b5a14 <link_constructors_location>:
   b5a14:	000b43a1 	.word	0x000b43a1
   b5a18:	000b4a55 	.word	0x000b4a55
   b5a1c:	000b4acd 	.word	0x000b4acd
   b5a20:	000b4b65 	.word	0x000b4b65
   b5a24:	000b4cfd 	.word	0x000b4cfd
   b5a28:	000b4e5d 	.word	0x000b4e5d
   b5a2c:	000b4f7d 	.word	0x000b4f7d
   b5a30:	000b512d 	.word	0x000b512d
   b5a34:	000b5151 	.word	0x000b5151

000b5a38 <link_constructors_end>:
	...
